{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9430984,"sourceType":"datasetVersion","datasetId":5729649}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Adaptive Polynomial Curve Loss for Varied Distribution Clusters in Deep Face Recognition                                  \n* Adaptive Polynomial Curve Loss: The core idea of representing class centers as polynomial curves.\n* For Varied Distribution Clusters: Highlights the ability to handle complex, varied distributions within each class.\n* For Deep Face Recognition: Specifies the application area, making it clear that the approach is designed for deep face recognition tasks.","metadata":{}},{"cell_type":"markdown","source":"# 1. Dataset    \n## Kaggle: Face Recognition Dataset\n* Face Data of 31 different classes\n* unique values: 2562\n* link: https://www.kaggle.com/datasets/vasukipatel/face-recognition-dataset \n","metadata":{}},{"cell_type":"markdown","source":"### 1.1 Dataset directory","metadata":{}},{"cell_type":"code","source":"# Set directories\nimport os\nws_dir = '/kaggle/input'\ndataset_dir = os.path.join(ws_dir, 'dataset01')\nfaces_dir = os.path.join(dataset_dir, 'faces')","metadata":{"execution":{"iopub.status.busy":"2024-09-23T21:58:43.006782Z","iopub.execute_input":"2024-09-23T21:58:43.007185Z","iopub.status.idle":"2024-09-23T21:58:43.012733Z","shell.execute_reply.started":"2024-09-23T21:58:43.007148Z","shell.execute_reply":"2024-09-23T21:58:43.011609Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# 2 Pre-Process","metadata":{}},{"cell_type":"markdown","source":"### 2.1 Dataset as numpy array  \n\n* Resize the original image to (224,224,3) when creating numpy array","metadata":{}},{"cell_type":"code","source":"import cv2\nimport numpy as np\n\nimages = []\nlabels = []\n\n# Loop over each person directory in the faces directory\nfor person_name in os.listdir(faces_dir):\n    person_dir = os.path.join(faces_dir, person_name)\n\n    # Check if it is a directory (and not a file)\n    if os.path.isdir(person_dir):\n        # Loop over each image in the person's directory\n        for image_name in os.listdir(person_dir):\n            image_path = os.path.join(person_dir, image_name)\n\n            # Load image using OpenCV\n            image = cv2.imread(image_path)\n\n            # Optionally resize images to a standard size (e.g., 224x224)\n            image = cv2.resize(image, (224, 224))\n\n            # Convert the image to RGB (OpenCV loads images in BGR format by default)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n            # Append image and corresponding label to lists\n            images.append(image)\n            labels.append(person_name)  # The person's name is used as the label\n\n# Convert lists to NumPy arrays\nimages_np = np.array(images)\nlabels_np = np.array(labels)\n\n# Verify the shapes\nprint(f'Images shape: {images_np.shape}')  # (num_images, 224, 224, 3)\nprint(f'Labels shape: {labels_np.shape}')  # (num_images,)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T21:58:46.168075Z","iopub.execute_input":"2024-09-23T21:58:46.168642Z","iopub.status.idle":"2024-09-23T21:59:00.583110Z","shell.execute_reply.started":"2024-09-23T21:58:46.168590Z","shell.execute_reply":"2024-09-23T21:59:00.582097Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Images shape: (2562, 224, 224, 3)\nLabels shape: (2562,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### 2.2 Preprocess dataset                                                                                                  \n* Preprocess using VGG19 preprocess_input\n* Convert label to Onehot encoding\n* Split dataset into train, test and validation","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.applications.vgg19 import preprocess_input\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nimport numpy as np\n\n# Assuming images_np and labels_np are provided\n# images_np.shape = (num_samples, height, width, channels)\n# labels_np.shape = (num_samples,)\n\n# Preprocess images for VGG19\nimages_np_preprocessed = preprocess_input(images_np)\n\n# One-hot encode labels\none_hot_encoder = OneHotEncoder(sparse=False)\nlabels_np_onehot = one_hot_encoder.fit_transform(labels_np.reshape(-1, 1))\n\n# Split into training, validation, and test sets\nX_train, X_temp, y_train, y_temp = train_test_split(images_np_preprocessed, labels_np_onehot, test_size=0.3, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\nprint(f\"Train set: {X_train.shape}, {y_train.shape}\")\nprint(f\"Validation set: {X_val.shape}, {y_val.shape}\")\nprint(f\"Test set: {X_test.shape}, {y_test.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T21:59:04.031625Z","iopub.execute_input":"2024-09-23T21:59:04.032006Z","iopub.status.idle":"2024-09-23T21:59:07.230636Z","shell.execute_reply.started":"2024-09-23T21:59:04.031971Z","shell.execute_reply":"2024-09-23T21:59:07.229539Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Train set: (1793, 224, 224, 3), (1793, 31)\nValidation set: (384, 224, 224, 3), (384, 31)\nTest set: (385, 224, 224, 3), (385, 31)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 3. Model","metadata":{}},{"cell_type":"markdown","source":"## 3.1 SoftMax","metadata":{}},{"cell_type":"markdown","source":"#### (A) Train","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.regularizers import l2\n\n# Build the model with softmax classifier\ndef build_vgg19_softmax(input_shape, num_classes, dropout_rate, weight_decay):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    inputs = layers.Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout, using 'swish' as the activation function\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n   \n    # Add the softmax classification layer\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n\n    model = models.Model(inputs=inputs, outputs=outputs)\n    return model\n\n# Specify input shape and number of classes\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes (31 in your case)\n\n# Hyper parameters\ndropout_rate = 0.1\nweight_decay = 0.01\n\n# Build the VGG19 model with softmax classifier\nmodel = build_vgg19_softmax(input_shape, num_classes, dropout_rate, weight_decay)\n\n# Compile the model with CategoricalCrossentropy loss\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001), \n              loss=tf.keras.losses.CategoricalCrossentropy(), \n              metrics=['accuracy'])\n\n# Training the model\nhistory = model.fit(\n    X_train,  # Input images\n    y_train,  # One-hot encoded labels\n    validation_data=(X_val, y_val),  # Validation data\n    epochs=15,\n    batch_size=32\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T15:22:26.836826Z","iopub.execute_input":"2024-09-22T15:22:26.837225Z","iopub.status.idle":"2024-09-22T15:25:40.944811Z","shell.execute_reply.started":"2024-09-22T15:22:26.837185Z","shell.execute_reply":"2024-09-22T15:25:40.943847Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### (B) Plot Accuracy","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Create a figure with two subplots side by side\nfig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\n# Plot training and validation accuracy on the first subplot\naxs[0].plot(history.history['accuracy'], label='Training Accuracy')\nif 'val_accuracy' in history.history:\n    axs[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\naxs[0].set_title('Training and Validation Accuracy')\naxs[0].set_xlabel('Epochs')\naxs[0].set_ylabel('Accuracy')\naxs[0].legend(loc='lower right')\naxs[0].grid(True)\n\n# Plot training and validation loss on the second subplot\naxs[1].plot(history.history['loss'], label='Training Loss')\naxs[1].plot(history.history['val_loss'], label='Validation Loss')\naxs[1].set_title('Training and Validation Loss')\naxs[1].set_xlabel('Epochs')\naxs[1].set_ylabel('Loss')\naxs[1].legend(loc='upper right')\naxs[1].grid(True)\n\n# Display the plots\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T15:56:24.338589Z","iopub.execute_input":"2024-09-22T15:56:24.339052Z","iopub.status.idle":"2024-09-22T15:56:25.097538Z","shell.execute_reply.started":"2024-09-22T15:56:24.339009Z","shell.execute_reply":"2024-09-22T15:56:25.096512Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## 3.1 Line center loss","metadata":{}},{"cell_type":"markdown","source":"#### (A) Train","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.regularizers import l2\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, alpha=0.5, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.alpha = alpha  # Learning rate for updating centers\n\n        # Initialize centers (trainable=False, updated manually)\n        self.centers = self.add_weight(\n            name='centers',\n            shape=(num_classes, embedding_dim),\n            initializer='zeros',\n            trainable=False,\n            dtype=tf.float32\n        )\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n        labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer labels\n        centers_batch = tf.gather(self.centers, labels)  # Retrieve centers for batch\n\n        # Compute center loss as L2 distance\n        center_loss = tf.reduce_mean(tf.square(embeddings - centers_batch))\n\n        # Update centers using a moving average\n        delta_centers = centers_batch - embeddings\n        delta_centers = tf.math.unsorted_segment_mean(delta_centers, labels, self.num_classes)  # Correct delta computation\n        new_centers = self.centers - self.alpha * delta_centers  # Update centers with learning rate alpha\n\n        # Assign updated centers\n        self.centers.assign(new_centers)\n\n        return center_loss\n\n# Custom Callback to track and print classification loss and center loss\n# Custom Callback to track and print classification loss and center loss\nclass PrintLossesCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs=None):\n        # Print the available keys for reference\n        if epoch == 0:\n            print(f\"Available keys in logs: {logs.keys()}\")\n        \n        # Get the total loss and classification accuracy\n        total_loss = logs['loss']\n        classification_accuracy = logs['dense_accuracy']\n        validation_accuracy = logs['val_dense_accuracy']\n        \n        # Print the total loss and accuracy\n        print(f\"Epoch {epoch + 1}:\")\n        print(f\"Training - Total Loss: {total_loss:.4f}, Classification Accuracy: {classification_accuracy:.4f}\")\n        print(f\"Validation - Classification Accuracy: {validation_accuracy:.4f}\")\n\n        # Calculate and print the center loss\n        if 'center_loss' in logs:\n            center_loss = logs['center_loss']\n            validation_center_loss = logs['val_loss'] - (logs['val_dense_loss'] * (1.0 - alpha_center_loss))\n            print(f\"Training - Center Loss: {center_loss:.4f}\")\n            print(f\"Validation - Center Loss: {validation_center_loss:.4f}\\n\")\n        else:\n            print(\"Center loss not available in logs.\\n\")\n\n\n\n\n# Build the VGG19 model with center loss\ndef build_vgg19_with_center_loss(input_shape, num_classes, dropout_rate, weight_decay, embedding_dim, alpha=0.5):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    image_inputs = layers.Input(shape=input_shape, name='image_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    x = base_model(image_inputs, training=False)\n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    \n    # Added Dense(1003) layer\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n\n    # Feature layer with embedding dimension\n    features = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Center loss layer (outputs center loss)\n    center_loss = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim, alpha=alpha, name='center_loss')([features, labels_input])\n\n    # Classification layer (softmax)\n    outputs = layers.Dense(num_classes, activation='softmax', name='dense')(features)\n\n    # Model with two outputs: softmax and center loss\n    model = models.Model(inputs=[image_inputs, labels_input], outputs=[outputs, center_loss], name=\"vgg19_center_loss_model\")\n    return model\n\n# Specify input shape and number of classes\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes (31 in your case)\n\n# Hyperparameters\ndropout_rate = 0.1\nweight_decay = 0.01\nembedding_dim = 512  # Example embedding dimension\nalpha_center_loss = 0.5\n\n# Build the model with center loss\nmodel = build_vgg19_with_center_loss(input_shape, num_classes, dropout_rate, weight_decay, embedding_dim, alpha=alpha_center_loss)\n\n# Compile the model with separate loss functions for classification and center loss\nmodel.compile(\n    optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001), \n    loss={'dense': 'categorical_crossentropy',  # For classification\n          'center_loss': lambda y_true, y_pred: y_pred},  # No ground truth for center loss\n    loss_weights={'dense': 1.0, 'center_loss': alpha_center_loss},  # Adjust weights\n    metrics={'dense': 'accuracy'}  # Accuracy for classification only\n)\n\n# Train the model and use the PrintLossesCallback to track and print the losses\nhistory = model.fit(\n    [X_train, y_train],  # Input images and one-hot encoded labels for center loss\n    {'dense': y_train},  # Only one set of labels for softmax output\n    validation_data=([X_val, y_val], {'dense': y_val}),\n    epochs=15,\n    batch_size=32,\n    callbacks=[PrintLossesCallback()]  # Add the custom callback here\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T18:46:40.414937Z","iopub.execute_input":"2024-09-22T18:46:40.415349Z","iopub.status.idle":"2024-09-22T18:50:08.362004Z","shell.execute_reply.started":"2024-09-22T18:46:40.415306Z","shell.execute_reply":"2024-09-22T18:50:08.361108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Custom training","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.regularizers import l2\n\n# # # Center Loss Layer\n# class CenterLossLayer(tf.keras.layers.Layer):\n#     def __init__(self, num_classes, embedding_dim, alpha=0.5, **kwargs):\n#         super(CenterLossLayer, self).__init__(**kwargs)\n#         self.num_classes = num_classes\n#         self.embedding_dim = embedding_dim\n#         self.alpha = alpha  # Learning rate for updating centers\n\n#         # Initialize centers (trainable=False, updated manually)\n#         self.centers = self.add_weight(\n#             name='centers',\n#             shape=(num_classes, embedding_dim),\n#             initializer='zeros',\n#             trainable=False,\n#             dtype=tf.float32\n#         )\n\n#     def call(self, inputs):\n#         embeddings, labels = inputs\n#         labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer labels\n#         centers_batch = tf.gather(self.centers, labels)  # Retrieve centers for batch\n\n#         # Compute center loss as L2 distance\n#         center_loss = tf.reduce_mean(tf.square(embeddings - centers_batch))\n\n#         # Update centers using a moving average\n#         delta_centers = centers_batch - embeddings\n#         delta_centers = tf.math.unsorted_segment_mean(delta_centers, labels, self.num_classes)  # Correct delta computation\n#         new_centers = self.centers - self.alpha * delta_centers  # Update centers with learning rate alpha\n\n#         # Assign updated centers\n#         self.centers.assign(new_centers)\n\n#         return center_loss\n\n# # Center Loss Layer with Inter-Class Penalty\n# class CenterLossLayer(tf.keras.layers.Layer):\n#     def __init__(self, num_classes, embedding_dim, alpha=0.5, margin=1.0, **kwargs):\n#         super(CenterLossLayer, self).__init__(**kwargs)\n#         self.num_classes = num_classes\n#         self.embedding_dim = embedding_dim\n#         self.alpha = alpha  # Learning rate for updating centers\n#         self.margin = margin  # The margin M for inter-class distance\n\n#         # Initialize centers (trainable=False, updated manually)\n#         self.centers = self.add_weight(\n#             name='centers',\n#             shape=(num_classes, embedding_dim),\n#             initializer='zeros',\n#             trainable=False,\n#             dtype=tf.float32\n#         )\n\n#     def call(self, inputs):\n#         embeddings, labels = inputs\n#         labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer labels\n#         centers_batch = tf.gather(self.centers, labels)  # Retrieve centers for batch\n\n#         # Compute center loss as L2 distance between embeddings and their centers\n#         center_loss = tf.reduce_mean(tf.square(embeddings - centers_batch))\n\n#         # Update centers using a moving average\n#         delta_centers = centers_batch - embeddings\n#         delta_centers = tf.math.unsorted_segment_mean(delta_centers, labels, self.num_classes)  # Correct delta computation\n#         new_centers = self.centers - self.alpha * delta_centers  # Update centers with learning rate alpha\n\n#         # Assign updated centers\n#         self.centers.assign(new_centers)\n\n#         # 1. Inter-Class Penalty Term for neighboring clusters\n#         # Compute pairwise distance between class centers\n#         center_dists = tf.norm(\n#             tf.expand_dims(self.centers, axis=0) - tf.expand_dims(self.centers, axis=1), axis=-1\n#         )\n        \n#         # Create a mask to ignore diagonal (self-distances, which should be zero)\n#         mask = tf.eye(self.num_classes, dtype=tf.bool)\n#         center_dists = tf.where(mask, tf.zeros_like(center_dists), center_dists)\n\n#         # 2. Penalty for centers closer than margin\n#         inter_class_penalty = tf.reduce_sum(\n#             tf.maximum(self.margin - center_dists, 0.0)  # Apply margin constraint\n#         )\n\n#         # Combine center loss and inter-class penalty\n#         total_loss = center_loss + inter_class_penalty\n#         return total_loss\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, alpha=0.5, margin=1.0, penalty_weight=1, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.alpha = alpha  # Learning rate for updating centers\n        self.margin = margin  # The margin M for inter-class distance\n        self.penalty_weight = penalty_weight  # Weight for inter-class penalty\n\n        # Initialize centers (trainable=False, updated manually)\n        self.centers = self.add_weight(\n            name='centers',\n            shape=(num_classes, embedding_dim),\n            initializer='zeros',\n            trainable=False,\n            dtype=tf.float32\n        )\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n        labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer labels\n        centers_batch = tf.gather(self.centers, labels)  # Retrieve centers for batch\n\n        # Compute center loss as L2 distance between embeddings and their centers\n        center_loss = tf.reduce_mean(tf.square(embeddings - centers_batch))\n\n        # Update centers using a moving average\n        delta_centers = centers_batch - embeddings\n        delta_centers = tf.math.unsorted_segment_mean(delta_centers, labels, self.num_classes)  # Correct delta computation\n        new_centers = self.centers - self.alpha * delta_centers  # Update centers with learning rate alpha\n\n        # Assign updated centers\n        self.centers.assign(new_centers)\n\n        # 1. Inter-Class Penalty Term for neighboring clusters\n        # Compute pairwise distance between class centers\n        center_dists = tf.norm(\n            tf.expand_dims(self.centers, axis=0) - tf.expand_dims(self.centers, axis=1), axis=-1\n        )\n        \n        # Create a mask to ignore diagonal (self-distances, which should be zero)\n        mask = tf.eye(self.num_classes, dtype=tf.bool)\n        center_dists = tf.where(mask, tf.zeros_like(center_dists), center_dists)\n\n        # 2. Penalty for centers closer than margin\n        num_pairs = (self.num_classes * (self.num_classes - 1)) / 2  # Total unique pairs of class centers\n        inter_class_penalty = tf.reduce_sum(\n            tf.maximum(self.margin - center_dists, 0.0)  # Apply margin constraint\n        ) / num_pairs\n\n        # Combine center loss and inter-class penalty, scaled by penalty weight\n        total_loss = center_loss + self.penalty_weight * inter_class_penalty\n        return total_loss\n\n    \n# Build the VGG19 model with center loss\ndef build_vgg19_with_center_loss(input_shape, num_classes, dropout_rate, weight_decay, embedding_dim, alpha=0.5):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    image_inputs = layers.Input(shape=input_shape, name='image_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    x = base_model(image_inputs, training=False)\n    \n    # Freeze the first 15 layers (you can adjust this number)\n    for layer in base_model.layers[:15]:  \n        layer.trainable = False\n    \n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n\n    # Feature layer with embedding dimension\n    features = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Center loss layer (outputs center loss)\n    center_loss = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim, alpha=alpha, name='center_loss')([features, labels_input])\n\n    # Classification layer (softmax)\n    outputs = layers.Dense(num_classes, activation='softmax', name='dense')(features)\n\n    # Model with two outputs: softmax and center loss\n    model = models.Model(inputs=[image_inputs, labels_input], outputs=[outputs, center_loss], name=\"vgg19_center_loss_model\")\n    return model\n\n# Custom train and evaluate function\ndef custom_train_and_evaluate(model, X_train, y_train, X_val, y_val, epochs, batch_size, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        'train_loss': [],\n        'train_classification_loss': [],\n        'train_center_loss': [],\n        'train_accuracy': [],\n        'val_loss': [],\n        'val_classification_loss': [],\n        'val_center_loss': [],\n        'val_accuracy': []\n    }\n\n    @tf.function\n    def train_step(images, labels):\n        with tf.GradientTape() as tape:\n            outputs, center_loss = model([images, labels], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, outputs)\n            total_loss = classification_loss +  center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(outputs, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(images, labels):\n        outputs, center_loss = model([images, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, outputs)\n\n        # Calculate validation accuracy\n        predictions = tf.argmax(outputs, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch + 1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            total_loss, class_loss, center_loss, acc = train_step(images_batch, labels_batch)\n            epoch_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n\n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            images_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            class_loss, center_loss, acc = eval_step(images_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        # Average out the losses and accuracies\n        epoch_loss /= (len(X_train) // batch_size)\n        epoch_class_loss /= (len(X_train) // batch_size)\n        epoch_center_loss /= (len(X_train) // batch_size)\n        epoch_acc /= (len(X_train) // batch_size)\n\n        val_class_loss /= (len(X_val) // batch_size)\n        val_center_loss /= (len(X_val) // batch_size)\n        val_acc /= (len(X_val) // batch_size)\n\n        # Log losses and accuracies in the history\n        history['train_loss'].append(epoch_loss.numpy())\n        history['train_classification_loss'].append(epoch_class_loss.numpy())\n        history['train_center_loss'].append(epoch_center_loss.numpy())\n        history['train_accuracy'].append(epoch_acc.numpy())\n        history['val_loss'].append(val_class_loss.numpy())\n        history['val_classification_loss'].append(val_class_loss.numpy())\n        history['val_center_loss'].append(val_center_loss.numpy())\n        history['val_accuracy'].append(val_acc.numpy())\n\n        # Print losses and accuracies\n        print(f\"Training loss: {epoch_loss.numpy():.4f}, \"\n              f\"Classification Loss: {epoch_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {epoch_center_loss.numpy():.4f}, \"\n              f\"Accuracy: {epoch_acc.numpy():.4f}\")\n\n        print(f\"Validation Classification Loss: {val_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {val_center_loss.numpy():.4f}, \"\n              f\"Accuracy: {val_acc.numpy():.4f}\\n\")\n\n    return history\n\n# Specify input shape and number of classes\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes (31 in your case)\n\n# Hyperparameters\nembedding_dim = 768\ndropout_rate = 0.2\nweight_decay = 0.05 #1e-4\nalpha_center_loss = 0.5\ncenter_loss_weight = 1 #0.01\nlearning_rate = 1e-4\nbatch_size = 32\nepochs = 20\n\n# Build the model with center loss\nmodel = build_vgg19_with_center_loss(input_shape, num_classes, dropout_rate, weight_decay, embedding_dim, alpha=alpha_center_loss)\n\n# Train the model and get history\nhistory = custom_train_and_evaluate(model, X_train, y_train, X_val, y_val, epochs=epochs, batch_size=batch_size, center_loss_weight=center_loss_weight, learning_rate=learning_rate)\n\n# Optionally print or visualize the history\nprint(history)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:37:39.267228Z","iopub.execute_input":"2024-09-22T19:37:39.267624Z","iopub.status.idle":"2024-09-22T19:41:01.711611Z","shell.execute_reply.started":"2024-09-22T19:37:39.267579Z","shell.execute_reply":"2024-09-22T19:41:01.709972Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### (B) Plot Accuracy","metadata":{}},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef plot_history(history):\n    # Plotting loss\n    plt.figure(figsize=(12, 8))\n\n    # Loss plots\n    plt.subplot(2, 2, 1)\n    plt.plot(history['train_loss'], label='Train Loss')\n    plt.plot(history['val_loss'], label='Validation Loss')\n    plt.title('Total Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.subplot(2, 2, 2)\n    plt.plot(history['train_classification_loss'], label='Train Classification Loss')\n    plt.plot(history['val_classification_loss'], label='Validation Classification Loss')\n    plt.title('Classification Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.subplot(2, 2, 3)\n    plt.plot(history['train_center_loss'], label='Train Center Loss')\n    plt.plot(history['val_center_loss'], label='Validation Center Loss')\n    plt.title('Center Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    # Accuracy plots\n    plt.subplot(2, 2, 4)\n    plt.plot(history['train_accuracy'], label='Train Accuracy')\n    plt.plot(history['val_accuracy'], label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.legend()\n\n    plt.tight_layout()\n    plt.show()\n\n# Call the plotting function\nplot_history(history)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:34:32.185377Z","iopub.execute_input":"2024-09-22T19:34:32.186239Z","iopub.status.idle":"2024-09-22T19:34:33.193594Z","shell.execute_reply.started":"2024-09-22T19:34:32.186202Z","shell.execute_reply":"2024-09-22T19:34:33.192657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Advanced center loss: From previous (Max: validation: 87%)","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha = 0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        # Gather the batch centers for the unique labels\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n\n        # Only update the centers for the unique labels present in the batch\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Model Building Function\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    base_model = tf.keras.applications.VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    embeddings = layers.Dense(embedding_dim, activation='swish', name='embeddings', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    \n    \n    logits = layers.Dense(num_classes, activation='softmax')(embeddings)\n    \n    inputs = base_model.input\n    labels = layers.Input(shape=(num_classes,))\n    \n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim, name='center_loss')\n    center_loss_output = center_loss_layer([embeddings, labels])\n    \n    model = models.Model(inputs=[inputs, labels], outputs=[logits, center_loss_output])\n    return model\n\n# Training and Evaluation Function\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n    \n    @tf.function\n    def train_step(images, labels):\n        with tf.GradientTape() as tape:\n            logits, center_loss = model([images, labels], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = classification_loss + center_loss_weight * center_loss\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n        \n        # Calculate accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(images, labels):\n        logits, center_loss = model([images, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        total_loss = classification_loss + center_loss_weight * center_loss\n        \n        # Calculate accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return total_loss, classification_loss, center_loss, accuracy\n\n    # History tracking\n    train_loss_history = []\n    val_loss_history = []\n    train_class_loss_history = []\n    val_class_loss_history = []\n    train_center_loss_history = []\n    val_center_loss_history = []\n    train_acc_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        # Initialize metrics for each epoch\n        epoch_total_loss = 0\n        epoch_class_loss = 0\n        epoch_center_loss = 0\n        epoch_acc = 0\n        val_total_loss = 0\n        val_class_loss = 0\n        val_center_loss = 0\n        val_acc = 0\n        \n        # Training loop\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            total_loss, class_loss, center_loss, acc = train_step(images_batch, labels_batch)\n            epoch_total_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n\n        # Validation loop\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            images_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            total_loss, class_loss, center_loss, acc = eval_step(images_batch, labels_batch)\n            val_total_loss += total_loss\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        # Average out the metrics for each epoch\n        epoch_total_loss /= (len(X_train) // batch_size)\n        epoch_class_loss /= (len(X_train) // batch_size)\n        epoch_center_loss /= (len(X_train) // batch_size)\n        epoch_acc /= (len(X_train) // batch_size)\n\n        val_total_loss /= (len(X_val) // batch_size)\n        val_class_loss /= (len(X_val) // batch_size)\n        val_center_loss /= (len(X_val) // batch_size)\n        val_acc /= (len(X_val) // batch_size)\n\n        # Save history\n        train_loss_history.append(epoch_total_loss.numpy())\n        train_class_loss_history.append(epoch_class_loss.numpy())\n        train_center_loss_history.append(epoch_center_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        \n        val_loss_history.append(val_total_loss.numpy())\n        val_class_loss_history.append(val_class_loss.numpy())\n        val_center_loss_history.append(val_center_loss.numpy())\n        val_acc_history.append(val_acc.numpy())\n\n        # Print out metrics for the current epoch\n        print(f\"Epoch {epoch + 1}/{epochs}\")\n        print(f\"Train - Total Loss: {epoch_total_loss.numpy():.4f}, Class Loss: {epoch_class_loss.numpy():.4f}, Center Loss: {epoch_center_loss.numpy():.4f}, Accuracy: {epoch_acc.numpy() * 100:.2f}%\")\n        print(f\"Val   - Total Loss: {val_total_loss.numpy():.4f}, Class Loss: {val_class_loss.numpy():.4f}, Center Loss: {val_center_loss.numpy():.4f}, Accuracy: {val_acc.numpy() * 100:.2f}%\")\n\n    # Plot loss and accuracy\n    plt.figure(figsize=(12, 5))\n    \n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Train Total Loss')\n    plt.plot(val_loss_history, label='Val Total Loss')\n    plt.plot(train_class_loss_history, label='Train Class Loss', linestyle='--')\n    plt.plot(val_class_loss_history, label='Val Class Loss', linestyle='--')\n    plt.plot(train_center_loss_history, label='Train Center Loss', linestyle='-.')\n    plt.plot(val_center_loss_history, label='Val Center Loss', linestyle='-.')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.plot([acc * 100 for acc in train_acc_history], label='Train Accuracy')\n    plt.plot([acc * 100 for acc in val_acc_history], label='Val Accuracy')\n    plt.ylim(0, 100)\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n\n    plt.show()\n\n\n# Parameters\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 768\ndropout_rate = 0.2\nweight_decay = 0.05 #1e-4\nbatch_size = 32\nepochs = 20\ncenter_loss_weight = 0.2\nlearning_rate = 1e-4\n\n# Build and Train the Model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T20:57:44.182859Z","iopub.execute_input":"2024-09-22T20:57:44.183252Z","iopub.status.idle":"2024-09-22T21:03:05.957940Z","shell.execute_reply.started":"2024-09-22T20:57:44.183217Z","shell.execute_reply":"2024-09-22T21:03:05.956606Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Fine tune 1 (Max validation: )","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=2.0, alpha = 0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        # Gather the batch centers for the unique labels\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n\n        # Only update the centers for the unique labels present in the batch\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Model Building Function\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    base_model = tf.keras.applications.VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    embeddings = layers.Dense(embedding_dim, activation='swish', name='embeddings')(x)\n    \n    \n    logits = layers.Dense(num_classes, activation='softmax')(embeddings)\n    \n    inputs = base_model.input\n    labels = layers.Input(shape=(num_classes,))\n    \n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim, name='center_loss')\n    center_loss_output = center_loss_layer([embeddings, labels])\n    \n    model = models.Model(inputs=[inputs, labels], outputs=[logits, center_loss_output])\n    return model\n\n# Training and Evaluation Function\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n    \n    @tf.function\n    def train_step(images, labels):\n        with tf.GradientTape() as tape:\n            logits, center_loss = model([images, labels], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = classification_loss + center_loss_weight * center_loss\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n        \n        # Calculate accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(images, labels):\n        logits, center_loss = model([images, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        total_loss = classification_loss + center_loss_weight * center_loss\n        \n        # Calculate accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return total_loss, classification_loss, center_loss, accuracy\n\n    # History tracking\n    train_loss_history = []\n    val_loss_history = []\n    train_class_loss_history = []\n    val_class_loss_history = []\n    train_center_loss_history = []\n    val_center_loss_history = []\n    train_acc_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        # Initialize metrics for each epoch\n        epoch_total_loss = 0\n        epoch_class_loss = 0\n        epoch_center_loss = 0\n        epoch_acc = 0\n        val_total_loss = 0\n        val_class_loss = 0\n        val_center_loss = 0\n        val_acc = 0\n        \n        # Training loop\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            total_loss, class_loss, center_loss, acc = train_step(images_batch, labels_batch)\n            epoch_total_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n\n        # Validation loop\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            images_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            total_loss, class_loss, center_loss, acc = eval_step(images_batch, labels_batch)\n            val_total_loss += total_loss\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        # Average out the metrics for each epoch\n        epoch_total_loss /= (len(X_train) // batch_size)\n        epoch_class_loss /= (len(X_train) // batch_size)\n        epoch_center_loss /= (len(X_train) // batch_size)\n        epoch_acc /= (len(X_train) // batch_size)\n\n        val_total_loss /= (len(X_val) // batch_size)\n        val_class_loss /= (len(X_val) // batch_size)\n        val_center_loss /= (len(X_val) // batch_size)\n        val_acc /= (len(X_val) // batch_size)\n\n        # Save history\n        train_loss_history.append(epoch_total_loss.numpy())\n        train_class_loss_history.append(epoch_class_loss.numpy())\n        train_center_loss_history.append(epoch_center_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        \n        val_loss_history.append(val_total_loss.numpy())\n        val_class_loss_history.append(val_class_loss.numpy())\n        val_center_loss_history.append(val_center_loss.numpy())\n        val_acc_history.append(val_acc.numpy())\n\n        # Print out metrics for the current epoch\n        print(f\"Epoch {epoch + 1}/{epochs}\")\n        print(f\"Train - Total Loss: {epoch_total_loss.numpy():.4f}, Class Loss: {epoch_class_loss.numpy():.4f}, Center Loss: {epoch_center_loss.numpy():.4f}, Accuracy: {epoch_acc.numpy() * 100:.2f}%\")\n        print(f\"Val   - Total Loss: {val_total_loss.numpy():.4f}, Class Loss: {val_class_loss.numpy():.4f}, Center Loss: {val_center_loss.numpy():.4f}, Accuracy: {val_acc.numpy() * 100:.2f}%\")\n\n    # Plot loss and accuracy\n    plt.figure(figsize=(12, 5))\n    \n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Train Total Loss')\n    plt.plot(val_loss_history, label='Val Total Loss')\n    plt.plot(train_class_loss_history, label='Train Class Loss', linestyle='--')\n    plt.plot(val_class_loss_history, label='Val Class Loss', linestyle='--')\n    plt.plot(train_center_loss_history, label='Train Center Loss', linestyle='-.')\n    plt.plot(val_center_loss_history, label='Val Center Loss', linestyle='-.')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.plot([acc * 100 for acc in train_acc_history], label='Train Accuracy')\n    plt.plot([acc * 100 for acc in val_acc_history], label='Val Accuracy')\n    plt.ylim(0, 100)\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n\n    plt.show()\n\n\n# Parameters\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 768\ndropout_rate = 0.4\nweight_decay = 0.1 #1e-4\nbatch_size = 32\nepochs = 40\ncenter_loss_weight = 0.05\nlearning_rate = 1e-4\n\n# Build and Train the Model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T21:54:27.622968Z","iopub.execute_input":"2024-09-22T21:54:27.623328Z","iopub.status.idle":"2024-09-22T22:05:07.179928Z","shell.execute_reply.started":"2024-09-22T21:54:27.623296Z","shell.execute_reply":"2024-09-22T22:05:07.178960Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"embedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\nembedding_model.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T22:05:52.988947Z","iopub.execute_input":"2024-09-22T22:05:52.989327Z","iopub.status.idle":"2024-09-22T22:05:53.041049Z","shell.execute_reply.started":"2024-09-22T22:05:52.989293Z","shell.execute_reply":"2024-09-22T22:05:53.040081Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\n# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T22:05:55.701148Z","iopub.execute_input":"2024-09-22T22:05:55.702126Z","iopub.status.idle":"2024-09-22T22:06:12.082176Z","shell.execute_reply.started":"2024-09-22T22:05:55.702083Z","shell.execute_reply":"2024-09-22T22:06:12.081112Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings (Color-coded)')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-22T22:06:13.735467Z","iopub.execute_input":"2024-09-22T22:06:13.736360Z","iopub.status.idle":"2024-09-22T22:06:24.670082Z","shell.execute_reply.started":"2024-09-22T22:06:13.736317Z","shell.execute_reply":"2024-09-22T22:06:24.669140Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Triplet model deleted Model(Max 88)","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            logits, center_loss = model([inputs, labels], training=True)\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            inputs_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            total_loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n\n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            inputs_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        # Average out the losses and accuracies\n        epoch_loss /= (len(X_train) // batch_size)\n        epoch_class_loss /= (len(X_train) // batch_size)\n        epoch_center_loss /= (len(X_train) // batch_size)\n        epoch_acc /= (len(X_train) // batch_size)\n\n        val_class_loss /= (len(X_val) // batch_size)\n        val_center_loss /= (len(X_val) // batch_size)\n        val_acc /= (len(X_val) // batch_size)\n\n        # Log losses and accuracies in the history\n        history[\"train_loss\"].append(epoch_loss.numpy())\n        history[\"train_class_loss\"].append(epoch_class_loss.numpy())\n        history[\"train_center_loss\"].append(epoch_center_loss.numpy())\n        history[\"train_acc\"].append(epoch_acc.numpy())\n        history[\"val_class_loss\"].append(val_class_loss.numpy())\n        history[\"val_center_loss\"].append(val_center_loss.numpy())\n        history[\"val_acc\"].append(val_acc.numpy())\n\n        # Print progress\n        print(f\"Train Loss: {epoch_loss:.4f}, Train class loss: {epoch_class_loss:.4f}, Train center loss: {epoch_center_loss:.4f}, Train Acc: {epoch_acc:.4f}\")\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n    \n    return history\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 1024              # Dimensionality of the embedding space\ndropout_rate = 0.25                # Dropout rate for regularization\nweight_decay = 0.01            # L2 regularization weight\ncenter_loss_weight = 0.001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 20                        # Number of epochs to train\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\nhistory = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T23:36:33.743312Z","iopub.execute_input":"2024-09-22T23:36:33.743781Z","iopub.status.idle":"2024-09-22T23:42:43.352374Z","shell.execute_reply.started":"2024-09-22T23:36:33.743740Z","shell.execute_reply":"2024-09-22T23:42:43.351322Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Plotting function for training history\ndef plot_history(history):\n    plt.figure(figsize=(12, 8))\n    \n    # Classification loss\n    plt.subplot(2, 2, 1)\n    plt.plot(history['train_class_loss'], label='Train Classification Loss')\n    plt.plot(history['val_class_loss'], label='Validation Classification Loss')\n    plt.title('Classification Loss')\n    plt.legend()\n\n    # Center loss\n    plt.subplot(2, 2, 2)\n    plt.plot(history['train_center_loss'], label='Train Center Loss')\n    plt.plot(history['val_center_loss'], label='Validation Center Loss')\n    plt.title('Center Loss')\n    plt.legend()\n\n    # Accuracy\n    plt.subplot(2, 2, 3)\n    plt.plot(history['train_acc'], label='Train Accuracy')\n    plt.plot(history['val_acc'], label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.legend()\n\n    plt.tight_layout()\n    plt.show()\nplot_history(history)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T23:44:39.505956Z","iopub.execute_input":"2024-09-22T23:44:39.506363Z","iopub.status.idle":"2024-09-22T23:44:40.400994Z","shell.execute_reply.started":"2024-09-22T23:44:39.506321Z","shell.execute_reply":"2024-09-22T23:44:40.399849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#embedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\n\n# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T23:44:44.989807Z","iopub.execute_input":"2024-09-22T23:44:44.990226Z","iopub.status.idle":"2024-09-22T23:45:04.309580Z","shell.execute_reply.started":"2024-09-22T23:44:44.990186Z","shell.execute_reply":"2024-09-22T23:45:04.308696Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings (Color-coded)')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-22T23:45:06.806420Z","iopub.execute_input":"2024-09-22T23:45:06.807689Z","iopub.status.idle":"2024-09-22T23:45:17.596120Z","shell.execute_reply.started":"2024-09-22T23:45:06.807597Z","shell.execute_reply":"2024-09-22T23:45:17.595165Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Polynomial curve","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = tf.cast(margin, tf.float32)  # Ensure margin is float32\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize two points for each class to define the line segment\n        self.centers_P1 = self.add_weight(name='centers_P1',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='zeros',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n        self.centers_P2 = self.add_weight(name='centers_P2',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='zeros',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers_P1 = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n        batch_centers_P2 = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers (P1 and P2) with EMA\n        batch_centers_P1_gathered = tf.gather(batch_centers_P1, unique_labels)\n        batch_centers_P2_gathered = tf.gather(batch_centers_P2, unique_labels)\n\n        center_updates_P1 = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                          batch_centers_P1_gathered,\n                                          shape=tf.shape(self.centers_P1))\n        center_updates_P2 = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                          batch_centers_P2_gathered,\n                                          shape=tf.shape(self.centers_P2))\n\n        new_centers_P1 = self.centers_P1 * (1 - self.alpha) + center_updates_P1 * self.alpha\n        new_centers_P2 = self.centers_P2 * (1 - self.alpha) + center_updates_P2 * self.alpha\n        self.centers_P1.assign(new_centers_P1)\n        self.centers_P2.assign(new_centers_P2)\n\n        # Compute distance to the nearest point on the line segment for each class\n        distances = self.compute_distance_to_segment(embeddings, labels)\n\n        # Get the correct distances by simply indexing with labels\n        correct_distances = tf.gather(distances, labels)\n\n        # Compute incorrect distances (distance to segments of incorrect classes)\n        incorrect_distances = tf.map_fn(lambda l: tf.boolean_mask(distances, tf.not_equal(tf.range(self.num_classes), l)),\n                                        labels)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Cast min_incorrect_distances to float32 to match self.margin's type\n        min_incorrect_distances = tf.cast(min_incorrect_distances, tf.float32)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(tf.cast(0.0, tf.float32), self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n    def compute_distance_to_segment(self, embeddings, labels):\n        \"\"\"\n        Compute the Euclidean distance from each embedding to the nearest point on the line segment\n        defined by P1 and P2 for each class.\n        \"\"\"\n        P1 = tf.gather(self.centers_P1, labels)\n        P2 = tf.gather(self.centers_P2, labels)\n\n        # Vector from P1 to P2\n        P1_P2 = P2 - P1\n        # Vector from P1 to the embedding\n        P1_emb = embeddings - P1\n\n        # Project embeddings onto the line segment\n        proj = tf.reduce_sum(P1_emb * P1_P2, axis=1, keepdims=True) / tf.reduce_sum(P1_P2 ** 2, axis=1, keepdims=True)\n\n        # Clamp projection to the range [0, 1] to restrict to the segment\n        proj_clamped = tf.clip_by_value(proj, 0.0, 1.0)\n\n        # Compute the nearest point on the line segment\n        nearest_point = P1 + proj_clamped * P1_P2\n\n        # Compute the Euclidean distance to the nearest point on the segment\n        distances = tf.norm(embeddings - nearest_point, axis=1)\n\n        return distances\n\n\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            logits, center_loss = model([inputs, labels], training=True)\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            inputs_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            total_loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n\n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            inputs_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        # Average out the losses and accuracies\n        epoch_loss /= (len(X_train) // batch_size)\n        epoch_class_loss /= (len(X_train) // batch_size)\n        epoch_center_loss /= (len(X_train) // batch_size)\n        epoch_acc /= (len(X_train) // batch_size)\n\n        val_class_loss /= (len(X_val) // batch_size)\n        val_center_loss /= (len(X_val) // batch_size)\n        val_acc /= (len(X_val) // batch_size)\n\n        # Log losses and accuracies in the history\n        history[\"train_loss\"].append(epoch_loss.numpy())\n        history[\"train_class_loss\"].append(epoch_class_loss.numpy())\n        history[\"train_center_loss\"].append(epoch_center_loss.numpy())\n        history[\"train_acc\"].append(epoch_acc.numpy())\n        history[\"val_class_loss\"].append(val_class_loss.numpy())\n        history[\"val_center_loss\"].append(val_center_loss.numpy())\n        history[\"val_acc\"].append(val_acc.numpy())\n\n        # Print progress\n        print(f\"Train Loss: {epoch_loss:.4f}, Train class loss: {epoch_class_loss:.4f}, Train center loss: {epoch_center_loss:.4f}, Train Acc: {epoch_acc:.4f}\")\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n    \n    return history\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 1024              # Dimensionality of the embedding space\ndropout_rate = 0.25                # Dropout rate for regularization\nweight_decay = 0.01            # L2 regularization weight\ncenter_loss_weight = 0.001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 20                        # Number of epochs to train\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\nhistory = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)","metadata":{"execution":{"iopub.status.busy":"2024-09-23T06:38:07.837102Z","iopub.execute_input":"2024-09-23T06:38:07.837521Z","iopub.status.idle":"2024-09-23T06:38:09.472275Z","shell.execute_reply.started":"2024-09-23T06:38:07.837485Z","shell.execute_reply":"2024-09-23T06:38:09.470404Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Epoch 1/20\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[18], line 262\u001b[0m\n\u001b[1;32m    260\u001b[0m \u001b[38;5;66;03m# Build the model using VGG19 and center loss\u001b[39;00m\n\u001b[1;32m    261\u001b[0m embedding_model, full_model \u001b[38;5;241m=\u001b[39m build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\u001b[0;32m--> 262\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_and_evaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfull_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcenter_loss_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlearning_rate\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[18], line 206\u001b[0m, in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\u001b[0m\n\u001b[1;32m    203\u001b[0m inputs_batch \u001b[38;5;241m=\u001b[39m X_train[batch_start:batch_end]\n\u001b[1;32m    204\u001b[0m labels_batch \u001b[38;5;241m=\u001b[39m y_train[batch_start:batch_end]\n\u001b[0;32m--> 206\u001b[0m total_loss, class_loss, center_loss, acc \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43minputs_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels_batch\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    207\u001b[0m epoch_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m total_loss\n\u001b[1;32m    208\u001b[0m epoch_class_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m class_loss\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:153\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[0;32m--> 153\u001b[0m   \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    154\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    155\u001b[0m   \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","File \u001b[0;32m/tmp/__autograph_generated_filee1r79fwq.py:14\u001b[0m, in \u001b[0;36mouter_factory.<locals>.inner_factory.<locals>.tf__train_step\u001b[0;34m(inputs, labels)\u001b[0m\n\u001b[1;32m     12\u001b[0m retval_ \u001b[38;5;241m=\u001b[39m ag__\u001b[38;5;241m.\u001b[39mUndefinedReturnValue()\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m ag__\u001b[38;5;241m.\u001b[39mld(tf)\u001b[38;5;241m.\u001b[39mGradientTape() \u001b[38;5;28;01mas\u001b[39;00m tape:\n\u001b[0;32m---> 14\u001b[0m     (logits, center_loss) \u001b[38;5;241m=\u001b[39m \u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mld\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmodel\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mld\u001b[49m\u001b[43m(\u001b[49m\u001b[43minputs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mld\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m)\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mdict\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mtraining\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mfscope\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     15\u001b[0m     classification_loss \u001b[38;5;241m=\u001b[39m ag__\u001b[38;5;241m.\u001b[39mconverted_call(ag__\u001b[38;5;241m.\u001b[39mconverted_call(ag__\u001b[38;5;241m.\u001b[39mld(tf)\u001b[38;5;241m.\u001b[39mkeras\u001b[38;5;241m.\u001b[39mlosses\u001b[38;5;241m.\u001b[39mCategoricalCrossentropy, (), \u001b[38;5;28;01mNone\u001b[39;00m, fscope), (ag__\u001b[38;5;241m.\u001b[39mld(labels), ag__\u001b[38;5;241m.\u001b[39mld(logits)), \u001b[38;5;28;01mNone\u001b[39;00m, fscope)\n\u001b[1;32m     16\u001b[0m     total_loss \u001b[38;5;241m=\u001b[39m ag__\u001b[38;5;241m.\u001b[39mld(classification_loss) \u001b[38;5;241m+\u001b[39m ag__\u001b[38;5;241m.\u001b[39mld(center_loss_weight) \u001b[38;5;241m*\u001b[39m ag__\u001b[38;5;241m.\u001b[39mld(center_loss)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","Cell \u001b[0;32mIn[18], line 61\u001b[0m, in \u001b[0;36mCenterLossLayer.call\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m     58\u001b[0m correct_distances \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mgather(distances, labels)\n\u001b[1;32m     60\u001b[0m \u001b[38;5;66;03m# Compute incorrect distances (distance to segments of incorrect classes)\u001b[39;00m\n\u001b[0;32m---> 61\u001b[0m incorrect_distances \u001b[38;5;241m=\u001b[39m \u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmap_fn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43ml\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mboolean_mask\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdistances\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnot_equal\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrange\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnum_classes\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ml\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     62\u001b[0m \u001b[43m                                \u001b[49m\u001b[43mlabels\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     63\u001b[0m min_incorrect_distances \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mreduce_min(incorrect_distances, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     65\u001b[0m \u001b[38;5;66;03m# Cast min_incorrect_distances to float32 to match self.margin's type\u001b[39;00m\n","File \u001b[0;32m/tmp/__autograph_generated_filevlbpv7mi.py:7\u001b[0m, in \u001b[0;36mouter_factory.<locals>.inner_factory.<locals>.<lambda>\u001b[0;34m(l)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner_factory\u001b[39m(ag__):\n\u001b[0;32m----> 7\u001b[0m     tf__lam \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mlambda\u001b[39;00m l: \u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mwith_function_scope\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43;01mlambda\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mboolean_mask\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mdistances\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnot_equal\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrange\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnum_classes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ml\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mlscope\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mSTD\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m tf__lam\n","File \u001b[0;32m/tmp/__autograph_generated_filevlbpv7mi.py:7\u001b[0m, in \u001b[0;36mouter_factory.<locals>.inner_factory.<locals>.<lambda>\u001b[0;34m(lscope)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21minner_factory\u001b[39m(ag__):\n\u001b[0;32m----> 7\u001b[0m     tf__lam \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mlambda\u001b[39;00m l: ag__\u001b[38;5;241m.\u001b[39mwith_function_scope(\u001b[38;5;28;01mlambda\u001b[39;00m lscope: \u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mboolean_mask\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mdistances\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnot_equal\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[43mag__\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconverted_call\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrange\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnum_classes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43ml\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlscope\u001b[49m\u001b[43m)\u001b[49m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlscope\u001b[39m\u001b[38;5;124m'\u001b[39m, ag__\u001b[38;5;241m.\u001b[39mSTD)\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m tf__lam\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/tmp/ipykernel_37/2433763768.py\", line 167, in train_step  *\n        logits, center_loss = model([inputs, labels], training=True)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler  **\n        raise e.with_traceback(filtered_tb) from None\n    File \"/tmp/ipykernel_37/2433763768.py\", line 61, in call\n        incorrect_distances = tf.map_fn(lambda l: tf.boolean_mask(distances, tf.not_equal(tf.range(self.num_classes), l)),\n    File \"/tmp/__autograph_generated_filevlbpv7mi.py\", line 7, in <lambda>\n        tf__lam = lambda l: ag__.with_function_scope(lambda lscope: ag__.converted_call(tf.boolean_mask, (distances, ag__.converted_call(tf.not_equal, (ag__.converted_call(tf.range, (self.num_classes,), None, lscope), l), None, lscope)), None, lscope), 'lscope', ag__.STD)\n    File \"/tmp/__autograph_generated_filevlbpv7mi.py\", line 7, in <lambda>\n        tf__lam = lambda l: ag__.with_function_scope(lambda lscope: ag__.converted_call(tf.boolean_mask, (distances, ag__.converted_call(tf.not_equal, (ag__.converted_call(tf.range, (self.num_classes,), None, lscope), l), None, lscope)), None, lscope), 'lscope', ag__.STD)\n\n    ValueError: Exception encountered when calling CenterLossLayer.call().\n    \n    \u001b[1min user code:\n    \n        File \"/tmp/ipykernel_37/2786399728.py\", line 61, in None  *\n            lambda l: tf.boolean_mask(distances, tf.not_equal(tf.range(self.num_classes), l))\n    \n        ValueError: Shapes (32,) and (31,) are incompatible\n    \u001b[0m\n    \n    Arguments received by CenterLossLayer.call():\n      • inputs=['tf.Tensor(shape=(32, 1024), dtype=float32)', 'tf.Tensor(shape=(32, 31), dtype=float32)']\n"],"ename":"ValueError","evalue":"in user code:\n\n    File \"/tmp/ipykernel_37/2433763768.py\", line 167, in train_step  *\n        logits, center_loss = model([inputs, labels], training=True)\n    File \"/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 122, in error_handler  **\n        raise e.with_traceback(filtered_tb) from None\n    File \"/tmp/ipykernel_37/2433763768.py\", line 61, in call\n        incorrect_distances = tf.map_fn(lambda l: tf.boolean_mask(distances, tf.not_equal(tf.range(self.num_classes), l)),\n    File \"/tmp/__autograph_generated_filevlbpv7mi.py\", line 7, in <lambda>\n        tf__lam = lambda l: ag__.with_function_scope(lambda lscope: ag__.converted_call(tf.boolean_mask, (distances, ag__.converted_call(tf.not_equal, (ag__.converted_call(tf.range, (self.num_classes,), None, lscope), l), None, lscope)), None, lscope), 'lscope', ag__.STD)\n    File \"/tmp/__autograph_generated_filevlbpv7mi.py\", line 7, in <lambda>\n        tf__lam = lambda l: ag__.with_function_scope(lambda lscope: ag__.converted_call(tf.boolean_mask, (distances, ag__.converted_call(tf.not_equal, (ag__.converted_call(tf.range, (self.num_classes,), None, lscope), l), None, lscope)), None, lscope), 'lscope', ag__.STD)\n\n    ValueError: Exception encountered when calling CenterLossLayer.call().\n    \n    \u001b[1min user code:\n    \n        File \"/tmp/ipykernel_37/2786399728.py\", line 61, in None  *\n            lambda l: tf.boolean_mask(distances, tf.not_equal(tf.range(self.num_classes), l))\n    \n        ValueError: Shapes (32,) and (31,) are incompatible\n    \u001b[0m\n    \n    Arguments received by CenterLossLayer.call():\n      • inputs=['tf.Tensor(shape=(32, 1024), dtype=float32)', 'tf.Tensor(shape=(32, 31), dtype=float32)']\n","output_type":"error"}]},{"cell_type":"markdown","source":"### Linear line center loss - v1 fixed p2","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n#         super(CenterLossLayer, self).__init__(**kwargs)\n#         self.num_classes = num_classes\n#         self.embedding_dim = embedding_dim\n#         self.margin = tf.cast(margin, tf.float32)  # Ensure margin is float32\n#         self.alpha = alpha  # EMA smoothing factor\n\n#         # Initialize two points for each class to define the line segment\n#         self.centers_P1 = self.add_weight(name='centers_P1',\n#                                           shape=(num_classes, embedding_dim),\n#                                           initializer=tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.01),\n#                                           trainable=False,\n#                                           dtype=tf.float32)\n\n#         self.centers_P2 = self.add_weight(name='centers_P2',\n#                                           shape=(num_classes, embedding_dim),\n#                                           initializer=tf.keras.initializers.RandomNormal(mean=0.0, stddev=0.01),\n#                                           trainable=False,\n#                                           dtype=tf.float32)\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = tf.cast(margin, tf.float32)\n        self.alpha = alpha  # EMA smoothing factor\n        self.distance = 0.3  # The length between P1 and P2\n\n        # Initialize center_p1 randomly using a normal distribution\n        self.centers_P1 = self.add_weight(name='centers_P1',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='random_normal',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n        # Create center_p2 without initialization\n        self.centers_P2 = self.add_weight(name='centers_P2',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='zeros',\n                                          trainable=False,\n                                          dtype=tf.float32)\n    def build(self, input_shape):\n        # Generate a random unit vector direction for center_p2\n        random_direction = tf.random.normal((self.num_classes, self.embedding_dim))\n        unit_vector = random_direction / tf.norm(random_direction, axis=1, keepdims=True)  # Normalize\n\n        # Assign center_p2 to be 'distance' units away from center_p1\n        center_p2_value = self.distance * unit_vector\n        self.centers_P2.assign(center_p2_value)\n\n        super(CenterLossLayer, self).build(input_shape)\n        \n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Number of samples in the batch\n        num_samples = tf.shape(embeddings)[0]\n\n        # Compute batch means for each class using unsorted_segment_mean\n        batch_centers_P1 = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n        batch_centers_P2 = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers (P1 and P2) with EMA\n        batch_centers_P1_gathered = tf.gather(batch_centers_P1, labels)\n        batch_centers_P2_gathered = tf.gather(batch_centers_P2, labels)\n\n        center_updates_P1 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P1_gathered,\n                                          shape=tf.shape(self.centers_P1))\n        center_updates_P2 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P2_gathered,\n                                          shape=tf.shape(self.centers_P2))\n\n        new_centers_P1 = self.centers_P1 * (1 - self.alpha) + center_updates_P1 * self.alpha\n        new_centers_P2 = self.centers_P2 * (1 - self.alpha) + center_updates_P2 * self.alpha\n        self.centers_P1.assign(new_centers_P1)\n        self.centers_P2.assign(new_centers_P2)\n\n        # Compute distances to all class segments for each embedding\n        distances = self.compute_distance_to_segment_all_classes(embeddings)\n\n        # Get the correct distances by indexing with labels\n        correct_distances = tf.gather_nd(distances, tf.expand_dims(labels, axis=-1), batch_dims=1)\n\n        # Mask out correct class distances and find the minimum incorrect distance\n        mask = tf.one_hot(labels, depth=self.num_classes, on_value=False, off_value=True)\n        masked_distances = tf.where(mask, distances, tf.fill(tf.shape(distances), float('inf')))\n        min_incorrect_distances = tf.reduce_min(masked_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n    def compute_distance_to_segment_all_classes(self, embeddings):\n        \"\"\"\n        Compute the Euclidean distance from each embedding to the nearest point on the line segment\n        defined by P1 and P2 for each class.\n        \"\"\"\n        # Get P1 and P2 for all classes\n        P1 = self.centers_P1\n        P2 = self.centers_P2\n\n        # Vector from P1 to P2 for all classes\n        P1_P2 = P2 - P1\n\n        # Expand dims for broadcasting\n        P1 = tf.expand_dims(P1, axis=0)\n        P2 = tf.expand_dims(P2, axis=0)\n        P1_P2 = tf.expand_dims(P1_P2, axis=0)\n        embeddings = tf.expand_dims(embeddings, axis=1)\n\n        # Vector from P1 to the embeddings\n        P1_emb = embeddings - P1\n\n        # Project embeddings onto the line segment\n        #proj = tf.reduce_sum(P1_emb * P1_P2, axis=2, keepdims=True) / tf.reduce_sum(P1_P2 ** 2, axis=2, keepdims=True)\n        proj = tf.reduce_sum(P1_emb * P1_P2, axis=2, keepdims=True) / tf.maximum(tf.reduce_sum(P1_P2 ** 2, axis=2, keepdims=True), 1e-8)\n\n        # Clamp projection to the range [0, 1] to restrict to the segment\n        proj_clamped = tf.clip_by_value(proj, 0.0, 1.0)\n\n        # Compute the nearest point on the line segment\n        nearest_point = P1 + proj_clamped * P1_P2\n\n        # Compute the Euclidean distance to the nearest point on the segment\n        distances = tf.norm(embeddings - nearest_point, axis=2)\n\n        return distances\n\n\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n    # logits = tf.keras.layers.Lambda(lambda x: x / 10)(logits)  # Example scaling\n    # logits = tf.keras.layers.Activation('softmax')(logits)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            logits, center_loss = model([inputs, labels], training=True)\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            inputs_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n        \n        epoch_loss /= len(X_train) // batch_size\n        epoch_class_loss /= len(X_train) // batch_size\n        epoch_center_loss /= len(X_train) // batch_size\n        epoch_acc /= len(X_train) // batch_size\n        \n        print(f\"Train Loss: {epoch_loss:.4f}, Class Loss: {epoch_class_loss:.4f}, Center Loss: {epoch_center_loss:.4f}, Acc: {epoch_acc:.4f}\")\n        \n        # Save training metrics\n        history[\"train_loss\"].append(epoch_loss)\n        history[\"train_class_loss\"].append(epoch_class_loss)\n        history[\"train_center_loss\"].append(epoch_center_loss)\n        history[\"train_acc\"].append(epoch_acc)\n        \n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            inputs_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            \n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        val_class_loss /= len(X_val) // batch_size\n        val_center_loss /= len(X_val) // batch_size\n        val_acc /= len(X_val) // batch_size\n\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n        \n        # Save validation metrics\n        history[\"val_class_loss\"].append(val_class_loss)\n        history[\"val_center_loss\"].append(val_center_loss)\n        history[\"val_acc\"].append(val_acc)\n\n    return history\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 1024              # Dimensionality of the embedding space\ndropout_rate = 0.25                # Dropout rate for regularization\nweight_decay = 0.01            # L2 regularization weight\ncenter_loss_weight = 0.0001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 10                      # Number of epochs to train\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\nhistory = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T16:32:45.611924Z","iopub.execute_input":"2024-09-23T16:32:45.612342Z","iopub.status.idle":"2024-09-23T16:35:51.494003Z","shell.execute_reply.started":"2024-09-23T16:32:45.612297Z","shell.execute_reply":"2024-09-23T16:35:51.493021Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Epoch 1/10\nTrain Loss: 3.3679, Class Loss: 3.3593, Center Loss: 85.9411, Acc: 0.0837\nVal Class Loss: 2.6900, Val Center Loss: 127.7464, Val Acc: 0.2656\nEpoch 2/10\nTrain Loss: 2.5598, Class Loss: 2.5092, Center Loss: 505.6444, Acc: 0.2667\nVal Class Loss: 2.0383, Val Center Loss: 235.8886, Val Acc: 0.4089\nEpoch 3/10\nTrain Loss: 2.0763, Class Loss: 2.0234, Center Loss: 528.1735, Acc: 0.3895\nVal Class Loss: 1.9041, Val Center Loss: 291.7439, Val Acc: 0.4505\nEpoch 4/10\nTrain Loss: 1.6629, Class Loss: 1.5968, Center Loss: 660.7403, Acc: 0.5095\nVal Class Loss: 1.3463, Val Center Loss: 307.3923, Val Acc: 0.5677\nEpoch 5/10\nTrain Loss: 1.3536, Class Loss: 1.2929, Center Loss: 607.0913, Acc: 0.6004\nVal Class Loss: 1.1431, Val Center Loss: 336.3405, Val Acc: 0.6406\nEpoch 6/10\nTrain Loss: 0.9558, Class Loss: 0.8810, Center Loss: 747.8536, Acc: 0.7472\nVal Class Loss: 1.0225, Val Center Loss: 339.3381, Val Acc: 0.6589\nEpoch 7/10\nTrain Loss: 0.7065, Class Loss: 0.6382, Center Loss: 683.6728, Acc: 0.8209\nVal Class Loss: 0.6673, Val Center Loss: 312.9698, Val Acc: 0.7839\nEpoch 8/10\nTrain Loss: 0.5102, Class Loss: 0.4241, Center Loss: 860.7779, Acc: 0.8979\nVal Class Loss: 0.7952, Val Center Loss: 291.0767, Val Acc: 0.7188\nEpoch 9/10\nTrain Loss: 0.4472, Class Loss: 0.3826, Center Loss: 645.6232, Acc: 0.9007\nVal Class Loss: 0.6116, Val Center Loss: 212.0484, Val Acc: 0.8047\nEpoch 10/10\nTrain Loss: 0.3011, Class Loss: 0.2397, Center Loss: 614.3320, Acc: 0.9481\nVal Class Loss: 0.5690, Val Center Loss: 236.0191, Val Acc: 0.8516\n","output_type":"stream"}]},{"cell_type":"code","source":"history = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)","metadata":{"execution":{"iopub.status.busy":"2024-09-23T16:36:01.535406Z","iopub.execute_input":"2024-09-23T16:36:01.535795Z","iopub.status.idle":"2024-09-23T16:39:06.757918Z","shell.execute_reply.started":"2024-09-23T16:36:01.535758Z","shell.execute_reply":"2024-09-23T16:39:06.756847Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Epoch 1/10\nTrain Loss: 0.2889, Class Loss: 0.2302, Center Loss: 586.9064, Acc: 0.9554\nVal Class Loss: 0.7311, Val Center Loss: 262.1611, Val Acc: 0.7995\nEpoch 2/10\nTrain Loss: 0.2126, Class Loss: 0.1589, Center Loss: 537.1808, Acc: 0.9721\nVal Class Loss: 0.7188, Val Center Loss: 164.4527, Val Acc: 0.8021\nEpoch 3/10\nTrain Loss: 0.1863, Class Loss: 0.1341, Center Loss: 522.5800, Acc: 0.9816\nVal Class Loss: 0.6598, Val Center Loss: 187.6085, Val Acc: 0.8229\nEpoch 4/10\nTrain Loss: 0.1778, Class Loss: 0.1345, Center Loss: 432.4107, Acc: 0.9816\nVal Class Loss: 0.5730, Val Center Loss: 143.8346, Val Acc: 0.8385\nEpoch 5/10\nTrain Loss: 0.1169, Class Loss: 0.0794, Center Loss: 375.0311, Acc: 1.0056\nVal Class Loss: 0.5257, Val Center Loss: 133.4320, Val Acc: 0.8359\nEpoch 6/10\nTrain Loss: 0.1626, Class Loss: 0.1133, Center Loss: 493.1973, Acc: 0.9927\nVal Class Loss: 0.5721, Val Center Loss: 107.8678, Val Acc: 0.8333\nEpoch 7/10\nTrain Loss: 0.1553, Class Loss: 0.1211, Center Loss: 342.0127, Acc: 0.9766\nVal Class Loss: 0.7167, Val Center Loss: 128.1986, Val Acc: 0.8255\nEpoch 8/10\nTrain Loss: 0.1543, Class Loss: 0.1156, Center Loss: 386.9049, Acc: 0.9888\nVal Class Loss: 0.5542, Val Center Loss: 149.5736, Val Acc: 0.8333\nEpoch 9/10\nTrain Loss: 0.0841, Class Loss: 0.0524, Center Loss: 317.7236, Acc: 1.0112\nVal Class Loss: 0.4673, Val Center Loss: 131.1492, Val Acc: 0.8672\nEpoch 10/10\nTrain Loss: 0.0860, Class Loss: 0.0461, Center Loss: 399.3081, Acc: 1.0089\nVal Class Loss: 0.5208, Val Center Loss: 135.8240, Val Acc: 0.8568\n","output_type":"stream"}]},{"cell_type":"code","source":"# Plotting function for training history\ndef plot_history(history):\n    plt.figure(figsize=(12, 8))\n    \n    # Classification loss\n    plt.subplot(2, 2, 1)\n    plt.plot(history['train_class_loss'], label='Train Classification Loss')\n    plt.plot(history['val_class_loss'], label='Validation Classification Loss')\n    plt.title('Classification Loss')\n    plt.legend()\n\n    # Center loss\n    plt.subplot(2, 2, 2)\n    plt.plot(history['train_center_loss'], label='Train Center Loss')\n    plt.plot(history['val_center_loss'], label='Validation Center Loss')\n    plt.title('Center Loss')\n    plt.legend()\n\n    # Accuracy\n    plt.subplot(2, 2, 3)\n    plt.plot(history['train_acc'], label='Train Accuracy')\n    plt.plot(history['val_acc'], label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.legend()\n\n    plt.tight_layout()\n    plt.show()\nplot_history(history)","metadata":{"execution":{"iopub.status.busy":"2024-09-23T15:55:03.998672Z","iopub.execute_input":"2024-09-23T15:55:03.999131Z","iopub.status.idle":"2024-09-23T15:55:04.945521Z","shell.execute_reply.started":"2024-09-23T15:55:03.999090Z","shell.execute_reply":"2024-09-23T15:55:04.944410Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x800 with 3 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Get centers","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\ndef get_cluster_line_points(full_model):\n    # Get the CenterLossLayer from the full model\n    center_loss_layer = full_model.get_layer('center_loss_layer_5')\n\n    # Extract the start and end points of each class cluster line\n    centers_P1 = center_loss_layer.centers_P1.numpy()  # Starting points of the line segments\n    centers_P2 = center_loss_layer.centers_P2.numpy()  # End points of the line segments\n\n    return centers_P1, centers_P2\n\n# Call this function after training to get P1 and P2 points\nP1, P2 = get_cluster_line_points(full_model)\n\n# Create a numpy array to store all the points\n# Shape will be (num_classes, 2, embedding_dim), where 2 represents P1 and P2\nall_points = np.stack([P1, P2], axis=1)  # Shape: (num_classes, 2, embedding_dim)\n\n# Print or further process the array\nprint(f\"Shape of all_points array: {all_points.shape}\")\nprint(all_points)\n\n# Example: Access points for a specific class (e.g., class 0)\nclass_index = 0\nprint(f\"Class {class_index}: Start Point (P1) = {all_points[class_index, 0]}\")\nprint(f\"Class {class_index}: End Point (P2) = {all_points[class_index, 1]}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T17:30:30.871748Z","iopub.execute_input":"2024-09-23T17:30:30.872161Z","iopub.status.idle":"2024-09-23T17:30:30.885428Z","shell.execute_reply.started":"2024-09-23T17:30:30.872121Z","shell.execute_reply":"2024-09-23T17:30:30.884319Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"Shape of all_points array: (31, 2, 1024)\n[[[-9.31018516e-02  7.14047790e-01  3.99069011e-01 ... -1.02291673e-01\n   -9.95449573e-02 -1.04562163e-01]\n  [-7.88485333e-02  8.15266073e-01  4.83976364e-01 ... -8.97725970e-02\n   -8.16175938e-02 -9.27238092e-02]]\n\n [[ 3.44896674e-01  3.17953140e-01 -1.06412724e-01 ...  3.53482157e-01\n   -2.21758470e-01 -1.88393801e-01]\n  [ 5.34626842e-01  5.22873700e-01 -3.88040841e-02 ...  5.09272635e-01\n   -1.81679726e-01 -1.65991113e-01]]\n\n [[ 3.12786847e-01 -9.10428539e-02  1.33631900e-01 ...  2.74710776e-03\n   -2.61872541e-02  8.30536336e-03]\n  [ 4.59754229e-01 -4.63031977e-02  2.36252755e-01 ...  8.37625265e-02\n    5.32496423e-02  8.14316198e-02]]\n\n ...\n\n [[-2.69297183e-01  2.11397648e+00  6.02310061e-01 ... -2.30699971e-01\n    1.89780042e-01 -2.63671726e-01]\n  [-2.26892620e-01  2.78797412e+00  9.90003169e-01 ... -1.18000053e-01\n    5.11439979e-01 -2.13040501e-01]]\n\n [[-1.06223024e-01  3.73824984e-01  6.88966438e-02 ... -8.77097473e-02\n   -1.81133661e-03 -8.72010812e-02]\n  [-8.30944479e-02  5.31750500e-01  1.35426491e-01 ... -8.21924284e-02\n    5.17813675e-02 -8.22304264e-02]]\n\n [[-1.54993936e-01  6.50450811e-02 -1.33711621e-01 ... -2.02038392e-01\n   -1.21432848e-01 -1.99965909e-01]\n  [-1.25981301e-01  1.42884716e-01 -6.14958815e-02 ... -1.99289396e-01\n   -6.41256347e-02 -1.79671481e-01]]]\nClass 0: Start Point (P1) = [-0.09310185  0.7140478   0.399069   ... -0.10229167 -0.09954496\n -0.10456216]\nClass 0: End Point (P2) = [-0.07884853  0.8152661   0.48397636 ... -0.0897726  -0.08161759\n -0.09272381]\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#embedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\n\n# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed)","metadata":{"execution":{"iopub.status.busy":"2024-09-23T19:36:54.396767Z","iopub.execute_input":"2024-09-23T19:36:54.397144Z","iopub.status.idle":"2024-09-23T19:37:29.106055Z","shell.execute_reply.started":"2024-09-23T19:36:54.397107Z","shell.execute_reply":"2024-09-23T19:37:29.105027Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1727120219.025941     104 service.cc:145] XLA service 0x59cfcee33f70 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1727120219.026012     104 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1727120219.026019     104 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m 2/81\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m11s\u001b[0m 145ms/step","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1727120233.117097     104 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m81/81\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 198ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap\n\n\n#embedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\n\n# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed)\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings (Color-coded)')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-23T19:37:31.644937Z","iopub.execute_input":"2024-09-23T19:37:31.645345Z","iopub.status.idle":"2024-09-23T19:37:42.098218Z","shell.execute_reply.started":"2024-09-23T19:37:31.645304Z","shell.execute_reply":"2024-09-23T19:37:42.097331Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3846068029.py:21: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom collections import defaultdict\n\n# Sample image embeddings and labels\n# embeddings = ... (your embeddings, e.g., a NumPy array of shape [n_samples, embedding_dim])\n# labels_np = ... (your string labels, e.g., a list or array of labels corresponding to the embeddings)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(12, 12))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=50)  # Adjust marker size (s=50)\n\n# To store average position of each cluster\ncluster_centers = defaultdict(list)\n\n# Gather all points belonging to the same class\nfor i, label in enumerate(numeric_labels):\n    cluster_centers[label].append(embeddings_2d[i])\n\n# Annotate each cluster with one label\nfor label, points in cluster_centers.items():\n    cluster_points = np.array(points)\n    # Find the centroid of the cluster\n    centroid = np.mean(cluster_points, axis=0)\n    # Get the original string label for the cluster\n    label_name = label_encoder.inverse_transform([label])[0]\n    # Annotate at the centroid\n    plt.text(centroid[0], centroid[1], label_name, fontsize=12, ha='center', va='center', \n             bbox=dict(facecolor='white', alpha=0.6, edgecolor='none'))\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with One Label per Cluster')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T18:02:15.484256Z","iopub.execute_input":"2024-09-23T18:02:15.485044Z","iopub.status.idle":"2024-09-23T18:02:25.694997Z","shell.execute_reply.started":"2024-09-23T18:02:15.485000Z","shell.execute_reply":"2024-09-23T18:02:25.694007Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/554618506.py:21: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\n\n# Assuming P1 and P2 are already computed using the method from the previous step\n# P1: start points of the cluster line (num_classes, embedding_dim)\n# P2: end points of the cluster line (num_classes, embedding_dim)\n\n# Apply t-SNE on P1 and P2 (reduce the dimension to 2D)\ntsne = TSNE(n_components=2, random_state=42)\nP1_2d = tsne.fit_transform(P1)  # Apply t-SNE on P1\nP2_2d = tsne.fit_transform(P2)  # Apply t-SNE on P2\n\n# Use t-SNE to reduce the embeddings space to 2D for visualization\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Plot the P1 and P2 points and the connecting lines\nfor i in range(len(P1_2d)):\n    # Plot the line connecting P1 and P2 for each class\n    plt.plot([P1_2d[i, 0], P2_2d[i, 0]], [P1_2d[i, 1], P2_2d[i, 1]], 'k-', label=f'Class {i} line' if i == 0 else \"\")\n    \n    # Plot the P1 and P2 points for each class\n    plt.scatter(P1_2d[i, 0], P1_2d[i, 1], color='red', marker='o', label=f'Class {i} P1' if i == 0 else \"\")\n    plt.scatter(P2_2d[i, 0], P2_2d[i, 1], color='blue', marker='x', label=f'Class {i} P2' if i == 0 else \"\")\n\n# Add a color legend for embeddings\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Add a custom legend for the P1/P2 points and the connecting lines\nplt.scatter([], [], color='red', marker='o', label='P1 (Start Point)')\nplt.scatter([], [], color='blue', marker='x', label='P2 (End Point)')\nplt.plot([], [], 'k-', label='Cluster Line')\nplt.legend(loc='upper right')\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with Cluster Lines')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T17:09:44.982015Z","iopub.execute_input":"2024-09-23T17:09:44.982730Z","iopub.status.idle":"2024-09-23T17:09:57.391823Z","shell.execute_reply.started":"2024-09-23T17:09:44.982689Z","shell.execute_reply":"2024-09-23T17:09:57.390843Z"},"trusted":true},"execution_count":39,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/709444405.py:24: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\n\n# Assuming P1 and P2 are already computed using the method from the previous step\n# P1: start points of the cluster line (num_classes, embedding_dim)\n# P2: end points of the cluster line (num_classes, embedding_dim)\n\n# Apply t-SNE on P1 and P2 (reduce the dimension to 2D)\ntsne = TSNE(n_components=2, random_state=42)\nP1_2d = tsne.fit_transform(P1)  # Apply t-SNE on P1\nP2_2d = tsne.fit_transform(P2)  # Apply t-SNE on P2\n\n# Use t-SNE to reduce the embeddings space to 2D for visualization\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Plot the P1 (cross) and P2 (star) points for each class\nfor i in range(len(P1_2d)):\n    # Plot the P1 (cross) for each class\n    plt.scatter(P1_2d[i, 0], P1_2d[i, 1], color='red', marker='x', s=100, label=f'Class {i} P1' if i == 0 else \"\")\n    \n    # Plot the P2 (star) for each class\n    plt.scatter(P2_2d[i, 0], P2_2d[i, 1], color='blue', marker='*', s=100, label=f'Class {i} P2' if i == 0 else \"\")\n\n# Add a color legend for embeddings\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Add a custom legend for the P1 (cross) and P2 (star) points\nplt.scatter([], [], color='red', marker='x', s=100, label='P1 (Start Point)')\nplt.scatter([], [], color='blue', marker='*', s=100, label='P2 (End Point)')\nplt.legend(loc='upper right')\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with Start and End Points')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T17:10:40.700840Z","iopub.execute_input":"2024-09-23T17:10:40.701512Z","iopub.status.idle":"2024-09-23T17:10:51.403826Z","shell.execute_reply.started":"2024-09-23T17:10:40.701472Z","shell.execute_reply":"2024-09-23T17:10:51.402788Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3906487996.py:24: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom collections import defaultdict\n\n# Sample image embeddings and labels\n# embeddings = ... (your embeddings, e.g., a NumPy array of shape [n_samples, embedding_dim])\n# labels_np = ... (your string labels, e.g., a list or array of labels corresponding to the embeddings)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Assume P1 and P2 are already computed from your CenterLossLayer\n# P1 and P2 should be arrays of shape (num_classes, embedding_dim), just like your embeddings\n# P1 = np.array(...)  # Start points for each class\n# P2 = np.array(...)  # End points for each class\n\n# Use t-SNE to project P1 and P2 onto 2D space\nP1_2d = tsne.fit_transform(P1)\nP2_2d = tsne.fit_transform(P2)\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(12, 12))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=50)  # Adjust marker size (s=50)\n\n# To store average position of each cluster\ncluster_centers = defaultdict(list)\n\n# Gather all points belonging to the same class\nfor i, label in enumerate(numeric_labels):\n    cluster_centers[label].append(embeddings_2d[i])\n\n# Plot and annotate start points (P1) and end points (P2)\nfor class_idx in range(len(P1_2d)):\n    # Get start and end points in 2D\n    start_point = P1_2d[class_idx]\n    end_point = P2_2d[class_idx]\n    \n    # Get the original string label for the class\n    label_name = label_encoder.inverse_transform([class_idx])[0]\n    \n    # Plot start point as a cross ('x') and end point as a star ('*')\n    plt.scatter(start_point[0], start_point[1], color='black', marker='x', s=100, label=f'Start: {label_name}')\n    plt.scatter(end_point[0], end_point[1], color='black', marker='*', s=100, label=f'End: {label_name}')\n    \n    # Annotate the start point with the label name\n    plt.text(start_point[0], start_point[1], label_name, fontsize=12, ha='center', va='center', \n             bbox=dict(facecolor='white', alpha=0.6, edgecolor='none'))\n\n# Annotate each cluster with one label at its centroid\nfor label, points in cluster_centers.items():\n    cluster_points = np.array(points)\n    # Find the centroid of the cluster\n    centroid = np.mean(cluster_points, axis=0)\n    # Get the original string label for the cluster\n    label_name = label_encoder.inverse_transform([label])[0]\n    # Annotate at the centroid\n    plt.text(centroid[0], centroid[1], label_name, fontsize=12, ha='center', va='center', \n             bbox=dict(facecolor='white', alpha=0.6, edgecolor='none'))\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with Start and End Points')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T17:10:58.744556Z","iopub.execute_input":"2024-09-23T17:10:58.744930Z","iopub.status.idle":"2024-09-23T17:11:09.702332Z","shell.execute_reply.started":"2024-09-23T17:10:58.744896Z","shell.execute_reply":"2024-09-23T17:11:09.701343Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/4185922792.py:30: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### linear center loss: p2 from the mean and std of the sample","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = tf.cast(margin, tf.float32)\n        self.alpha = alpha  # EMA smoothing factor\n        self.distance = 0.1  # The length between P1 and P2\n\n        # Initialize center_p1 randomly using a normal distribution\n        self.centers_P1 = self.add_weight(name='centers_P1',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='random_normal',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n        # Create center_p2 without initialization\n        self.centers_P2 = self.add_weight(name='centers_P2',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='zeros',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n    def build(self, input_shape):\n        # Generate a random unit vector direction for center_p2\n        random_direction = tf.random.normal((self.num_classes, self.embedding_dim))\n        unit_vector = random_direction / tf.norm(random_direction, axis=1, keepdims=True)  # Normalize\n\n        # Assign center_p2 to be 'distance' units away from center_p1\n        center_p2_value = self.distance * unit_vector\n        self.centers_P2.assign(center_p2_value)\n\n        super(CenterLossLayer, self).build(input_shape)\n    \n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Step 1: Compute the midpoint for each class (mean of embeddings for each class)\n        batch_midpoint = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Step 2: Calculate the variance for each class\n        squared_diff = tf.square(embeddings - tf.gather(batch_midpoint, labels))\n        batch_variance = tf.math.unsorted_segment_mean(squared_diff, labels, num_segments=self.num_classes)\n\n        # Step 3: Compute the standard deviation (sqrt of variance)\n        batch_stddev = tf.sqrt(batch_variance)\n\n        # Step 4: Position centers_P1 and centers_P2 around the midpoint\n        # Center_P1 closer to the midpoint, Center_P2 further from the midpoint\n        batch_centers_P1 = batch_midpoint - 0.5 * batch_stddev  # Center_P1 inside dense region\n        batch_centers_P2 = batch_midpoint + 0.5 * batch_stddev  # Center_P2 outside dense region\n\n        # Gather the centers corresponding to the labels\n        batch_centers_P1_gathered = tf.gather(batch_centers_P1, labels)\n        batch_centers_P2_gathered = tf.gather(batch_centers_P2, labels)\n\n        # Step 5: Update centers using EMA (Exponential Moving Average)\n        center_updates_P1 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P1_gathered,\n                                          shape=tf.shape(self.centers_P1))\n        center_updates_P2 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P2_gathered,\n                                          shape=tf.shape(self.centers_P2))\n\n        # EMA update for centers_P1 and centers_P2\n        new_centers_P1 = self.centers_P1 * (1 - self.alpha) + center_updates_P1 * self.alpha\n        new_centers_P2 = self.centers_P2 * (1 - self.alpha) + center_updates_P2 * self.alpha\n\n        # Assign updated centers\n        self.centers_P1.assign(new_centers_P1)\n        self.centers_P2.assign(new_centers_P2)\n\n        # Step 6: Compute distances to all class segments for each embedding\n        distances = self.compute_distance_to_segment_all_classes(embeddings)\n\n        # Step 7: Get the correct distances by indexing with labels\n        correct_distances = tf.gather_nd(distances, tf.expand_dims(labels, axis=-1), batch_dims=1)\n\n        # Step 8: Mask out correct class distances and find the minimum incorrect distance\n        mask = tf.one_hot(labels, depth=self.num_classes, on_value=False, off_value=True)\n        masked_distances = tf.where(mask, distances, tf.fill(tf.shape(distances), float('inf')))\n        min_incorrect_distances = tf.reduce_min(masked_distances, axis=1)\n\n        # Step 9: Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n\n    def compute_distance_to_segment_all_classes(self, embeddings):\n        \"\"\"\n        Compute the Euclidean distance from each embedding to the nearest point on the line segment\n        defined by P1 and P2 for each class.\n        \"\"\"\n        # Get P1 and P2 for all classes\n        P1 = self.centers_P1\n        P2 = self.centers_P2\n\n        # Vector from P1 to P2 for all classes\n        P1_P2 = P2 - P1\n\n        # Expand dims for broadcasting\n        P1 = tf.expand_dims(P1, axis=0)\n        P2 = tf.expand_dims(P2, axis=0)\n        P1_P2 = tf.expand_dims(P1_P2, axis=0)\n        embeddings = tf.expand_dims(embeddings, axis=1)\n\n        # Vector from P1 to the embeddings\n        P1_emb = embeddings - P1\n\n        # Project embeddings onto the line segment\n        proj = tf.reduce_sum(P1_emb * P1_P2, axis=2, keepdims=True) / tf.maximum(tf.reduce_sum(P1_P2 ** 2, axis=2, keepdims=True), 1e-8)\n\n        # Clamp projection to the range [0, 1] to restrict to the segment\n        proj_clamped = tf.clip_by_value(proj, 0.0, 1.0)\n\n        # Compute the nearest point on the line segment\n        nearest_point = P1 + proj_clamped * P1_P2\n\n        # Compute the Euclidean distance to the nearest point on the segment\n        distances = tf.norm(embeddings - nearest_point, axis=2)\n\n        return distances\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n    # logits = tf.keras.layers.Lambda(lambda x: x / 10)(logits)  # Example scaling\n    # logits = tf.keras.layers.Activation('softmax')(logits)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.RMSprop(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            logits, center_loss = model([inputs, labels], training=True)\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            inputs_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n        \n        epoch_loss /= len(X_train) // batch_size\n        epoch_class_loss /= len(X_train) // batch_size\n        epoch_center_loss /= len(X_train) // batch_size\n        epoch_acc /= len(X_train) // batch_size\n        \n        print(f\"Train Loss: {epoch_loss:.4f}, Class Loss: {epoch_class_loss:.4f}, Center Loss: {epoch_center_loss:.4f}, Acc: {epoch_acc:.4f}\")\n        \n        # Save training metrics\n        history[\"train_loss\"].append(epoch_loss)\n        history[\"train_class_loss\"].append(epoch_class_loss)\n        history[\"train_center_loss\"].append(epoch_center_loss)\n        history[\"train_acc\"].append(epoch_acc)\n        \n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            inputs_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            \n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        val_class_loss /= len(X_val) // batch_size\n        val_center_loss /= len(X_val) // batch_size\n        val_acc /= len(X_val) // batch_size\n\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n        \n        # Save validation metrics\n        history[\"val_class_loss\"].append(val_class_loss)\n        history[\"val_center_loss\"].append(val_center_loss)\n        history[\"val_acc\"].append(val_acc)\n\n    return history\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 768              # Dimensionality of the embedding space\ndropout_rate = 0.25                # Dropout rate for regularization\nweight_decay = 0.05            # L2 regularization weight\ncenter_loss_weight = 0.0 #0.0001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 25                      # Number of epochs to train\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\nhistory = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T19:00:56.044218Z","iopub.execute_input":"2024-09-23T19:00:56.044672Z","iopub.status.idle":"2024-09-23T19:07:31.383180Z","shell.execute_reply.started":"2024-09-23T19:00:56.044629Z","shell.execute_reply":"2024-09-23T19:07:31.381888Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Epoch 1/25\nTrain Loss: 3.3606, Class Loss: 3.3606, Center Loss: 128.1521, Acc: 0.1038\nVal Class Loss: 2.8584, Val Center Loss: 63.1376, Val Acc: 0.1719\nEpoch 2/25\nTrain Loss: 2.5069, Class Loss: 2.5069, Center Loss: 669.6054, Acc: 0.2740\nVal Class Loss: 1.9647, Val Center Loss: 603.9243, Val Acc: 0.4323\nEpoch 3/25\nTrain Loss: 2.0194, Class Loss: 2.0194, Center Loss: 1318.6915, Acc: 0.3929\nVal Class Loss: 1.5452, Val Center Loss: 494.9212, Val Acc: 0.5000\nEpoch 4/25\nTrain Loss: 1.6492, Class Loss: 1.6492, Center Loss: 1733.7745, Acc: 0.4989\nVal Class Loss: 1.8984, Val Center Loss: 1030.4611, Val Acc: 0.4583\nEpoch 5/25\nTrain Loss: 1.3601, Class Loss: 1.3601, Center Loss: 2129.6653, Acc: 0.5703\nVal Class Loss: 1.3674, Val Center Loss: 1211.2786, Val Acc: 0.5938\nEpoch 6/25\nTrain Loss: 1.1462, Class Loss: 1.1462, Center Loss: 2297.0903, Acc: 0.6473\nVal Class Loss: 0.9116, Val Center Loss: 1308.3549, Val Acc: 0.7344\nEpoch 7/25\nTrain Loss: 0.8285, Class Loss: 0.8285, Center Loss: 3252.6780, Acc: 0.7595\nVal Class Loss: 0.9878, Val Center Loss: 1329.4392, Val Acc: 0.7318\nEpoch 8/25\nTrain Loss: 0.6082, Class Loss: 0.6082, Center Loss: 4811.2998, Acc: 0.8259\nVal Class Loss: 1.0079, Val Center Loss: 1578.2959, Val Acc: 0.7292\nEpoch 9/25\nTrain Loss: 0.5177, Class Loss: 0.5177, Center Loss: 4464.4121, Acc: 0.8661\nVal Class Loss: 1.2494, Val Center Loss: 2096.3181, Val Acc: 0.6745\nEpoch 10/25\nTrain Loss: 0.4391, Class Loss: 0.4391, Center Loss: 5204.1924, Acc: 0.8867\nVal Class Loss: 0.6600, Val Center Loss: 2097.7107, Val Acc: 0.7943\nEpoch 11/25\nTrain Loss: 0.3183, Class Loss: 0.3183, Center Loss: 6056.2646, Acc: 0.9269\nVal Class Loss: 0.6163, Val Center Loss: 1617.6650, Val Acc: 0.8281\nEpoch 12/25\nTrain Loss: 0.2812, Class Loss: 0.2812, Center Loss: 7809.2954, Acc: 0.9347\nVal Class Loss: 0.6981, Val Center Loss: 2631.8010, Val Acc: 0.8203\nEpoch 13/25\nTrain Loss: 0.2780, Class Loss: 0.2780, Center Loss: 7529.9570, Acc: 0.9364\nVal Class Loss: 0.5677, Val Center Loss: 2770.2493, Val Acc: 0.8620\nEpoch 14/25\nTrain Loss: 0.2204, Class Loss: 0.2204, Center Loss: 8267.4277, Acc: 0.9643\nVal Class Loss: 0.8230, Val Center Loss: 2893.1907, Val Acc: 0.8255\nEpoch 15/25\nTrain Loss: 0.2483, Class Loss: 0.2483, Center Loss: 10226.4551, Acc: 0.9565\nVal Class Loss: 0.7115, Val Center Loss: 2913.6797, Val Acc: 0.8620\nEpoch 16/25\nTrain Loss: 0.2991, Class Loss: 0.2991, Center Loss: 10718.7188, Acc: 0.9593\nVal Class Loss: 0.8513, Val Center Loss: 1571.1842, Val Acc: 0.7943\nEpoch 17/25\nTrain Loss: 0.1751, Class Loss: 0.1751, Center Loss: 10421.8525, Acc: 0.9738\nVal Class Loss: 0.8657, Val Center Loss: 3011.5300, Val Acc: 0.8385\nEpoch 18/25\nTrain Loss: 0.2462, Class Loss: 0.2462, Center Loss: 9173.4150, Acc: 0.9598\nVal Class Loss: 0.7752, Val Center Loss: 3622.5525, Val Acc: 0.8594\nEpoch 19/25\nTrain Loss: 0.1778, Class Loss: 0.1778, Center Loss: 10433.6943, Acc: 0.9699\nVal Class Loss: 0.7778, Val Center Loss: 3744.2766, Val Acc: 0.8568\nEpoch 20/25\nTrain Loss: 0.1749, Class Loss: 0.1749, Center Loss: 12495.4238, Acc: 0.9788\nVal Class Loss: 1.0895, Val Center Loss: 1935.6349, Val Acc: 0.8021\nEpoch 21/25\nTrain Loss: 0.2381, Class Loss: 0.2381, Center Loss: 14186.8828, Acc: 0.9699\nVal Class Loss: 0.9546, Val Center Loss: 3485.7930, Val Acc: 0.8516\nEpoch 22/25\nTrain Loss: 0.1760, Class Loss: 0.1760, Center Loss: 14054.4629, Acc: 0.9743\nVal Class Loss: 0.9840, Val Center Loss: 6144.6372, Val Acc: 0.8672\nEpoch 23/25\nTrain Loss: 0.1729, Class Loss: 0.1729, Center Loss: 11013.2344, Acc: 0.9833\nVal Class Loss: 0.6323, Val Center Loss: 5762.2954, Val Acc: 0.8906\nEpoch 24/25\n","output_type":"stream"},{"name":"stderr","text":"\nKeyboardInterrupt\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Modal Data generation","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = tf.cast(margin, tf.float32)\n        self.alpha = alpha  # EMA smoothing factor\n        self.distance = 0.1  # The length between P1 and P2\n\n        # Initialize center_p1 randomly using a normal distribution\n        self.centers_P1 = self.add_weight(name='centers_P1',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='random_normal',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n        # Create center_p2 without initialization\n        self.centers_P2 = self.add_weight(name='centers_P2',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='zeros',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n    def build(self, input_shape):\n        # Generate a random unit vector direction for center_p2\n        random_direction = tf.random.normal((self.num_classes, self.embedding_dim))\n        unit_vector = random_direction / tf.norm(random_direction, axis=1, keepdims=True)  # Normalize\n\n        # Assign center_p2 to be 'distance' units away from center_p1\n        center_p2_value = self.distance * unit_vector\n        self.centers_P2.assign(center_p2_value)\n\n        super(CenterLossLayer, self).build(input_shape)\n    \n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Step 1: Compute the midpoint for each class (mean of embeddings for each class)\n        batch_midpoint = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Step 2: Calculate the variance for each class\n        squared_diff = tf.square(embeddings - tf.gather(batch_midpoint, labels))\n        batch_variance = tf.math.unsorted_segment_mean(squared_diff, labels, num_segments=self.num_classes)\n\n        # Step 3: Compute the standard deviation (sqrt of variance)\n        batch_stddev = tf.sqrt(batch_variance)\n\n        # Step 4: Position centers_P1 and centers_P2 around the midpoint\n        # Center_P1 closer to the midpoint, Center_P2 further from the midpoint\n        batch_centers_P1 = batch_midpoint - 0.5 * batch_stddev  # Center_P1 inside dense region\n        batch_centers_P2 = batch_midpoint + 0.5 * batch_stddev  # Center_P2 outside dense region\n\n        # Gather the centers corresponding to the labels\n        batch_centers_P1_gathered = tf.gather(batch_centers_P1, labels)\n        batch_centers_P2_gathered = tf.gather(batch_centers_P2, labels)\n\n        # Step 5: Update centers using EMA (Exponential Moving Average)\n        center_updates_P1 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P1_gathered,\n                                          shape=tf.shape(self.centers_P1))\n        center_updates_P2 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P2_gathered,\n                                          shape=tf.shape(self.centers_P2))\n\n        # EMA update for centers_P1 and centers_P2\n        new_centers_P1 = self.centers_P1 * (1 - self.alpha) + center_updates_P1 * self.alpha\n        new_centers_P2 = self.centers_P2 * (1 - self.alpha) + center_updates_P2 * self.alpha\n\n        # Assign updated centers\n        self.centers_P1.assign(new_centers_P1)\n        self.centers_P2.assign(new_centers_P2)\n\n        # Step 6: Compute distances to all class segments for each embedding\n        distances = self.compute_distance_to_segment_all_classes(embeddings)\n\n        # Step 7: Get the correct distances by indexing with labels\n        correct_distances = tf.gather_nd(distances, tf.expand_dims(labels, axis=-1), batch_dims=1)\n\n        # Step 8: Mask out correct class distances and find the minimum incorrect distance\n        mask = tf.one_hot(labels, depth=self.num_classes, on_value=False, off_value=True)\n        masked_distances = tf.where(mask, distances, tf.fill(tf.shape(distances), float('inf')))\n        min_incorrect_distances = tf.reduce_min(masked_distances, axis=1)\n\n        # Step 9: Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n\n    def compute_distance_to_segment_all_classes(self, embeddings):\n        \"\"\"\n        Compute the Euclidean distance from each embedding to the nearest point on the line segment\n        defined by P1 and P2 for each class.\n        \"\"\"\n        # Get P1 and P2 for all classes\n        P1 = self.centers_P1\n        P2 = self.centers_P2\n\n        # Vector from P1 to P2 for all classes\n        P1_P2 = P2 - P1\n\n        # Expand dims for broadcasting\n        P1 = tf.expand_dims(P1, axis=0)\n        P2 = tf.expand_dims(P2, axis=0)\n        P1_P2 = tf.expand_dims(P1_P2, axis=0)\n        embeddings = tf.expand_dims(embeddings, axis=1)\n\n        # Vector from P1 to the embeddings\n        P1_emb = embeddings - P1\n\n        # Project embeddings onto the line segment\n        proj = tf.reduce_sum(P1_emb * P1_P2, axis=2, keepdims=True) / tf.maximum(tf.reduce_sum(P1_P2 ** 2, axis=2, keepdims=True), 1e-8)\n\n        # Clamp projection to the range [0, 1] to restrict to the segment\n        proj_clamped = tf.clip_by_value(proj, 0.0, 1.0)\n\n        # Compute the nearest point on the line segment\n        nearest_point = P1 + proj_clamped * P1_P2\n\n        # Compute the Euclidean distance to the nearest point on the segment\n        distances = tf.norm(embeddings - nearest_point, axis=2)\n\n        return distances\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay), bias_regularizer=regularizers.l2(0.01) )(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n    # logits = tf.keras.layers.Lambda(lambda x: x / 10)(logits)  # Example scaling\n    # logits = tf.keras.layers.Activation('softmax')(logits)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, train_generator, val_generator, steps_per_epoch, validation_steps, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.RMSprop(learning_rate)\n\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            logits, center_loss = model([inputs, labels], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n\n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for step in range(steps_per_epoch):\n            inputs_batch, labels_batch = next(train_generator)\n            loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n\n        epoch_loss /= steps_per_epoch\n        epoch_class_loss /= steps_per_epoch\n        epoch_center_loss /= steps_per_epoch\n        epoch_acc /= steps_per_epoch\n\n        print(f\"Train Loss: {epoch_loss:.4f}, Class Loss: {epoch_class_loss:.4f}, Center Loss: {epoch_center_loss:.4f}, Acc: {epoch_acc:.4f}\")\n\n        history[\"train_loss\"].append(epoch_loss)\n        history[\"train_class_loss\"].append(epoch_class_loss)\n        history[\"train_center_loss\"].append(epoch_center_loss)\n        history[\"train_acc\"].append(epoch_acc)\n\n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for step in range(validation_steps):\n            inputs_batch, labels_batch = next(val_generator)\n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        val_class_loss /= validation_steps\n        val_center_loss /= validation_steps\n        val_acc /= validation_steps\n\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n\n        history[\"val_class_loss\"].append(val_class_loss)\n        history[\"val_center_loss\"].append(val_center_loss)\n        history[\"val_acc\"].append(val_acc)\n\n    return history\n\n# Initialize ImageDataGenerator with augmentation options (without rescaling)\ntrain_datagen = ImageDataGenerator(\n    rotation_range=20,           # Randomly rotate images by 20 degrees\n    width_shift_range=0.2,       # Randomly shift images horizontally\n    height_shift_range=0.2,      # Randomly shift images vertically\n    shear_range=0.2,             # Shear transformation\n    zoom_range=0.2,              # Zoom in/out\n    horizontal_flip=True,        # Random horizontal flipping\n    fill_mode='nearest'          # Filling pixels after transformations\n)\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 768              # Dimensionality of the embedding space\ndropout_rate = 0.0               # Dropout rate for regularization\nweight_decay = 0.0 #0.005            # L2 regularization weight\ncenter_loss_weight = 0.01 #0.0001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 25                      # Number of epochs to train\n\nval_datagen = ImageDataGenerator()  # No additional augmentations for validation\n\n# Load and augment training data\ntrain_generator = train_datagen.flow(X_train, y_train, batch_size=batch_size)\n\n# Load validation data\nval_generator = val_datagen.flow(X_val, y_val, batch_size=batch_size)\n\nsteps_per_epoch = len(X_train) # batch_size\nvalidation_steps = len(X_val)  #batch_size\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n# Train the model using data generators\nhistory = train_and_evaluate(full_model, train_generator, val_generator, steps_per_epoch, validation_steps, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T22:04:35.066240Z","iopub.execute_input":"2024-09-23T22:04:35.066715Z","iopub.status.idle":"2024-09-23T22:06:27.597542Z","shell.execute_reply.started":"2024-09-23T22:04:35.066673Z","shell.execute_reply":"2024-09-23T22:06:27.595803Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Epoch 1/25\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[8], line 305\u001b[0m\n\u001b[1;32m    303\u001b[0m embedding_model, full_model \u001b[38;5;241m=\u001b[39m build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\u001b[1;32m    304\u001b[0m \u001b[38;5;66;03m# Train the model using data generators\u001b[39;00m\n\u001b[0;32m--> 305\u001b[0m history \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_and_evaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfull_model\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_generator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mval_generator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msteps_per_epoch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalidation_steps\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcenter_loss_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlearning_rate\u001b[49m\u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[8], line 229\u001b[0m, in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, train_generator, val_generator, steps_per_epoch, validation_steps, epochs, center_loss_weight, learning_rate)\u001b[0m\n\u001b[1;32m    227\u001b[0m epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m step \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(steps_per_epoch):\n\u001b[0;32m--> 229\u001b[0m     inputs_batch, labels_batch \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mnext\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mtrain_generator\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    230\u001b[0m     loss, class_loss, center_loss, acc \u001b[38;5;241m=\u001b[39m train_step(inputs_batch, labels_batch)\n\u001b[1;32m    231\u001b[0m     epoch_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m loss\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:112\u001b[0m, in \u001b[0;36mIterator.__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    109\u001b[0m     index_array \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mnext\u001b[39m(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mindex_generator)\n\u001b[1;32m    110\u001b[0m \u001b[38;5;66;03m# The transformation of images is not under thread lock\u001b[39;00m\n\u001b[1;32m    111\u001b[0m \u001b[38;5;66;03m# so it can be done in parallel\u001b[39;00m\n\u001b[0;32m--> 112\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_batches_of_transformed_samples\u001b[49m\u001b[43m(\u001b[49m\u001b[43mindex_array\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:654\u001b[0m, in \u001b[0;36mNumpyArrayIterator._get_batches_of_transformed_samples\u001b[0;34m(self, index_array)\u001b[0m\n\u001b[1;32m    652\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mx[j]\n\u001b[1;32m    653\u001b[0m params \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mimage_data_generator\u001b[38;5;241m.\u001b[39mget_random_transform(x\u001b[38;5;241m.\u001b[39mshape)\n\u001b[0;32m--> 654\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimage_data_generator\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mapply_transform\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    655\u001b[0m \u001b[43m    \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mastype\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparams\u001b[49m\n\u001b[1;32m    656\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    657\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mimage_data_generator\u001b[38;5;241m.\u001b[39mstandardize(x)\n\u001b[1;32m    658\u001b[0m batch_x[i] \u001b[38;5;241m=\u001b[39m x\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:1413\u001b[0m, in \u001b[0;36mImageDataGenerator.apply_transform\u001b[0;34m(self, x, transform_parameters)\u001b[0m\n\u001b[1;32m   1410\u001b[0m img_col_axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcol_axis \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1411\u001b[0m img_channel_axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mchannel_axis \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m-> 1413\u001b[0m x \u001b[38;5;241m=\u001b[39m \u001b[43mapply_affine_transform\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1414\u001b[0m \u001b[43m    \u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1415\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtransform_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtheta\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1416\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtransform_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mtx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1417\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtransform_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mty\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1418\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtransform_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mshear\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1419\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtransform_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mzx\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1420\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtransform_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mzy\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1421\u001b[0m \u001b[43m    \u001b[49m\u001b[43mrow_axis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mimg_row_axis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1422\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcol_axis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mimg_col_axis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1423\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchannel_axis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mimg_channel_axis\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1424\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfill_mode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfill_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1425\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcval\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1426\u001b[0m \u001b[43m    \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterpolation_order\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1427\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1429\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m transform_parameters\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mchannel_shift_intensity\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1430\u001b[0m     x \u001b[38;5;241m=\u001b[39m apply_channel_shift(\n\u001b[1;32m   1431\u001b[0m         x,\n\u001b[1;32m   1432\u001b[0m         transform_parameters[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mchannel_shift_intensity\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m   1433\u001b[0m         img_channel_axis,\n\u001b[1;32m   1434\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:1879\u001b[0m, in \u001b[0;36mapply_affine_transform\u001b[0;34m(x, theta, tx, ty, shear, zx, zy, row_axis, col_axis, channel_axis, fill_mode, cval, order)\u001b[0m\n\u001b[1;32m   1876\u001b[0m final_affine_matrix \u001b[38;5;241m=\u001b[39m transform_matrix[:\u001b[38;5;241m2\u001b[39m, :\u001b[38;5;241m2\u001b[39m]\n\u001b[1;32m   1877\u001b[0m final_offset \u001b[38;5;241m=\u001b[39m transform_matrix[:\u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m2\u001b[39m]\n\u001b[0;32m-> 1879\u001b[0m channel_images \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m   1880\u001b[0m     scipy\u001b[38;5;241m.\u001b[39mndimage\u001b[38;5;241m.\u001b[39minterpolation\u001b[38;5;241m.\u001b[39maffine_transform(\n\u001b[1;32m   1881\u001b[0m         x_channel,\n\u001b[1;32m   1882\u001b[0m         final_affine_matrix,\n\u001b[1;32m   1883\u001b[0m         final_offset,\n\u001b[1;32m   1884\u001b[0m         order\u001b[38;5;241m=\u001b[39morder,\n\u001b[1;32m   1885\u001b[0m         mode\u001b[38;5;241m=\u001b[39mfill_mode,\n\u001b[1;32m   1886\u001b[0m         cval\u001b[38;5;241m=\u001b[39mcval,\n\u001b[1;32m   1887\u001b[0m     )\n\u001b[1;32m   1888\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m x_channel \u001b[38;5;129;01min\u001b[39;00m x\n\u001b[1;32m   1889\u001b[0m ]\n\u001b[1;32m   1890\u001b[0m x \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mstack(channel_images, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m   1891\u001b[0m x \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrollaxis(x, \u001b[38;5;241m0\u001b[39m, channel_axis \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:1880\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   1876\u001b[0m final_affine_matrix \u001b[38;5;241m=\u001b[39m transform_matrix[:\u001b[38;5;241m2\u001b[39m, :\u001b[38;5;241m2\u001b[39m]\n\u001b[1;32m   1877\u001b[0m final_offset \u001b[38;5;241m=\u001b[39m transform_matrix[:\u001b[38;5;241m2\u001b[39m, \u001b[38;5;241m2\u001b[39m]\n\u001b[1;32m   1879\u001b[0m channel_images \u001b[38;5;241m=\u001b[39m [\n\u001b[0;32m-> 1880\u001b[0m     \u001b[43mscipy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mndimage\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minterpolation\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43maffine_transform\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1881\u001b[0m \u001b[43m        \u001b[49m\u001b[43mx_channel\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1882\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfinal_affine_matrix\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1883\u001b[0m \u001b[43m        \u001b[49m\u001b[43mfinal_offset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1884\u001b[0m \u001b[43m        \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1885\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmode\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfill_mode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1886\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcval\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcval\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1887\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1888\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m x_channel \u001b[38;5;129;01min\u001b[39;00m x\n\u001b[1;32m   1889\u001b[0m ]\n\u001b[1;32m   1890\u001b[0m x \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mstack(channel_images, axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m   1891\u001b[0m x \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrollaxis(x, \u001b[38;5;241m0\u001b[39m, channel_axis \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/scipy/ndimage/_interpolation.py:626\u001b[0m, in \u001b[0;36maffine_transform\u001b[0;34m(input, matrix, offset, output_shape, output, order, mode, cval, prefilter)\u001b[0m\n\u001b[1;32m    623\u001b[0m     _nd_image\u001b[38;5;241m.\u001b[39mzoom_shift(filtered, matrix, offset\u001b[38;5;241m/\u001b[39mmatrix, output, order,\n\u001b[1;32m    624\u001b[0m                          mode, cval, npad, \u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m    625\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 626\u001b[0m     \u001b[43m_nd_image\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgeometric_transform\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfiltered\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmatrix\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43moffset\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    627\u001b[0m \u001b[43m                                  \u001b[49m\u001b[43moutput\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcval\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnpad\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    628\u001b[0m \u001b[43m                                  \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    629\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m output\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap\n\n\n#embedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\n\n# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed)\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings (Color-coded)')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-23T20:55:53.492877Z","iopub.execute_input":"2024-09-23T20:55:53.493643Z","iopub.status.idle":"2024-09-23T20:56:19.495382Z","shell.execute_reply.started":"2024-09-23T20:55:53.493600Z","shell.execute_reply":"2024-09-23T20:56:19.494416Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"\u001b[1m81/81\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 155ms/step\n","output_type":"stream"},{"name":"stderr","text":"/tmp/ipykernel_36/128802008.py:27: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from collections import defaultdict\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(12, 12))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=50)  # Adjust marker size (s=50)\n\n# To store average position of each cluster\ncluster_centers = defaultdict(list)\n\n# Gather all points belonging to the same class\nfor i, label in enumerate(numeric_labels):\n    cluster_centers[label].append(embeddings_2d[i])\n\n# Annotate each cluster with one label\nfor label, points in cluster_centers.items():\n    cluster_points = np.array(points)\n    # Find the centroid of the cluster\n    centroid = np.mean(cluster_points, axis=0)\n    # Get the original string label for the cluster\n    label_name = label_encoder.inverse_transform([label])[0]\n    # Annotate at the centroid\n    plt.text(centroid[0], centroid[1], label_name, fontsize=12, ha='center', va='center', \n             bbox=dict(facecolor='white', alpha=0.6, edgecolor='none'))\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with One Label per Cluster')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-23T20:35:21.599578Z","iopub.execute_input":"2024-09-23T20:35:21.599987Z","iopub.status.idle":"2024-09-23T20:35:32.313444Z","shell.execute_reply.started":"2024-09-23T20:35:21.599948Z","shell.execute_reply":"2024-09-23T20:35:32.312535Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3858921856.py:12: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### Linear center loss - v2 random p2","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = tf.cast(margin, tf.float32)\n        self.alpha = alpha  # EMA smoothing factor\n        self.distance = 0.3  # The length between P1 and P2\n\n        # Initialize center_p1 randomly using a normal distribution\n        self.centers_P1 = self.add_weight(name='centers_P1',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='random_normal',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n        # Create center_p2 without initialization\n        self.centers_P2 = self.add_weight(name='centers_P2',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='zeros',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n    def build(self, input_shape):\n        # Generate a random unit vector direction for center_p2\n        random_direction = tf.random.normal((self.num_classes, self.embedding_dim))\n        unit_vector = random_direction / tf.norm(random_direction, axis=1, keepdims=True)  # Normalize\n\n        # Assign center_p2 to be 'distance' units away from center_p1\n        center_p2_value = self.distance * unit_vector\n        self.centers_P2.assign(center_p2_value)\n\n        super(CenterLossLayer, self).build(input_shape)\n        \n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class using unsorted_segment_mean\n        batch_centers_P1 = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n        \n        # Introduce a random transformation for batch_centers_P2\n        random_noise = tf.random.normal(tf.shape(embeddings)) * self.distance\n        transformed_embeddings = embeddings + random_noise\n        \n        batch_centers_P2 = tf.math.unsorted_segment_mean(transformed_embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers (P1 and P2) with EMA\n        batch_centers_P1_gathered = tf.gather(batch_centers_P1, labels)\n        batch_centers_P2_gathered = tf.gather(batch_centers_P2, labels)\n\n        center_updates_P1 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P1_gathered,\n                                          shape=tf.shape(self.centers_P1))\n        center_updates_P2 = tf.scatter_nd(tf.expand_dims(labels, 1),\n                                          batch_centers_P2_gathered,\n                                          shape=tf.shape(self.centers_P2))\n\n        # EMA update for centers_P1 and centers_P2\n        new_centers_P1 = self.centers_P1 * (1 - self.alpha) + center_updates_P1 * self.alpha\n        new_centers_P2 = self.centers_P2 * (1 - self.alpha) + center_updates_P2 * self.alpha\n\n        self.centers_P1.assign(new_centers_P1)\n        self.centers_P2.assign(new_centers_P2)\n\n        # Compute distances to all class segments for each embedding\n        distances = self.compute_distance_to_segment_all_classes(embeddings)\n\n        # Get the correct distances by indexing with labels\n        correct_distances = tf.gather_nd(distances, tf.expand_dims(labels, axis=-1), batch_dims=1)\n\n        # Mask out correct class distances and find the minimum incorrect distance\n        mask = tf.one_hot(labels, depth=self.num_classes, on_value=False, off_value=True)\n        masked_distances = tf.where(mask, distances, tf.fill(tf.shape(distances), float('inf')))\n        min_incorrect_distances = tf.reduce_min(masked_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n    def compute_distance_to_segment_all_classes(self, embeddings):\n        \"\"\"\n        Compute the Euclidean distance from each embedding to the nearest point on the line segment\n        defined by P1 and P2 for each class.\n        \"\"\"\n        # Get P1 and P2 for all classes\n        P1 = self.centers_P1\n        P2 = self.centers_P2\n\n        # Vector from P1 to P2 for all classes\n        P1_P2 = P2 - P1\n\n        # Expand dims for broadcasting\n        P1 = tf.expand_dims(P1, axis=0)\n        P2 = tf.expand_dims(P2, axis=0)\n        P1_P2 = tf.expand_dims(P1_P2, axis=0)\n        embeddings = tf.expand_dims(embeddings, axis=1)\n\n        # Vector from P1 to the embeddings\n        P1_emb = embeddings - P1\n\n        # Project embeddings onto the line segment\n        proj = tf.reduce_sum(P1_emb * P1_P2, axis=2, keepdims=True) / tf.maximum(tf.reduce_sum(P1_P2 ** 2, axis=2, keepdims=True), 1e-8)\n\n        # Clamp projection to the range [0, 1] to restrict to the segment\n        proj_clamped = tf.clip_by_value(proj, 0.0, 1.0)\n\n        # Compute the nearest point on the line segment\n        nearest_point = P1 + proj_clamped * P1_P2\n\n        # Compute the Euclidean distance to the nearest point on the segment\n        distances = tf.norm(embeddings - nearest_point, axis=2)\n\n        return distances\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n    # logits = tf.keras.layers.Lambda(lambda x: x / 10)(logits)  # Example scaling\n    # logits = tf.keras.layers.Activation('softmax')(logits)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            logits, center_loss = model([inputs, labels], training=True)\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            inputs_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n        \n        epoch_loss /= len(X_train) // batch_size\n        epoch_class_loss /= len(X_train) // batch_size\n        epoch_center_loss /= len(X_train) // batch_size\n        epoch_acc /= len(X_train) // batch_size\n        \n        print(f\"Train Loss: {epoch_loss:.4f}, Class Loss: {epoch_class_loss:.4f}, Center Loss: {epoch_center_loss:.4f}, Acc: {epoch_acc:.4f}\")\n        \n        # Save training metrics\n        history[\"train_loss\"].append(epoch_loss)\n        history[\"train_class_loss\"].append(epoch_class_loss)\n        history[\"train_center_loss\"].append(epoch_center_loss)\n        history[\"train_acc\"].append(epoch_acc)\n        \n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            inputs_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            \n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        val_class_loss /= len(X_val) // batch_size\n        val_center_loss /= len(X_val) // batch_size\n        val_acc /= len(X_val) // batch_size\n\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n        \n        # Save validation metrics\n        history[\"val_class_loss\"].append(val_class_loss)\n        history[\"val_center_loss\"].append(val_center_loss)\n        history[\"val_acc\"].append(val_acc)\n\n    return history\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 1024              # Dimensionality of the embedding space\ndropout_rate = 0.25                # Dropout rate for regularization\nweight_decay = 0.01            # L2 regularization weight\ncenter_loss_weight = 0.0001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 25                      # Number of epochs to train\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\nhistory = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T16:57:49.313501Z","iopub.execute_input":"2024-09-23T16:57:49.313877Z","iopub.status.idle":"2024-09-23T17:05:23.456302Z","shell.execute_reply.started":"2024-09-23T16:57:49.313842Z","shell.execute_reply":"2024-09-23T17:05:23.455325Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Epoch 1/25\nTrain Loss: 3.2825, Class Loss: 3.2684, Center Loss: 141.7419, Acc: 0.0999\nVal Class Loss: 2.7860, Val Center Loss: 63.9399, Val Acc: 0.1927\nEpoch 2/25\nTrain Loss: 2.5887, Class Loss: 2.5484, Center Loss: 402.6346, Acc: 0.2422\nVal Class Loss: 2.1516, Val Center Loss: 163.5100, Val Acc: 0.3672\nEpoch 3/25\nTrain Loss: 1.9827, Class Loss: 1.9279, Center Loss: 548.3408, Acc: 0.4258\nVal Class Loss: 1.5995, Val Center Loss: 321.8648, Val Acc: 0.4974\nEpoch 4/25\nTrain Loss: 1.5183, Class Loss: 1.4525, Center Loss: 657.9553, Acc: 0.5485\nVal Class Loss: 1.5089, Val Center Loss: 159.8550, Val Acc: 0.4844\nEpoch 5/25\nTrain Loss: 1.2895, Class Loss: 1.2311, Center Loss: 583.2275, Acc: 0.6228\nVal Class Loss: 1.2660, Val Center Loss: 137.2792, Val Acc: 0.6224\nEpoch 6/25\nTrain Loss: 0.9396, Class Loss: 0.8714, Center Loss: 682.4332, Acc: 0.7372\nVal Class Loss: 0.9845, Val Center Loss: 359.9269, Val Acc: 0.6745\nEpoch 7/25\nTrain Loss: 0.7021, Class Loss: 0.6343, Center Loss: 678.5556, Acc: 0.8103\nVal Class Loss: 0.9314, Val Center Loss: 206.4168, Val Acc: 0.7057\nEpoch 8/25\nTrain Loss: 0.5739, Class Loss: 0.5101, Center Loss: 637.7684, Acc: 0.8544\nVal Class Loss: 0.8742, Val Center Loss: 333.4019, Val Acc: 0.7344\nEpoch 9/25\nTrain Loss: 0.4500, Class Loss: 0.3899, Center Loss: 601.5913, Acc: 0.8945\nVal Class Loss: 0.6098, Val Center Loss: 270.2584, Val Acc: 0.8047\nEpoch 10/25\nTrain Loss: 0.2982, Class Loss: 0.2401, Center Loss: 580.4742, Acc: 0.9526\nVal Class Loss: 0.6209, Val Center Loss: 212.7068, Val Acc: 0.7969\nEpoch 11/25\nTrain Loss: 0.2052, Class Loss: 0.1548, Center Loss: 504.2337, Acc: 0.9805\nVal Class Loss: 0.4610, Val Center Loss: 193.2648, Val Acc: 0.8698\nEpoch 12/25\nTrain Loss: 0.1401, Class Loss: 0.0879, Center Loss: 522.2120, Acc: 0.9978\nVal Class Loss: 0.4527, Val Center Loss: 150.6284, Val Acc: 0.8672\nEpoch 13/25\nTrain Loss: 0.1091, Class Loss: 0.0670, Center Loss: 420.3811, Acc: 1.0067\nVal Class Loss: 0.3942, Val Center Loss: 139.0809, Val Acc: 0.8750\nEpoch 14/25\nTrain Loss: 0.0831, Class Loss: 0.0441, Center Loss: 389.4721, Acc: 1.0123\nVal Class Loss: 0.4145, Val Center Loss: 129.4683, Val Acc: 0.8776\nEpoch 15/25\nTrain Loss: 0.0725, Class Loss: 0.0371, Center Loss: 353.7237, Acc: 1.0128\nVal Class Loss: 0.4223, Val Center Loss: 116.1462, Val Acc: 0.8698\nEpoch 16/25\nTrain Loss: 0.0592, Class Loss: 0.0279, Center Loss: 312.8827, Acc: 1.0151\nVal Class Loss: 0.3804, Val Center Loss: 100.6191, Val Acc: 0.8854\nEpoch 17/25\nTrain Loss: 0.0491, Class Loss: 0.0210, Center Loss: 280.6330, Acc: 1.0173\nVal Class Loss: 0.3515, Val Center Loss: 94.7093, Val Acc: 0.9036\nEpoch 18/25\nTrain Loss: 0.0512, Class Loss: 0.0241, Center Loss: 270.0985, Acc: 1.0151\nVal Class Loss: 0.3552, Val Center Loss: 89.1780, Val Acc: 0.8906\nEpoch 19/25\nTrain Loss: 0.0520, Class Loss: 0.0232, Center Loss: 287.9062, Acc: 1.0167\nVal Class Loss: 0.3632, Val Center Loss: 92.7462, Val Acc: 0.8958\nEpoch 20/25\nTrain Loss: 0.0489, Class Loss: 0.0232, Center Loss: 256.4555, Acc: 1.0167\nVal Class Loss: 0.3500, Val Center Loss: 87.2078, Val Acc: 0.8906\nEpoch 21/25\nTrain Loss: 0.0405, Class Loss: 0.0164, Center Loss: 240.8441, Acc: 1.0167\nVal Class Loss: 0.3493, Val Center Loss: 84.8522, Val Acc: 0.8932\nEpoch 22/25\nTrain Loss: 0.0417, Class Loss: 0.0192, Center Loss: 225.3390, Acc: 1.0173\nVal Class Loss: 0.3291, Val Center Loss: 81.6542, Val Acc: 0.9010\nEpoch 23/25\nTrain Loss: 0.0372, Class Loss: 0.0147, Center Loss: 224.9564, Acc: 1.0173\nVal Class Loss: 0.3538, Val Center Loss: 83.4595, Val Acc: 0.8932\nEpoch 24/25\nTrain Loss: 0.0460, Class Loss: 0.0248, Center Loss: 212.2177, Acc: 1.0179\nVal Class Loss: 0.3821, Val Center Loss: 88.3381, Val Acc: 0.8880\nEpoch 25/25\nTrain Loss: 0.0781, Class Loss: 0.0402, Center Loss: 378.7190, Acc: 1.0095\nVal Class Loss: 0.5664, Val Center Loss: 116.6355, Val Acc: 0.8620\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Polynomial Curve","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.0001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = tf.cast(margin, tf.float32)\n        self.alpha = alpha  # EMA smoothing factor\n        self.distance = 2.0  # The length between P1 and P2\n\n        # Initialize center_p1, center_p2, and control points for quadratic curve\n        self.centers_P1 = self.add_weight(name='centers_P1',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='random_normal',\n                                          trainable=False,\n                                          dtype=tf.float32)\n\n        self.centers_P2 = self.add_weight(name='centers_P2',\n                                          shape=(num_classes, embedding_dim),\n                                          initializer='random_normal',\n                                          trainable=False,\n                                          dtype=tf.float32)\n        \n        # Additional control points for the polynomial curve\n        self.control_points = self.add_weight(name='control_points',\n                                              shape=(num_classes, embedding_dim),\n                                              initializer='random_normal',\n                                              trainable=False,\n                                              dtype=tf.float32)\n\n    def build(self, input_shape):\n        super(CenterLossLayer, self).build(input_shape)\n\n    def call(self, inputs_and_labels):\n        inputs, labels = inputs_and_labels\n\n        # Ensure labels are in integer form (convert one-hot to integer)\n        if len(labels.shape) > 1 and labels.shape[-1] == self.num_classes:\n            labels = tf.argmax(labels, axis=-1)\n\n        # Compute distance between embeddings and curve (for all classes)\n        min_distances = self.compute_distance_to_curve_all_classes(inputs)\n\n        # Gather distances corresponding to the correct class\n        labels = tf.cast(labels, tf.int32)\n        batch_size = tf.shape(inputs)[0]\n        indices = tf.stack([tf.range(batch_size), labels], axis=1)\n        correct_class_distances = tf.gather_nd(min_distances, indices)\n\n        # Mask for excluding the correct class during incorrect class distance calculation\n        mask = tf.one_hot(labels, depth=self.num_classes)\n        masked_distances = min_distances + mask * 1e12  # Add large number to mask out the correct class\n\n        # Compute the minimum incorrect distance\n        min_incorrect_distances = tf.reduce_min(masked_distances, axis=1)\n\n        # Center update logic\n        centers_P1_batch = tf.gather(self.centers_P1, labels)\n        centers_P2_batch = tf.gather(self.centers_P2, labels)\n        control_points_batch = tf.gather(self.control_points, labels)\n\n        # Compute updates for centers (P1, P2, and control points)\n        diff_P1 = centers_P1_batch - inputs\n        diff_P2 = centers_P2_batch - inputs\n        diff_control = control_points_batch - inputs\n\n        unique_labels, unique_idx, unique_count = tf.unique_with_counts(labels)\n        num_unique_labels = tf.size(unique_labels)\n\n        # Update centers with momentum controlled by alpha\n        diff_P1_sum = tf.math.unsorted_segment_sum(diff_P1, unique_idx, num_unique_labels)\n        diff_P2_sum = tf.math.unsorted_segment_sum(diff_P2, unique_idx, num_unique_labels)\n        diff_control_sum = tf.math.unsorted_segment_sum(diff_control, unique_idx, num_unique_labels)\n\n        diff_count = tf.cast(unique_count[:, tf.newaxis], dtype=tf.float32)\n        diff_P1_avg = diff_P1_sum / diff_count\n        diff_P2_avg = diff_P2_sum / diff_count\n        diff_control_avg = diff_control_sum / diff_count\n\n        new_P1 = tf.tensor_scatter_nd_sub(self.centers_P1, \n                                          tf.expand_dims(unique_labels, axis=1),\n                                          self.alpha * diff_P1_avg)\n        new_P2 = tf.tensor_scatter_nd_sub(self.centers_P2, \n                                          tf.expand_dims(unique_labels, axis=1),\n                                          self.alpha * diff_P2_avg)\n        new_control = tf.tensor_scatter_nd_sub(self.control_points, \n                                               tf.expand_dims(unique_labels, axis=1),\n                                               self.alpha * diff_control_avg)\n\n        self.centers_P1.assign(new_P1)\n        self.centers_P2.assign(new_P2)\n        self.control_points.assign(new_control)\n\n        # Calculate the final loss\n        loss = tf.reduce_mean(correct_class_distances - min_incorrect_distances)\n\n        return loss\n    \n    def compute_distance_to_curve_all_classes(self, embeddings):\n        P1 = self.centers_P1\n        P2 = self.centers_P2\n        control_points = self.control_points  # shape (num_classes, embedding_dim)\n\n        # Sample points along the curve\n        t = tf.linspace(0.0, 1.0, num=100)  # shape (100,)\n        t = tf.reshape(t, (100, 1, 1))  # reshape t to (100, 1, 1) for broadcasting\n\n        # Use quadratic Bézier interpolation formula to get points on the curve\n        curve_points = (1 - t) ** 2 * tf.expand_dims(P1, axis=0) + \\\n                       2 * (1 - t) * t * tf.expand_dims(control_points, axis=0) + \\\n                       t ** 2 * tf.expand_dims(P2, axis=0)\n\n        # Expand dims for broadcasting\n        embeddings = tf.expand_dims(embeddings, axis=1)  # shape (batch_size, 1, embedding_dim)\n\n        # Compute distances between embeddings and points on the curve for each class\n        distances = tf.norm(embeddings - curve_points, axis=-1)  # shape (batch_size, num_classes, 100)\n\n        # Get the minimum distance for each embedding to the curve\n        min_distances = tf.reduce_min(distances, axis=-1)  # shape (batch_size, num_classes)\n\n        return min_distances\n\n\n\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    inputs = layers.Input(shape=input_shape, name='input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(300, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(75, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for the inputs\n    embedding = embedding_model(inputs)\n\n    # Define logits for classification using the embedding\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding)\n    # logits = tf.keras.layers.Lambda(lambda x: x / 10)(logits)  # Example scaling\n    # logits = tf.keras.layers.Activation('softmax')(logits)\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding, labels_input])\n\n    # Define the full model with classification and center loss\n    full_model = models.Model(\n        inputs=[inputs, labels_input],\n        outputs=[logits, center_loss_output],\n        name='full_model'\n    )\n\n    return embedding_model, full_model\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(inputs, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            logits, center_loss = model([inputs, labels], training=True)\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, train_acc\n\n    @tf.function\n    def eval_step(inputs, labels):\n        logits, center_loss = model([inputs, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            inputs_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, class_loss, center_loss, acc = train_step(inputs_batch, labels_batch)\n            epoch_loss += loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_acc += acc\n        \n        epoch_loss /= len(X_train) // batch_size\n        epoch_class_loss /= len(X_train) // batch_size\n        epoch_center_loss /= len(X_train) // batch_size\n        epoch_acc /= len(X_train) // batch_size\n        \n        print(f\"Train Loss: {epoch_loss:.4f}, Class Loss: {epoch_class_loss:.4f}, Center Loss: {epoch_center_loss:.4f}, Acc: {epoch_acc:.4f}\")\n        \n        # Save training metrics\n        history[\"train_loss\"].append(epoch_loss)\n        history[\"train_class_loss\"].append(epoch_class_loss)\n        history[\"train_center_loss\"].append(epoch_center_loss)\n        history[\"train_acc\"].append(epoch_acc)\n        \n        # Validation loop\n        val_class_loss, val_center_loss, val_acc = 0, 0, 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            inputs_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            \n            class_loss, center_loss, acc = eval_step(inputs_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_acc += acc\n\n        val_class_loss /= len(X_val) // batch_size\n        val_center_loss /= len(X_val) // batch_size\n        val_acc /= len(X_val) // batch_size\n\n        print(f\"Val Class Loss: {val_class_loss:.4f}, Val Center Loss: {val_center_loss:.4f}, Val Acc: {val_acc:.4f}\")\n        \n        # Save validation metrics\n        history[\"val_class_loss\"].append(val_class_loss)\n        history[\"val_center_loss\"].append(val_center_loss)\n        history[\"val_acc\"].append(val_acc)\n\n    return history\n\n# Example usage with specified values\ninput_shape = (224, 224, 3)        # Input shape for images (224x224 RGB)\nnum_classes = 31                   # Number of classes in the dataset\nembedding_dim = 1024              # Dimensionality of the embedding space\ndropout_rate = 0.25                # Dropout rate for regularization\nweight_decay = 0.01            # L2 regularization weight\ncenter_loss_weight = 0.001          # Weight for center loss\nlearning_rate = 1e-4               # Learning rate for the optimizer\nbatch_size = 32                    # Batch size for training\nepochs = 20                        # Number of epochs to train\n\n# Build the model using VGG19 and center loss\nembedding_model, full_model = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\nhistory = train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-23T13:24:06.333772Z","iopub.execute_input":"2024-09-23T13:24:06.334181Z","iopub.status.idle":"2024-09-23T13:24:07.036361Z","shell.execute_reply.started":"2024-09-23T13:24:06.334143Z","shell.execute_reply":"2024-09-23T13:24:07.034685Z"},"trusted":true},"execution_count":28,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[28], line 290\u001b[0m\n\u001b[1;32m    287\u001b[0m epochs \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m20\u001b[39m                        \u001b[38;5;66;03m# Number of epochs to train\u001b[39;00m\n\u001b[1;32m    289\u001b[0m \u001b[38;5;66;03m# Build the model using VGG19 and center loss\u001b[39;00m\n\u001b[0;32m--> 290\u001b[0m embedding_model, full_model \u001b[38;5;241m=\u001b[39m \u001b[43mbuild_vgg19_center_loss\u001b[49m\u001b[43m(\u001b[49m\u001b[43minput_shape\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_classes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43membedding_dim\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdropout_rate\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweight_decay\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    291\u001b[0m history \u001b[38;5;241m=\u001b[39m train_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","Cell \u001b[0;32mIn[28], line 166\u001b[0m, in \u001b[0;36mbuild_vgg19_center_loss\u001b[0;34m(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\u001b[0m\n\u001b[1;32m    161\u001b[0m \u001b[38;5;66;03m# logits = tf.keras.layers.Lambda(lambda x: x / 10)(logits)  # Example scaling\u001b[39;00m\n\u001b[1;32m    162\u001b[0m \u001b[38;5;66;03m# logits = tf.keras.layers.Activation('softmax')(logits)\u001b[39;00m\n\u001b[1;32m    163\u001b[0m \n\u001b[1;32m    164\u001b[0m \u001b[38;5;66;03m# Define the custom center loss layer\u001b[39;00m\n\u001b[1;32m    165\u001b[0m center_loss_layer \u001b[38;5;241m=\u001b[39m CenterLossLayer(num_classes\u001b[38;5;241m=\u001b[39mnum_classes, embedding_dim\u001b[38;5;241m=\u001b[39membedding_dim)\n\u001b[0;32m--> 166\u001b[0m center_loss_output \u001b[38;5;241m=\u001b[39m \u001b[43mcenter_loss_layer\u001b[49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43membedding\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels_input\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    168\u001b[0m \u001b[38;5;66;03m# Define the full model with classification and center loss\u001b[39;00m\n\u001b[1;32m    169\u001b[0m full_model \u001b[38;5;241m=\u001b[39m models\u001b[38;5;241m.\u001b[39mModel(\n\u001b[1;32m    170\u001b[0m     inputs\u001b[38;5;241m=\u001b[39m[inputs, labels_input],\n\u001b[1;32m    171\u001b[0m     outputs\u001b[38;5;241m=\u001b[39m[logits, center_loss_output],\n\u001b[1;32m    172\u001b[0m     name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfull_model\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[1;32m    173\u001b[0m )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py:122\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    119\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m    120\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m    121\u001b[0m     \u001b[38;5;66;03m# `keras.config.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m--> 122\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n","Cell \u001b[0;32mIn[28], line 51\u001b[0m, in \u001b[0;36mCenterLossLayer.call\u001b[0;34m(self, inputs_and_labels)\u001b[0m\n\u001b[1;32m     49\u001b[0m batch_size \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mshape(inputs)[\u001b[38;5;241m0\u001b[39m]\n\u001b[1;32m     50\u001b[0m indices \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mstack([tf\u001b[38;5;241m.\u001b[39mrange(batch_size), labels], axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m---> 51\u001b[0m correct_class_distances \u001b[38;5;241m=\u001b[39m \u001b[43mtf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgather_nd\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmin_distances\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindices\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     53\u001b[0m \u001b[38;5;66;03m# Mask for excluding the correct class during incorrect class distance calculation\u001b[39;00m\n\u001b[1;32m     54\u001b[0m mask \u001b[38;5;241m=\u001b[39m tf\u001b[38;5;241m.\u001b[39mone_hot(labels, depth\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnum_classes)\n","\u001b[0;31mRuntimeError\u001b[0m: Exception encountered when calling CenterLossLayer.call().\n\n\u001b[1mCould not automatically infer the output shape / dtype of 'center_loss_layer_15' (of type CenterLossLayer). Either the `CenterLossLayer.call()` method is incorrect, or you need to implement the `CenterLossLayer.compute_output_spec() / compute_output_shape()` method. Error encountered:\n\nindices.shape[-1] must be <= params.rank, but saw indices shape: [?,2] and params shape: [100] for '{{node GatherNd}} = GatherNd[Tindices=DT_INT32, Tparams=DT_FLOAT](Min, stack)' with input shapes: [100], [?,2].\u001b[0m\n\nArguments received by CenterLossLayer.call():\n  • args=(['<KerasTensor shape=(None, 1024), dtype=float32, sparse=False, name=keras_tensor_532>', '<KerasTensor shape=(None, 31), dtype=float32, sparse=None, name=labels_input>'],)\n  • kwargs=<class 'inspect._empty'>"],"ename":"RuntimeError","evalue":"Exception encountered when calling CenterLossLayer.call().\n\n\u001b[1mCould not automatically infer the output shape / dtype of 'center_loss_layer_15' (of type CenterLossLayer). Either the `CenterLossLayer.call()` method is incorrect, or you need to implement the `CenterLossLayer.compute_output_spec() / compute_output_shape()` method. Error encountered:\n\nindices.shape[-1] must be <= params.rank, but saw indices shape: [?,2] and params shape: [100] for '{{node GatherNd}} = GatherNd[Tindices=DT_INT32, Tparams=DT_FLOAT](Min, stack)' with input shapes: [100], [?,2].\u001b[0m\n\nArguments received by CenterLossLayer.call():\n  • args=(['<KerasTensor shape=(None, 1024), dtype=float32, sparse=False, name=keras_tensor_532>', '<KerasTensor shape=(None, 31), dtype=float32, sparse=None, name=labels_input>'],)\n  • kwargs=<class 'inspect._empty'>","output_type":"error"}]}]}