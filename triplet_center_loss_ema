{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9394165,"sourceType":"datasetVersion","datasetId":5701259},{"sourceId":9430984,"sourceType":"datasetVersion","datasetId":5729649}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Adaptive Polynomial Curve Loss for Varied Distribution Clusters in Deep Face Recognition                                  \n* Adaptive Polynomial Curve Loss: The core idea of representing class centers as polynomial curves.\n* For Varied Distribution Clusters: Highlights the ability to handle complex, varied distributions within each class.\n* For Deep Face Recognition: Specifies the application area, making it clear that the approach is designed for deep face recognition tasks.","metadata":{}},{"cell_type":"markdown","source":"# 1. Dataset                                                                                   ","metadata":{}},{"cell_type":"code","source":"# Set directories\nimport os\nws_dir = '/kaggle/input'\ndataset_dir = os.path.join(ws_dir, 'dataset01')\nfaces_dir = os.path.join(dataset_dir, 'faces')","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:41:40.551447Z","iopub.execute_input":"2024-09-22T19:41:40.551734Z","iopub.status.idle":"2024-09-22T19:41:40.562709Z","shell.execute_reply.started":"2024-09-22T19:41:40.551700Z","shell.execute_reply":"2024-09-22T19:41:40.561703Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"dataset_dir","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:41:47.865153Z","iopub.execute_input":"2024-09-22T19:41:47.865577Z","iopub.status.idle":"2024-09-22T19:41:47.872902Z","shell.execute_reply.started":"2024-09-22T19:41:47.865535Z","shell.execute_reply":"2024-09-22T19:41:47.871843Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"'/kaggle/input/dataset01'"},"metadata":{}}]},{"cell_type":"code","source":"import cv2\nimport numpy as np\n\nimages = []\nlabels = []\n\n# Loop over each person directory in the faces directory\nfor person_name in os.listdir(faces_dir):\n    person_dir = os.path.join(faces_dir, person_name)\n\n    # Check if it is a directory (and not a file)\n    if os.path.isdir(person_dir):\n        # Loop over each image in the person's directory\n        for image_name in os.listdir(person_dir):\n            image_path = os.path.join(person_dir, image_name)\n\n            # Load image using OpenCV\n            image = cv2.imread(image_path)\n\n            # Optionally resize images to a standard size (e.g., 224x224)\n            image = cv2.resize(image, (224, 224))\n\n            # Convert the image to RGB (OpenCV loads images in BGR format by default)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n            # Append image and corresponding label to lists\n            images.append(image)\n            labels.append(person_name)  # The person's name is used as the label\n\n# Convert lists to NumPy arrays\nimages_np = np.array(images)\nlabels_np = np.array(labels)\n\n# Verify the shapes\nprint(f'Images shape: {images_np.shape}')  # (num_images, 224, 224, 3)\nprint(f'Labels shape: {labels_np.shape}')  # (num_images,)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:41:49.384616Z","iopub.execute_input":"2024-09-22T19:41:49.385183Z","iopub.status.idle":"2024-09-22T19:42:10.324825Z","shell.execute_reply.started":"2024-09-22T19:41:49.385122Z","shell.execute_reply":"2024-09-22T19:42:10.323722Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Images shape: (2562, 224, 224, 3)\nLabels shape: (2562,)\n","output_type":"stream"}]},{"cell_type":"code","source":"from tensorflow.keras.applications.vgg19 import preprocess_input\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nimport numpy as np\n\n# Assuming images_np and labels_np are provided\n# images_np.shape = (num_samples, height, width, channels)\n# labels_np.shape = (num_samples,)\n\n# Preprocess images for VGG19\nimages_np_preprocessed = preprocess_input(images_np)\n\n# One-hot encode labels\none_hot_encoder = OneHotEncoder(sparse=False)\nlabels_np_onehot = one_hot_encoder.fit_transform(labels_np.reshape(-1, 1))\n\n# Split into training, validation, and test sets\nX_train, X_temp, y_train, y_temp = train_test_split(images_np_preprocessed, labels_np_onehot, test_size=0.3, random_state=42)\nX_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)\n\nprint(f\"Train set: {X_train.shape}, {y_train.shape}\")\nprint(f\"Validation set: {X_val.shape}, {y_val.shape}\")\nprint(f\"Test set: {X_test.shape}, {y_test.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:42:12.961961Z","iopub.execute_input":"2024-09-22T19:42:12.962295Z","iopub.status.idle":"2024-09-22T19:42:35.062985Z","shell.execute_reply.started":"2024-09-22T19:42:12.962262Z","shell.execute_reply":"2024-09-22T19:42:35.061936Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Train set: (1793, 224, 224, 3), (1793, 31)\nValidation set: (384, 224, 224, 3), (384, 31)\nTest set: (385, 224, 224, 3), (385, 31)\n","output_type":"stream"}]},{"cell_type":"code","source":"y_train[0]","metadata":{"execution":{"iopub.status.busy":"2024-09-16T23:08:15.997602Z","iopub.execute_input":"2024-09-16T23:08:15.998332Z","iopub.status.idle":"2024-09-16T23:08:16.008007Z","shell.execute_reply.started":"2024-09-16T23:08:15.998275Z","shell.execute_reply":"2024-09-16T23:08:16.006662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Softmax loss","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.layers import Flatten\nfrom tensorflow.keras.applications import VGG19\n\n# Build the model with softmax classifier\ndef build_vgg19_softmax(input_shape, num_classes):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    inputs = layers.Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout, using 'swish' as the activation function\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dense(643, activation='swish')(x)\n\n    # Add the softmax classification layer\n    outputs = layers.Dense(num_classes, activation='softmax')(x)\n\n    model = models.Model(inputs=inputs, outputs=outputs)\n    return model\n\n# Specify input shape and number of classes\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes (31 in your case)\n\n# Build the VGG19 model with softmax classifier\nmodel = build_vgg19_softmax(input_shape, num_classes)\n\n# Compile the model with CategoricalCrossentropy loss\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001), \n              loss=tf.keras.losses.CategoricalCrossentropy(), \n              metrics=['accuracy'])\n\n#model.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:42:39.720931Z","iopub.execute_input":"2024-09-22T19:42:39.721848Z","iopub.status.idle":"2024-09-22T19:42:42.628170Z","shell.execute_reply.started":"2024-09-22T19:42:39.721806Z","shell.execute_reply":"2024-09-22T19:42:42.626865Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m80134624/80134624\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[5], line 34\u001b[0m\n\u001b[1;32m     31\u001b[0m num_classes \u001b[38;5;241m=\u001b[39m y_train\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m]   \u001b[38;5;66;03m# Number of unique classes (31 in your case)\u001b[39;00m\n\u001b[1;32m     33\u001b[0m \u001b[38;5;66;03m# Build the VGG19 model with softmax classifier\u001b[39;00m\n\u001b[0;32m---> 34\u001b[0m model \u001b[38;5;241m=\u001b[39m \u001b[43mbuild_vgg19_softmax\u001b[49m\u001b[43m(\u001b[49m\u001b[43minput_shape\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_classes\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     36\u001b[0m \u001b[38;5;66;03m# Compile the model with CategoricalCrossentropy loss\u001b[39;00m\n\u001b[1;32m     37\u001b[0m model\u001b[38;5;241m.\u001b[39mcompile(optimizer\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mkeras\u001b[38;5;241m.\u001b[39moptimizers\u001b[38;5;241m.\u001b[39mRMSprop(learning_rate\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.001\u001b[39m), \n\u001b[1;32m     38\u001b[0m               loss\u001b[38;5;241m=\u001b[39mtf\u001b[38;5;241m.\u001b[39mkeras\u001b[38;5;241m.\u001b[39mlosses\u001b[38;5;241m.\u001b[39mCategoricalCrossentropy(), \n\u001b[1;32m     39\u001b[0m               metrics\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m'\u001b[39m])\n","Cell \u001b[0;32mIn[5], line 16\u001b[0m, in \u001b[0;36mbuild_vgg19_softmax\u001b[0;34m(input_shape, num_classes)\u001b[0m\n\u001b[1;32m     13\u001b[0m x \u001b[38;5;241m=\u001b[39m layers\u001b[38;5;241m.\u001b[39mFlatten()(x)\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# Add dense layers with L2 regularization and Dropout, using 'swish' as the activation function\u001b[39;00m\n\u001b[0;32m---> 16\u001b[0m x \u001b[38;5;241m=\u001b[39m layers\u001b[38;5;241m.\u001b[39mDense(\u001b[38;5;241m1231\u001b[39m, activation\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mswish\u001b[39m\u001b[38;5;124m'\u001b[39m, kernel_regularizer\u001b[38;5;241m=\u001b[39m\u001b[43ml2\u001b[49m(weight_decay))(x)\n\u001b[1;32m     17\u001b[0m x \u001b[38;5;241m=\u001b[39m layers\u001b[38;5;241m.\u001b[39mDropout(dropout_rate)(x)\n\u001b[1;32m     18\u001b[0m x \u001b[38;5;241m=\u001b[39m layers\u001b[38;5;241m.\u001b[39mDense(\u001b[38;5;241m987\u001b[39m, activation\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mswish\u001b[39m\u001b[38;5;124m'\u001b[39m, kernel_regularizer\u001b[38;5;241m=\u001b[39ml2(weight_decay))(x)\n","\u001b[0;31mNameError\u001b[0m: name 'l2' is not defined"],"ename":"NameError","evalue":"name 'l2' is not defined","output_type":"error"}]},{"cell_type":"code","source":"# Training the model\n# Training the model\nhistory = model.fit(\n    X_train,  # Input images\n    y_train,  # One-hot encoded labels\n    validation_data=(X_val, y_val),  # Validation data\n    epochs=25,\n    batch_size=32\n)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T12:05:32.050476Z","iopub.execute_input":"2024-09-17T12:05:32.050862Z","iopub.status.idle":"2024-09-17T12:10:37.920619Z","shell.execute_reply.started":"2024-09-17T12:05:32.050827Z","shell.execute_reply":"2024-09-17T12:10:37.919599Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history.history","metadata":{"execution":{"iopub.status.busy":"2024-09-17T12:11:03.428537Z","iopub.execute_input":"2024-09-17T12:11:03.429310Z","iopub.status.idle":"2024-09-17T12:11:03.436680Z","shell.execute_reply.started":"2024-09-17T12:11:03.429269Z","shell.execute_reply":"2024-09-17T12:11:03.435695Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Create a figure with two subplots side by side\nfig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\n# Plot training and validation accuracy on the first subplot\naxs[0].plot(history.history['accuracy'], label='Training Accuracy')\nif 'val_accuracy' in history.history:\n    axs[0].plot(history.history['val_accuracy'], label='Validation Accuracy')\naxs[0].set_title('Training and Validation Accuracy')\naxs[0].set_xlabel('Epochs')\naxs[0].set_ylabel('Accuracy')\naxs[0].legend(loc='lower right')\naxs[0].grid(True)\n\n# Plot training and validation loss on the second subplot\naxs[1].plot(history.history['loss'], label='Training Loss')\naxs[1].plot(history.history['val_loss'], label='Validation Loss')\naxs[1].set_title('Training and Validation Loss')\naxs[1].set_xlabel('Epochs')\naxs[1].set_ylabel('Loss')\naxs[1].legend(loc='upper right')\naxs[1].grid(True)\n\n# Display the plots\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-17T12:12:08.097936Z","iopub.execute_input":"2024-09-17T12:12:08.098574Z","iopub.status.idle":"2024-09-17T12:12:08.659380Z","shell.execute_reply.started":"2024-09-17T12:12:08.098533Z","shell.execute_reply":"2024-09-17T12:12:08.657731Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Center Loss","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.layers import Flatten\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.regularizers import l2\n\nclass CenterLossLayer(layers.Layer):\n    def __init__(self, num_classes, embedding_dim, alpha=0.5, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.alpha = alpha  # Learning rate for updating the centers\n\n    def build(self, input_shape):\n        self.centers = self.add_weight(\n            shape=(self.num_classes, self.embedding_dim),\n            initializer='uniform',\n            trainable=False,\n            name='centers'\n        )\n\n    def call(self, inputs, labels):\n        labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer\n        centers_batch = tf.gather(self.centers, labels)  # Get the corresponding center for each label\n        center_loss = tf.reduce_mean(tf.square(inputs - centers_batch))  # Euclidean distance between embeddings and centers\n        \n        # Update the centers manually during training\n        diff = centers_batch - inputs\n        unique_labels, unique_idx = tf.unique(labels)\n        updates = tf.tensor_scatter_nd_add(self.centers, tf.expand_dims(unique_labels, 1), self.alpha * diff)\n        \n        return center_loss\n\n# Helper function to compute nearest center accuracy\ndef compute_accuracy(embeddings, labels, centers):\n    distances = tf.norm(embeddings[:, None] - centers, axis=-1)  # Compute the Euclidean distance to each center\n    predicted_labels = tf.argmin(distances, axis=1)  # Find the nearest center\n    true_labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer\n    accuracy = tf.reduce_mean(tf.cast(tf.equal(predicted_labels, true_labels), tf.float32))\n    return accuracy\n\n# Inside the train_step and eval_step functions\n@tf.function\ndef train_step(images, labels, model, center_loss_weight, optimizer):\n    with tf.GradientTape() as tape:\n        embeddings, center_loss = model([images, labels], training=True)\n        loss = center_loss_weight * center_loss\n\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    \n    # Fetch centers by the correct name\n    centers = model.get_layer('center_loss').centers\n    accuracy = compute_accuracy(embeddings, labels, centers)\n    \n    return loss, accuracy\n\n@tf.function\ndef eval_step(images, labels, model, center_loss_weight):\n    embeddings, center_loss = model([images, labels], training=False)\n    loss = center_loss_weight * center_loss\n    \n    # Fetch centers by the correct name\n    centers = model.get_layer('center_loss').centers\n    accuracy = compute_accuracy(embeddings, labels, centers)\n    \n    return loss, accuracy\n\n\n# Training and evaluation\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.RMSprop(learning_rate=learning_rate)\n    \n    num_samples = X_train.shape[0]\n    steps_per_epoch = num_samples // batch_size\n\n    # Lists to store metrics\n    train_loss_history = []\n    train_acc_history = []\n    val_loss_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for step in range(steps_per_epoch):\n            batch_start = step * batch_size\n            batch_end = (step + 1) * batch_size\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, acc = train_step(images_batch, labels_batch, model, center_loss_weight, optimizer)\n            epoch_loss += loss\n            epoch_acc += acc\n        \n        epoch_loss /= steps_per_epoch\n        epoch_acc /= steps_per_epoch\n        train_loss_history.append(epoch_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        print(f\"Epoch {epoch + 1}/{epochs}, Loss: {epoch_loss.numpy()}, Accuracy: {epoch_acc.numpy()}\")\n\n        # Validation step\n        val_loss, val_acc = eval_step(X_val, y_val, model, center_loss_weight)\n        val_loss_history.append(val_loss.numpy())\n        val_acc_history.append(val_acc.numpy())\n        print(f\"Validation Loss: {val_loss.numpy()}, Validation Accuracy: {val_acc.numpy()}\")\n\n    # Plot training and validation loss and accuracy\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Training Loss')\n    plt.plot(val_loss_history, label='Validation Loss')\n    plt.title('Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.subplot(1, 2, 2)\n    plt.plot(train_acc_history, label='Training Accuracy')\n    plt.plot(val_acc_history, label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n\n    plt.show()\n\n# Build the VGG19 model with only Center Loss\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate=0.5, weight_decay=1e-4):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    inputs = layers.Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout, using 'swish' as the activation function\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dense(643, activation='swish')(x)\n    \n    # Add dense layers for embedding\n    embeddings = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=l2(weight_decay), name='embeddings')(x)\n    \n    # Compute the center loss\n    labels = layers.Input(shape=(num_classes,))    \n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim, name='center_loss')  # Explicitly name the layer\n    center_loss_output = center_loss_layer(embeddings, labels)\n\n    model = models.Model(inputs=[inputs, labels], outputs=[embeddings, center_loss_output])\n    \n    return model\n\n\n# Model parameters\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes\nembedding_dim = 512  # Dimension of the embedding space\ncenter_loss_weight = 1.0  # Use only center loss, so set it to 1.0\nlearning_rate = 0.001\nbatch_size = 32\nepochs = 25\ndropout_rate = 0.1\nweight_decay = 1e-4\n\n# Build the model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\n# Train the model\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:42:49.626135Z","iopub.execute_input":"2024-09-22T19:42:49.626511Z","iopub.status.idle":"2024-09-22T19:49:12.068100Z","shell.execute_reply.started":"2024-09-22T19:42:49.626476Z","shell.execute_reply":"2024-09-22T19:49:12.067103Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Epoch 1/25, Loss: 0.6029617190361023, Accuracy: 0.03069196455180645\nValidation Loss: 0.0008550965576432645, Validation Accuracy: 0.0234375\nEpoch 2/25, Loss: 0.0008486423757858574, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008337036706507206, Validation Accuracy: 0.0234375\nEpoch 3/25, Loss: 0.0008347932598553598, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008319852058775723, Validation Accuracy: 0.0234375\nEpoch 4/25, Loss: 0.0008318942855112255, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008316528983414173, Validation Accuracy: 0.0234375\nEpoch 5/25, Loss: 0.0008315617451444268, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008314833976328373, Validation Accuracy: 0.0234375\nEpoch 6/25, Loss: 0.0008311442215926945, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008313916623592377, Validation Accuracy: 0.0234375\nEpoch 7/25, Loss: 0.0008310201810672879, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008313303696922958, Validation Accuracy: 0.0234375\nEpoch 8/25, Loss: 0.0008308854885399342, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008312853169627488, Validation Accuracy: 0.0234375\nEpoch 9/25, Loss: 0.0008303440408781171, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008312218706123531, Validation Accuracy: 0.0234375\nEpoch 10/25, Loss: 0.0008304723305627704, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008311733254231513, Validation Accuracy: 0.0234375\nEpoch 11/25, Loss: 0.0008304358343593776, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008311234414577484, Validation Accuracy: 0.0234375\nEpoch 12/25, Loss: 0.0008301967172883451, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008311044075526297, Validation Accuracy: 0.0234375\nEpoch 13/25, Loss: 0.0008304367074742913, Accuracy: 0.0223214291036129\nValidation Loss: 0.000831086013931781, Validation Accuracy: 0.0234375\nEpoch 14/25, Loss: 0.0008302467176690698, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008310652337968349, Validation Accuracy: 0.0234375\nEpoch 15/25, Loss: 0.0008302709902636707, Accuracy: 0.0223214291036129\nValidation Loss: 0.000831036304589361, Validation Accuracy: 0.0234375\nEpoch 16/25, Loss: 0.0008302754140459001, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008310340344905853, Validation Accuracy: 0.0234375\nEpoch 17/25, Loss: 0.0008302260539494455, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008310247794725001, Validation Accuracy: 0.0234375\nEpoch 18/25, Loss: 0.0008302471833303571, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008310095872730017, Validation Accuracy: 0.0234375\nEpoch 19/25, Loss: 0.0008303692447952926, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309862460009754, Validation Accuracy: 0.0234375\nEpoch 20/25, Loss: 0.0008300705812871456, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309655822813511, Validation Accuracy: 0.0234375\nEpoch 21/25, Loss: 0.000830005097668618, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309438708238304, Validation Accuracy: 0.0234375\nEpoch 22/25, Loss: 0.0008300691260956228, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309413096867502, Validation Accuracy: 0.0234375\nEpoch 23/25, Loss: 0.0008299797191284597, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309418335556984, Validation Accuracy: 0.0234375\nEpoch 24/25, Loss: 0.000830134202260524, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309204131364822, Validation Accuracy: 0.0234375\nEpoch 25/25, Loss: 0.000830464472528547, Accuracy: 0.0223214291036129\nValidation Loss: 0.0008309411932714283, Validation Accuracy: 0.0234375\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Center Loss + SoftMax","metadata":{}},{"cell_type":"markdown","source":"### A. VGG19","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.layers import Flatten\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.regularizers import l2\n\nclass CenterLossLayer(layers.Layer):\n    def __init__(self, num_classes, embedding_dim, alpha=0.5, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.alpha = alpha  # Learning rate for updating the centers\n\n    def build(self, input_shape):\n        self.centers = self.add_weight(\n            shape=(self.num_classes, self.embedding_dim),\n            initializer='uniform',\n            trainable=False,\n            name='centers'\n        )\n\n    def call(self, inputs, labels):\n        labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer\n        centers_batch = tf.gather(self.centers, labels)  # Get the corresponding center for each label\n        center_loss = tf.reduce_mean(tf.square(inputs - centers_batch))  # Euclidean distance between embeddings and centers\n        \n        # Update the centers manually during training\n        diff = centers_batch - inputs\n        unique_labels, unique_idx = tf.unique(labels)\n        updates = tf.tensor_scatter_nd_add(self.centers, tf.expand_dims(unique_labels, 1), self.alpha * diff)\n        \n        return center_loss\n\n\n# Define custom training step\n@tf.function\ndef train_step(images, labels, model, loss_object, center_loss_weight, optimizer):\n    with tf.GradientTape() as tape:\n        predictions, center_loss = model([images, labels], training=True)\n        loss = loss_object(labels, predictions) + center_loss_weight * center_loss\n\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    \n    # Calculate accuracy\n    acc = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(predictions, axis=1), tf.argmax(labels, axis=1)), tf.float32))\n    \n    return loss, acc\n\n# Define custom evaluation step\n@tf.function\ndef eval_step(images, labels, model, loss_object, center_loss_weight):\n    predictions, center_loss = model([images, labels], training=False)\n    loss = loss_object(labels, predictions) + center_loss_weight * center_loss\n    \n    # Calculate accuracy\n    acc = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(predictions, axis=1), tf.argmax(labels, axis=1)), tf.float32))\n    \n    return loss, acc\n\n# Training and evaluation\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.RMSprop(learning_rate=learning_rate)\n    loss_object = tf.keras.losses.CategoricalCrossentropy()\n    \n    num_samples = X_train.shape[0]\n    steps_per_epoch = num_samples // batch_size\n\n    # Lists to store metrics\n    train_loss_history = []\n    train_acc_history = []\n    val_loss_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for step in range(steps_per_epoch):\n            batch_start = step * batch_size\n            batch_end = (step + 1) * batch_size\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, acc = train_step(images_batch, labels_batch, model, loss_object, center_loss_weight, optimizer)\n            epoch_loss += loss\n            epoch_acc += acc\n        \n        epoch_loss /= steps_per_epoch\n        epoch_acc /= steps_per_epoch\n        train_loss_history.append(epoch_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        print(f\"Epoch {epoch + 1}/{epochs}, Loss: {epoch_loss.numpy()}, Accuracy: {epoch_acc.numpy()}\")\n\n        # Validation step\n        val_loss, val_acc = eval_step(X_val, y_val, model, loss_object, center_loss_weight)\n        val_loss_history.append(val_loss.numpy())\n        val_acc_history.append(val_acc.numpy())\n        print(f\"Validation Loss: {val_loss.numpy()}, Validation Accuracy: {val_acc.numpy()}\")\n\n    # Plot training and validation loss and accuracy\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Training Loss')\n    plt.plot(val_loss_history, label='Validation Loss')\n    plt.title('Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.subplot(1, 2, 2)\n    plt.plot(train_acc_history, label='Training Accuracy')\n    plt.plot(val_acc_history, label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n\n    plt.show()\n\n# Build the VGG19 model with Center Loss using Swish activation\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate=0.5, weight_decay=1e-4):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    inputs = layers.Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout, using 'swish' as the activation function\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dense(643, activation='swish')(x)\n    \n    # Add dense layers for embedding with a name\n    embeddings = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=l2(weight_decay), name='embeddings')(x)\n    \n    # Compute the center loss\n    labels = layers.Input(shape=(num_classes,))\n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim)\n    center_loss_output = center_loss_layer(embeddings, labels)\n    \n    # Add a softmax classification layer\n    softmax_output = layers.Dense(num_classes, activation='softmax', name='softmax_output')(embeddings)\n    \n    model = models.Model(inputs=[inputs, labels], outputs=[softmax_output, center_loss_output])\n    \n    return model\n\n\n\n# Model parameters\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes\nembedding_dim = 512  # Dimension of the embedding space\ncenter_loss_weight = 0.5  # Weight for the center loss\nlearning_rate = 0.001\nbatch_size = 32\nepochs = 25\ndropout_rate = 0.1\nweight_decay = 1e-4\n\n# Build the model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\n# Train the model\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:52:26.946203Z","iopub.execute_input":"2024-09-22T19:52:26.946645Z","iopub.status.idle":"2024-09-22T19:58:12.894263Z","shell.execute_reply.started":"2024-09-22T19:52:26.946608Z","shell.execute_reply":"2024-09-22T19:58:12.893325Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Epoch 1/25, Loss: 6.302154541015625, Accuracy: 0.2103794664144516\nValidation Loss: 2.3443257808685303, Validation Accuracy: 0.3151041567325592\nEpoch 2/25, Loss: 2.0277369022369385, Accuracy: 0.4508928656578064\nValidation Loss: 1.7357701063156128, Validation Accuracy: 0.515625\nEpoch 3/25, Loss: 1.2940088510513306, Accuracy: 0.6752232313156128\nValidation Loss: 1.822733998298645, Validation Accuracy: 0.5416666865348816\nEpoch 4/25, Loss: 0.8078454732894897, Accuracy: 0.8191964030265808\nValidation Loss: 1.334459900856018, Validation Accuracy: 0.6796875\nEpoch 5/25, Loss: 0.5450558662414551, Accuracy: 0.8822544813156128\nValidation Loss: 1.3388681411743164, Validation Accuracy: 0.6927083134651184\nEpoch 6/25, Loss: 0.3891371190547943, Accuracy: 0.9274553656578064\nValidation Loss: 1.5425649881362915, Validation Accuracy: 0.6510416865348816\nEpoch 7/25, Loss: 0.19832062721252441, Accuracy: 0.9720982313156128\nValidation Loss: 1.3613041639328003, Validation Accuracy: 0.7083333134651184\nEpoch 8/25, Loss: 0.21783198416233063, Accuracy: 0.9614955186843872\nValidation Loss: 1.3376189470291138, Validation Accuracy: 0.7135416865348816\nEpoch 9/25, Loss: 0.23412291705608368, Accuracy: 0.9614955186843872\nValidation Loss: 1.5544201135635376, Validation Accuracy: 0.6822916865348816\nEpoch 10/25, Loss: 0.13223743438720703, Accuracy: 0.9821428656578064\nValidation Loss: 1.7053180932998657, Validation Accuracy: 0.6510416865348816\nEpoch 11/25, Loss: 0.17059724032878876, Accuracy: 0.9709821343421936\nValidation Loss: 1.5925852060317993, Validation Accuracy: 0.7109375\nEpoch 12/25, Loss: 0.13225150108337402, Accuracy: 0.984375\nValidation Loss: 1.5307226181030273, Validation Accuracy: 0.703125\nEpoch 13/25, Loss: 0.11185111850500107, Accuracy: 0.9849330186843872\nValidation Loss: 1.4937251806259155, Validation Accuracy: 0.7083333134651184\nEpoch 14/25, Loss: 0.13237471878528595, Accuracy: 0.9793526530265808\nValidation Loss: 1.6594107151031494, Validation Accuracy: 0.6822916865348816\nEpoch 15/25, Loss: 0.08383496850728989, Accuracy: 0.9905133843421936\nValidation Loss: 1.45578932762146, Validation Accuracy: 0.7005208134651184\nEpoch 16/25, Loss: 0.05847078189253807, Accuracy: 0.9955357313156128\nValidation Loss: 1.5109328031539917, Validation Accuracy: 0.7369791865348816\nEpoch 17/25, Loss: 0.09223537147045135, Accuracy: 0.9899553656578064\nValidation Loss: 1.8260526657104492, Validation Accuracy: 0.7083333134651184\nEpoch 18/25, Loss: 0.06047503277659416, Accuracy: 0.9938616156578064\nValidation Loss: 1.648836374282837, Validation Accuracy: 0.7473958134651184\nEpoch 19/25, Loss: 0.08738555759191513, Accuracy: 0.9888392686843872\nValidation Loss: 1.6014436483383179, Validation Accuracy: 0.71875\nEpoch 20/25, Loss: 0.06629540026187897, Accuracy: 0.9921875\nValidation Loss: 1.8930872678756714, Validation Accuracy: 0.7135416865348816\nEpoch 21/25, Loss: 0.09143112599849701, Accuracy: 0.9860491156578064\nValidation Loss: 1.435417890548706, Validation Accuracy: 0.7369791865348816\nEpoch 22/25, Loss: 0.05113090202212334, Accuracy: 0.9927455186843872\nValidation Loss: 1.8048619031906128, Validation Accuracy: 0.6953125\nEpoch 23/25, Loss: 0.07216145098209381, Accuracy: 0.9905133843421936\nValidation Loss: 1.7232799530029297, Validation Accuracy: 0.7239583134651184\nEpoch 24/25, Loss: 0.04324398562312126, Accuracy: 0.9955357313156128\nValidation Loss: 1.4510148763656616, Validation Accuracy: 0.7630208134651184\nEpoch 25/25, Loss: 0.0440215989947319, Accuracy: 0.99609375\nValidation Loss: 1.721418857574463, Validation Accuracy: 0.71875\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"### B. Embeddings","metadata":{}},{"cell_type":"code","source":"# After training, create the embedding model\nembedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\nembedding_model.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:58:27.603956Z","iopub.execute_input":"2024-09-22T19:58:27.604696Z","iopub.status.idle":"2024-09-22T19:58:27.635292Z","shell.execute_reply.started":"2024-09-22T19:58:27.604652Z","shell.execute_reply":"2024-09-22T19:58:27.634378Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_5\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_5\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_6 (\u001b[38;5;33mInputLayer\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ vgg19 (\u001b[38;5;33mFunctional\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │    \u001b[38;5;34m20,024,384\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_2 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1231\u001b[0m)           │    \u001b[38;5;34m30,884,559\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1231\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m987\u001b[0m)            │     \u001b[38;5;34m1,215,984\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m987\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1003\u001b[0m)           │       \u001b[38;5;34m990,964\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m643\u001b[0m)            │       \u001b[38;5;34m645,572\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ embeddings (\u001b[38;5;33mDense\u001b[0m)              │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │       \u001b[38;5;34m329,728\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ vgg19 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │    <span style=\"color: #00af00; text-decoration-color: #00af00\">20,024,384</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1231</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">30,884,559</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1231</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_5 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">987</span>)            │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,215,984</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">987</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_6 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1003</span>)           │       <span style=\"color: #00af00; text-decoration-color: #00af00\">990,964</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_7 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">643</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">645,572</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ embeddings (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)              │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">329,728</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m54,091,191\u001b[0m (206.34 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">54,091,191</span> (206.34 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m34,066,807\u001b[0m (129.95 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">34,066,807</span> (129.95 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m20,024,384\u001b[0m (76.39 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">20,024,384</span> (76.39 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"\n# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed)","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:58:29.840367Z","iopub.execute_input":"2024-09-22T19:58:29.840771Z","iopub.status.idle":"2024-09-22T19:59:03.570501Z","shell.execute_reply.started":"2024-09-22T19:58:29.840735Z","shell.execute_reply":"2024-09-22T19:59:03.569308Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1727035114.430911     108 service.cc:145] XLA service 0x7a9fd8197970 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1727035114.430966     108 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1727035114.430970     108 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m 2/81\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m11s\u001b[0m 148ms/step","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1727035127.944675     108 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m81/81\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 193ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)\n\n# Define marker styles for each class\nmarkers = ['o', 's', '^', 'D', 'v', '<', '>', 'P', '*', '+', 'x', '|', '_']\nunique_labels = np.unique(numeric_labels)\nlabel_to_marker = {label: markers[i % len(markers)] for i, label in enumerate(unique_labels)}\n\n# Plot the 2D embeddings with color based on numeric labels and different markers for each class\nplt.figure(figsize=(10, 10))\nfor label in unique_labels:\n    indices = np.where(numeric_labels == label)[0]\n    plt.scatter(embeddings_2d[indices, 0], embeddings_2d[indices, 1],\n                marker=label_to_marker[label], label=label_encoder.classes_[label],\n                s=50)  # Adjust `s` for marker size\n\n# Move the legend to the left of the plot\nplt.legend(title=\"Person\", bbox_to_anchor=(-0.2, 1), loc='upper left')\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with Different Markers')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T19:59:17.094879Z","iopub.execute_input":"2024-09-22T19:59:17.095256Z","iopub.status.idle":"2024-09-22T19:59:27.232952Z","shell.execute_reply.started":"2024-09-22T19:59:17.095219Z","shell.execute_reply":"2024-09-22T19:59:27.231983Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\nfrom matplotlib import cm\nfrom matplotlib.colors import ListedColormap\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)  # Use your actual embeddings here\n\n# Create a custom color map to support 31 classes\ncolors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n\n# Plot the 2D embeddings with color based on numeric labels\nplt.figure(figsize=(10, 10))\nscatter = plt.scatter(embeddings_2d[:, 0], embeddings_2d[:, 1], \n                      c=numeric_labels, cmap=colors, s=20)  # Decreased marker size (s=20)\n\n# Add a color legend\nlegend1 = plt.legend(*scatter.legend_elements(), title=\"Person\")\nplt.gca().add_artist(legend1)\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings (Color-coded)')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T20:03:01.959453Z","iopub.execute_input":"2024-09-22T20:03:01.960502Z","iopub.status.idle":"2024-09-22T20:03:11.503306Z","shell.execute_reply.started":"2024-09-22T20:03:01.960453Z","shell.execute_reply":"2024-09-22T20:03:11.502404Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/3571259363.py:21: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  colors = cm.get_cmap('tab20b', 31)  # 'tab20b' offers a distinct palette; we can define 31 colors explicitly\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## Advanced Center Loss","metadata":{}},{"cell_type":"code","source":"y_train[0]","metadata":{"execution":{"iopub.status.busy":"2024-09-17T22:00:01.132128Z","iopub.execute_input":"2024-09-17T22:00:01.132794Z","iopub.status.idle":"2024-09-17T22:00:01.139881Z","shell.execute_reply.started":"2024-09-17T22:00:01.132753Z","shell.execute_reply":"2024-09-17T22:00:01.138766Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n        \n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Model Building Function\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    base_model = tf.keras.applications.VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(643, activation='swish')(x)\n    \n    embeddings = layers.Dense(embedding_dim, activation=None,name='embeddings')(x)\n    logits = layers.Dense(num_classes, activation='softmax')(embeddings)\n    \n    inputs = base_model.input\n    labels = layers.Input(shape=(num_classes,))\n    \n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim, name='center_loss')\n    center_loss_output = center_loss_layer([embeddings, labels])\n    \n    model = models.Model(inputs=[inputs, labels], outputs=[logits, center_loss_output])\n    return model\n\n# Training and Evaluation Function\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n    \n    @tf.function\n    def train_step(images, labels):\n        with tf.GradientTape() as tape:\n            logits, center_loss = model([images, labels], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = classification_loss + center_loss_weight * center_loss\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n        \n        # Calculate accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return total_loss, classification_loss, train_acc\n\n    @tf.function\n    def eval_step(images, labels):\n        logits, center_loss = model([images, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        return classification_loss, center_loss, accuracy\n\n    train_loss_history = []\n    val_loss_history = []\n    train_acc_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            loss, _, acc = train_step(images_batch, labels_batch)\n            epoch_loss += loss\n            epoch_acc += acc\n\n        val_loss = 0\n        val_acc = 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            images_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            loss, _, acc = eval_step(images_batch, labels_batch)\n            val_loss += loss\n            val_acc += acc\n\n        train_loss_history.append(epoch_loss.numpy())\n        val_loss_history.append(val_loss.numpy())\n        train_acc_history.append((epoch_acc / (len(X_train) // batch_size)).numpy())\n        val_acc_history.append((val_acc / (len(X_val) // batch_size)).numpy())\n\n        print(f\"Epoch {epoch + 1}/{epochs}, Train Loss: {epoch_loss.numpy()}, Train Accuracy: {train_acc_history[-1] * 100:.2f}%, Val Loss: {val_loss.numpy()}, Val Accuracy: {val_acc_history[-1] * 100:.2f}%\")\n\n    # Plot loss and accuracy\n    plt.figure(figsize=(12, 5))\n    \n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Train Loss')\n    plt.plot(val_loss_history, label='Val Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.plot([acc * 100 for acc in train_acc_history], label='Train Accuracy')\n    plt.plot([acc * 100 for acc in val_acc_history], label='Val Accuracy')\n    plt.ylim(0, 100)\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n\n    plt.show()\n\n# Parameters\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 128\ndropout_rate = 0.1\nweight_decay = 1e-4\nbatch_size = 32\nepochs = 20\ncenter_loss_weight = 0.5\nlearning_rate = 1e-4\n\n# Build and Train the Model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T20:03:40.880358Z","iopub.execute_input":"2024-09-22T20:03:40.881225Z","iopub.status.idle":"2024-09-22T20:15:03.021333Z","shell.execute_reply.started":"2024-09-22T20:03:40.881185Z","shell.execute_reply":"2024-09-22T20:15:03.020137Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Epoch 1/20, Train Loss: 181.62445068359375, Train Accuracy: 13.06%, Val Loss: 31.274614334106445, Val Accuracy: 23.70%\nEpoch 2/20, Train Loss: 117.6116943359375, Train Accuracy: 38.45%, Val Loss: 20.54998779296875, Val Accuracy: 49.48%\nEpoch 3/20, Train Loss: 74.74652099609375, Train Accuracy: 61.38%, Val Loss: 18.22037696838379, Val Accuracy: 58.59%\nEpoch 4/20, Train Loss: 55.322086334228516, Train Accuracy: 71.15%, Val Loss: 17.710269927978516, Val Accuracy: 56.51%\nEpoch 5/20, Train Loss: 47.233028411865234, Train Accuracy: 75.50%, Val Loss: 13.514127731323242, Val Accuracy: 70.57%\nEpoch 6/20, Train Loss: 26.843591690063477, Train Accuracy: 87.00%, Val Loss: 13.441262245178223, Val Accuracy: 70.83%\nEpoch 7/20, Train Loss: 20.886323928833008, Train Accuracy: 90.35%, Val Loss: 12.620631217956543, Val Accuracy: 71.88%\nEpoch 8/20, Train Loss: 12.539514541625977, Train Accuracy: 94.70%, Val Loss: 10.201937675476074, Val Accuracy: 78.65%\nEpoch 9/20, Train Loss: 7.960588455200195, Train Accuracy: 97.49%, Val Loss: 11.493952751159668, Val Accuracy: 77.86%\nEpoch 10/20, Train Loss: 9.478549003601074, Train Accuracy: 96.60%, Val Loss: 12.44979476928711, Val Accuracy: 78.65%\nEpoch 11/20, Train Loss: 8.402853012084961, Train Accuracy: 97.04%, Val Loss: 13.229585647583008, Val Accuracy: 73.44%\nEpoch 12/20, Train Loss: 7.843509674072266, Train Accuracy: 97.77%, Val Loss: 14.075499534606934, Val Accuracy: 70.31%\nEpoch 13/20, Train Loss: 8.295709609985352, Train Accuracy: 97.49%, Val Loss: 13.86291790008545, Val Accuracy: 73.18%\nEpoch 14/20, Train Loss: 6.764045238494873, Train Accuracy: 97.94%, Val Loss: 17.678007125854492, Val Accuracy: 69.27%\nEpoch 15/20, Train Loss: 6.3987016677856445, Train Accuracy: 98.66%, Val Loss: 12.187007904052734, Val Accuracy: 81.77%\nEpoch 16/20, Train Loss: 5.435121059417725, Train Accuracy: 98.77%, Val Loss: 12.579371452331543, Val Accuracy: 76.82%\nEpoch 17/20, Train Loss: 2.8897995948791504, Train Accuracy: 100.22%, Val Loss: 12.467711448669434, Val Accuracy: 79.43%\nEpoch 18/20, Train Loss: 4.485598087310791, Train Accuracy: 99.55%, Val Loss: 11.80003833770752, Val Accuracy: 75.52%\nEpoch 19/20, Train Loss: 2.4302449226379395, Train Accuracy: 100.28%, Val Loss: 10.586642265319824, Val Accuracy: 80.99%\nEpoch 20/20, Train Loss: 3.4443728923797607, Train Accuracy: 99.83%, Val Loss: 12.3001070022583, Val Accuracy: 77.86%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Advanced Center Loss + softmax + Exponential moving average ","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha = 0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        # Gather the batch centers for the unique labels\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n\n        # Only update the centers for the unique labels present in the batch\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Model Building Function\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    base_model = tf.keras.applications.VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(643, activation='swish')(x)\n    \n    embeddings = layers.Dense(embedding_dim, activation=None, name='embeddings')(x)\n    logits = layers.Dense(num_classes, activation='softmax')(embeddings)\n    \n    inputs = base_model.input\n    labels = layers.Input(shape=(num_classes,))\n    \n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim, name='center_loss')\n    center_loss_output = center_loss_layer([embeddings, labels])\n    \n    model = models.Model(inputs=[inputs, labels], outputs=[logits, center_loss_output])\n    return model\n\n# Training and Evaluation Function\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n    \n    @tf.function\n    def train_step(images, labels):\n        with tf.GradientTape() as tape:\n            logits, center_loss = model([images, labels], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = classification_loss + center_loss_weight * center_loss\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n        \n        # Calculate accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return total_loss, classification_loss, train_acc\n\n    @tf.function\n    def eval_step(images, labels):\n        logits, center_loss = model([images, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        return classification_loss, center_loss, accuracy\n\n    train_loss_history = []\n    val_loss_history = []\n    train_acc_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            loss, _, acc = train_step(images_batch, labels_batch)\n            epoch_loss += loss\n            epoch_acc += acc\n\n        val_loss = 0\n        val_acc = 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            images_batch = X_val[batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n            loss, _, acc = eval_step(images_batch, labels_batch)\n            val_loss += loss\n            val_acc += acc\n\n        train_loss_history.append(epoch_loss.numpy())\n        val_loss_history.append(val_loss.numpy())\n        train_acc_history.append((epoch_acc / (len(X_train) // batch_size)).numpy())\n        val_acc_history.append((val_acc / (len(X_val) // batch_size)).numpy())\n\n        print(f\"Epoch {epoch + 1}/{epochs}, Train Loss: {epoch_loss.numpy()}, Train Accuracy: {train_acc_history[-1] * 100:.2f}%, Val Loss: {val_loss.numpy()}, Val Accuracy: {val_acc_history[-1] * 100:.2f}%\")\n\n    # Plot loss and accuracy\n    plt.figure(figsize=(12, 5))\n    \n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Train Loss')\n    plt.plot(val_loss_history, label='Val Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    \n    plt.subplot(1, 2, 2)\n    plt.plot([acc * 100 for acc in train_acc_history], label='Train Accuracy')\n    plt.plot([acc * 100 for acc in val_acc_history], label='Val Accuracy')\n    plt.ylim(0, 100)\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy (%)')\n    plt.legend()\n\n    plt.show()\n\n# Parameters\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 128\ndropout_rate = 0.1\nweight_decay = 1e-4\nbatch_size = 32\nepochs = 20\ncenter_loss_weight = 0.2\nlearning_rate = 1e-4\n\n# Build and Train the Model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-22T20:16:37.690092Z","iopub.execute_input":"2024-09-22T20:16:37.690506Z","iopub.status.idle":"2024-09-22T20:27:46.228047Z","shell.execute_reply.started":"2024-09-22T20:16:37.690451Z","shell.execute_reply":"2024-09-22T20:27:46.226867Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"Epoch 1/20, Train Loss: 199.375244140625, Train Accuracy: 6.47%, Val Loss: 39.947021484375, Val Accuracy: 4.95%\nEpoch 2/20, Train Loss: 179.00914001464844, Train Accuracy: 9.49%, Val Loss: 34.05342483520508, Val Accuracy: 16.93%\nEpoch 3/20, Train Loss: 147.985107421875, Train Accuracy: 31.75%, Val Loss: 27.422494888305664, Val Accuracy: 41.15%\nEpoch 4/20, Train Loss: 124.9677734375, Train Accuracy: 50.89%, Val Loss: 23.567209243774414, Val Accuracy: 48.70%\nEpoch 5/20, Train Loss: 125.67189025878906, Train Accuracy: 56.14%, Val Loss: 26.011028289794922, Val Accuracy: 52.86%\nEpoch 6/20, Train Loss: 120.61080932617188, Train Accuracy: 63.23%, Val Loss: 23.426801681518555, Val Accuracy: 57.55%\nEpoch 7/20, Train Loss: 114.88975524902344, Train Accuracy: 75.84%, Val Loss: 23.919696807861328, Val Accuracy: 56.77%\nEpoch 8/20, Train Loss: 116.35795593261719, Train Accuracy: 78.29%, Val Loss: 22.351388931274414, Val Accuracy: 60.68%\nEpoch 9/20, Train Loss: 117.85768127441406, Train Accuracy: 87.95%, Val Loss: 23.867982864379883, Val Accuracy: 65.36%\nEpoch 10/20, Train Loss: 123.41567993164062, Train Accuracy: 86.61%, Val Loss: 22.009946823120117, Val Accuracy: 71.35%\nEpoch 11/20, Train Loss: 123.12174987792969, Train Accuracy: 95.76%, Val Loss: 23.16627311706543, Val Accuracy: 71.88%\nEpoch 12/20, Train Loss: 127.84337615966797, Train Accuracy: 96.37%, Val Loss: 23.744094848632812, Val Accuracy: 71.88%\nEpoch 13/20, Train Loss: 128.58462524414062, Train Accuracy: 98.83%, Val Loss: 24.404088973999023, Val Accuracy: 72.40%\nEpoch 14/20, Train Loss: 130.6122589111328, Train Accuracy: 101.00%, Val Loss: 24.980512619018555, Val Accuracy: 77.86%\nEpoch 15/20, Train Loss: 131.50991821289062, Train Accuracy: 101.17%, Val Loss: 23.981197357177734, Val Accuracy: 78.12%\nEpoch 16/20, Train Loss: 133.13108825683594, Train Accuracy: 101.45%, Val Loss: 23.839553833007812, Val Accuracy: 76.82%\nEpoch 17/20, Train Loss: 134.2699432373047, Train Accuracy: 101.56%, Val Loss: 25.235422134399414, Val Accuracy: 80.21%\nEpoch 18/20, Train Loss: 134.0223846435547, Train Accuracy: 101.67%, Val Loss: 25.11672592163086, Val Accuracy: 80.21%\nEpoch 19/20, Train Loss: 134.26821899414062, Train Accuracy: 101.79%, Val Loss: 25.663970947265625, Val Accuracy: 77.08%\nEpoch 20/20, Train Loss: 133.95867919921875, Train Accuracy: 101.73%, Val Loss: 25.1212100982666, Val Accuracy: 79.69%\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x500 with 2 Axes>","image/png":"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7Nmzp9Ax2dnZDB8+nKCgILy9venfvz/JycmFjomPj6dnz554enoSHBzMs88+S35+fkm+FRERERERKWL5BRaOpp5l46EUZqyJo/O7Kxg5+092Jqbj6erEQ20jWflcJ96+q5ECu5RZhra0r1ixguHDh9OiRQvy8/P517/+xW233cbOnTvx8vIC4KmnnuKXX35hzpw5+Pn5MWLECPr168eaNWsAKCgooGfPnoSGhvLHH3+QmJjIoEGDcHFx4Y033jDy7YmISDGoVq0ao0ePZvTo0UaXIiIiN8BqtZKenc+x1LP229HU7EKPk9KzsfxjgeoATxeG3BTJoDYRBHhd/4zccnG6zjoeQ0P7woULCz2eMWMGwcHBbNq0ifbt25OWlsbUqVOZNWsWt9xyCwDTp0+nTp06rF27ltatW7No0SJ27tzJkiVLCAkJoXHjxrz66qs8//zzjB8//oam1hcRket3pTHb//d//8f48eOv+bwbNmywf7F7vTp27Ejjxo2ZPHnyDZ1HREQuLTffQnJ6NkcvEsoT085yLDWbjJwr9451NpsI83enkr8HXeuFck+LKni6apSvI19nz5s9ezb3338/jz32GB9++GGRnLM8cqh/7WlpaQAEBgYCsGnTJvLy8ujSpYv9mNq1a1O1alViYmJo3bo1MTExNGjQgJCQEPsxXbt25fHHH2fHjh00adLkgtfJyckhJyfH/jg9Pb3I3oPVaiU7z3LR9R9FRMqTxMRE+/1vv/2WcePGFRoC9ff1ya1WKwUFBTg7X/myVLFixaItVEREitx3GxJ46Yft5OZbrnhsoJcr4f7uhPt5EO7vQSV/289wf3fC/T2o4O2Gk1mTd/5TabjOTp06leeee45PPvmEd95557pnTy8Kubm5pbZB12GmSLRYLIwePZq2bdtSv359AJKSknB1dcXf37/QsSEhISQlJdmP+XtgP7///L6LmThxIn5+fvZblSpViuQ97DiWxt2fxPD0nNgiOZ+IyKVYrVaycvMNuVmt1isXCISGhtpvfn5+mEwm++Pdu3fj4+PDggULaNasGW5ubqxevZoDBw7Qu3dvQkJC8Pb2pkWLFixZsqTQeatVq1aohdxkMvH555/Tt29fPD09iY6O5scff7yh3+/3339PvXr1cHNzo1q1arzzzjuF9n/00UdER0fj7u5OSEgId955p33f//73Pxo0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8q32nrbe88fDV9p7X2nrJd9p72nrr4JBkwwZMsTMnj27ar68vNwkJiaap556qs7ykyZNMvfcc4/LstTUVPOjH/2oReNsiuzsbCPJbNq0qd4yK1asMFFRUe4L6iotXLjQ9O/f/6rLe8PxqPTYY4+Zbt26GafTWed6Ox4TSWb16tVV806n08THx5unn366allOTo4JDg42q1atqnc/Tf2dtYQr61KXbdu2GUkmMzOz3jJN/Y42t7rqMW3aNDN+/Pgm7cdbjsn48ePNXXfd1WAZTx8T2J8vtvXGeG97T1sf5d6groKvtPe+0tYb4zvtPW193ehpb4KSkhLt2LFDI0eOrFrm5+enkSNHasuWLXVus2XLFpfykpSenl5veU/Izc2VJLVr167BcgUFBUpJSVFycrLGjx+vAwcOuCO8Rh05ckSJiYnq2rWrpk6dqm+//bbest5wPCTru/baa6/poYceksPhqLecXY9JpYyMDGVlZbl85lFRUUpNTa33M7+W35mn5ObmyuFwKDo6usFyTfmOusvGjRsVGxurnj17atasWTp//ny9Zb3lmJw5c0bvv/++Hn744UbL2vGYwB58ta2XvLu9p6231/G4ki+3997c1ku+19631raepL0Jzp07p/LycsXFxbksj4uLU1ZWVp3bZGVlNam8uzmdTv34xz/WsGHDdOONN9ZbrmfPnlq+fLnWrFmj1157TU6nU0OHDtWJEyfcGG1tqampWrlypdauXaulS5cqIyNDt99+u/Lz8+ssb/fjUendd99VTk6Opk+fXm8Zux6Tmio/16Z85tfyO/OEoqIizZ8/X1OmTFFkZGS95Zr6HXWHUaNG6Q9/+IPWr1+v3/72t9q0aZNGjx6t8vLyOst7yzF59dVXFRERoe9973sNlrPjMYF9+GJbL3l3e09bb6/jURdfbe+9ua2XfLO9b61tfYCnA4BnzZ49W/v372/0Go+0tDSlpaVVzQ8dOlS9e/fWSy+9pP/4j/9o6TDrNXr06Kr3N910k1JTU5WSkqK33nrrqs7A2dUrr7yi0aNHKzExsd4ydj0mrUFpaakmTZokY4yWLl3aYFk7fkcnT55c9b5fv3666aab1K1bN23cuFEjRozwSEzNYfny5Zo6dWqjN2my4zEBWpo3t/e++pulrbc3b2/rJd9s71trW09PexPExMTI399fZ86ccVl+5swZxcfH17lNfHx8k8q705w5c/TXv/5VGzZsUFJSUpO2DQwM1M0336yjR4+2UHTXJjo6Wj169Kg3Ljsfj0qZmZlat26dfvjDHzZpOzsek8rPtSmf+bX8ztypshHPzMzUxx9/3OCZ97o09h31hK5duyomJqbemOx+TCTps88+0+HDh5v8u5HseUzgOb7W1ku+197T1tvreEi+1977YlsveX9735rbepL2JggKCtLAgQO1fv36qmVOp1Pr1693OQtaU1pamkt5Sfr444/rLe8OxhjNmTNHq1ev1ieffKIuXbo0eR/l5eXat2+fEhISWiDCa1dQUKBjx47VG5cdj8eVVqxYodjYWN1zzz1N2s6Ox6RLly6Kj493+czz8vL05Zdf1vuZX8vvzF0qG/EjR45o3bp1at++fZP30dh31BNOnDih8+fP1xuTnY9JpVdeeUUDBw5U//79m7ytHY8JPMdX2nrJd9t72np7HQ/Jt9p7X23rJe9v71t1W+/Z++B5nzfeeMMEBweblStXmoMHD5oZM2aY6Ohok5WVZYwx5v777zc///nPq8pv3rzZBAQEmGeeecYcOnTILFy40AQGBpp9+/Z5qgpm1qxZJioqymzcuNGcPn26arp06VJVmSvrsXjxYvPRRx+ZY8eOmR07dpjJkyebkJAQc+DAAU9UocpPf/pTs3HjRpORkWE2b95sRo4caWJiYkx2drYxxjuOR03l5eWmU6dOZv78+bXW2fWY5Ofnm127dpldu3YZSebZZ581u3btqrrL6m9+8xsTHR1t1qxZY/bu3WvGjx9vunTpYi5fvly1j7vuusu88MILVfON/c48UZeSkhIzbtw4k5SUZHbv3u3y2ykuLq63Lo19R91dj/z8fPP444+bLVu2mIyMDLNu3Tpzyy23mO7du5uioqJ662HHY1IpNzfXhIWFmaVLl9a5DzscE3gXX2jrjfGd9p623h7Hw1fae19p6xurize197T1jSNpvwYvvPCC6dSpkwkKCjJDhgwxW7durVr3ne98x0ybNs2l/FtvvWV69OhhgoKCTN++fc3777/v5ohdSapzWrFiRVWZK+vx4x//uKrOcXFxZsyYMWbnzp3uD/4K9913n0lISDBBQUGmY8eO5r777jNHjx6tWu8Nx6Omjz76yEgyhw8frrXOrsdkw4YNdX6fKmN1Op1mwYIFJi4uzgQHB5sRI0bUql9KSopZuHChy7KGfmeeqEtGRka9v50NGzbUW5fGvqPurselS5fM3XffbTp06GACAwNNSkqKeeSRR2o1xt5wTCq99NJLJjQ01OTk5NS5DzscE3gfb2/rjfGd9p623h7Hw1fae19p6xurize197T1jXMYY8y19tIDAAAAAICWwzXtAAAAAADYFEk7AAAAAAA2RdIOAAAAAIBNkbQDAAAAAGBTJO0AAAAAANgUSTsAAAAAADZF0g4AAAAAgE2RtAMAAAAAYFMk7QA8zuFw6N133/V0GAAAoIXQ1gPXjqQdaOWmT58uh8NRaxo1apSnQwMAAM2Ath7wbgGeDgCA540aNUorVqxwWRYcHOyhaAAAQHOjrQe8Fz3tABQcHKz4+HiXqW3btpKs4WxLly7V6NGjFRoaqq5du+pPf/qTy/b79u3TXXfdpdDQULVv314zZsxQQUGBS5nly5erb9++Cg4OVkJCgubMmeOy/ty5c/rud7+rsLAwde/eXe+9917LVhoAgFaEth7wXiTtABq1YMECTZw4UXv27NHUqVM1efJkHTp0SJJUWFio9PR0tW3bVtu3b9fbb7+tdevWuTTUS5cu1ezZszVjxgzt27dP7733nm644QaXf2Px4sWaNGmS9u7dqzFjxmjq1Km6cOGCW+sJAEBrRVsP2JgB0KpNmzbN+Pv7m/DwcJfp17/+tTHGGElm5syZLtukpqaaWbNmGWOMefnll03btm1NQUFB1fr333/f+Pn5maysLGOMMYmJiebf//3f641BkvnlL39ZNV9QUGAkmQ8//LDZ6gkAQGtFWw94N65pB6A777xTS5cudVnWrl27qvdpaWku69LS0rR7925J0qFDh9S/f3+Fh4dXrR82bJicTqcOHz4sh8OhU6dOacSIEQ3GcNNNN1W9Dw8PV2RkpLKzs6+1SgAAoAbaesB7kbQDUHh4eK0hbM0lNDT0qsoFBga6zDscDjmdzpYICQCAVoe2HvBeXNMOoFFbt26tNd+7d29JUu/evbVnzx4VFhZWrd+8ebP8/PzUs2dPRUREqHPnzlq/fr1bYwYAAFePth6wL3raAai4uFhZWVkuywICAhQTEyNJevvttzVo0CDddttt+uMf/6ht27bplVdekSRNnTpVCxcu1LRp07Ro0SKdPXtWc+fO1f3336+4uDhJ0qJFizRz5kzFxsZq9OjRys/P1+bNmzV37lz3VhQAgFaKth7wXiTtALR27VolJCS4LOvZs6e+/vprSdbdXt944w09+uijSkhI0KpVq9SnTx9JUlhYmD766CM99thjGjx4sMLCwjRx4kQ9++yzVfuaNm2aioqK9Nxzz+nxxx9XTEyMvv/977uvggAAtHK09YD3chhjjKeDAGBfDodDq1ev1oQJEzwdCgAAaAG09YC9cU07AAAAAAA2RdIOAAAAAIBNMTweAAAAAACboqcdAAAAAACbImkHAAAAAMCmSNoBAAAAALApknYAAAAAAGyKpB0AAAAAAJsiaQcAAAAAwKZI2gEAAAAAsCmSdgAAAAAAbOr/AdyZtpX22fQZAAAAAElFTkSuQmCC"},"metadata":{}}]},{"cell_type":"markdown","source":"## B. Embeddings","metadata":{}},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T00:06:35.016603Z","iopub.execute_input":"2024-09-18T00:06:35.017021Z","iopub.status.idle":"2024-09-18T00:06:35.081630Z","shell.execute_reply.started":"2024-09-18T00:06:35.016980Z","shell.execute_reply":"2024-09-18T00:06:35.080545Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# After training, create the embedding model\nembedding_model = models.Model(inputs=model.inputs[0], outputs=model.get_layer('embeddings').output)\n#embedding_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-22T20:29:25.442427Z","iopub.execute_input":"2024-09-22T20:29:25.442973Z","iopub.status.idle":"2024-09-22T20:29:25.734981Z","shell.execute_reply.started":"2024-09-22T20:29:25.442936Z","shell.execute_reply":"2024-09-22T20:29:25.733508Z"},"trusted":true},"execution_count":1,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[1], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# After training, create the embedding model\u001b[39;00m\n\u001b[0;32m----> 2\u001b[0m embedding_model \u001b[38;5;241m=\u001b[39m \u001b[43mmodels\u001b[49m\u001b[38;5;241m.\u001b[39mModel(inputs\u001b[38;5;241m=\u001b[39mmodel\u001b[38;5;241m.\u001b[39minputs[\u001b[38;5;241m0\u001b[39m], outputs\u001b[38;5;241m=\u001b[39mmodel\u001b[38;5;241m.\u001b[39mget_layer(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124membeddings\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39moutput)\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#embedding_model.summary()\u001b[39;00m\n","\u001b[0;31mNameError\u001b[0m: name 'models' is not defined"],"ename":"NameError","evalue":"name 'models' is not defined","output_type":"error"}]},{"cell_type":"code","source":"# Generate embeddings with 'training=False'\nembeddings = embedding_model.predict(images_np_preprocessed, batch_size=16)","metadata":{"execution":{"iopub.status.busy":"2024-09-18T00:11:31.002671Z","iopub.execute_input":"2024-09-18T00:11:31.003083Z","iopub.status.idle":"2024-09-18T00:11:56.986178Z","shell.execute_reply.started":"2024-09-18T00:11:31.003043Z","shell.execute_reply":"2024-09-18T00:11:56.985341Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nprint(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))","metadata":{"execution":{"iopub.status.busy":"2024-09-18T00:11:01.902495Z","iopub.execute_input":"2024-09-18T00:11:01.903217Z","iopub.status.idle":"2024-09-18T00:11:01.908148Z","shell.execute_reply.started":"2024-09-18T00:11:01.903175Z","shell.execute_reply":"2024-09-18T00:11:01.907178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)\n\n# Define marker styles for each class\nmarkers = ['o', 's', '^', 'D', 'v', '<', '>', 'P', '*', '+', 'x', '|', '_']\nunique_labels = np.unique(numeric_labels)\nlabel_to_marker = {label: markers[i % len(markers)] for i, label in enumerate(unique_labels)}\n\n# Plot the 2D embeddings with color based on numeric labels and different markers for each class\nplt.figure(figsize=(10, 10))\nfor label in unique_labels:\n    indices = np.where(numeric_labels == label)[0]\n    plt.scatter(embeddings_2d[indices, 0], embeddings_2d[indices, 1],\n                marker=label_to_marker[label], label=label_encoder.classes_[label],\n                s=50)  # Adjust `s` for marker size\n\n# Move the legend to the left of the plot\nplt.legend(title=\"Person\", bbox_to_anchor=(-0.2, 1), loc='upper left')\n\n# Set plot details\nplt.title('t-SNE of Image Embeddings with Different Markers')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\n\n# Show the plot\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T00:12:00.252950Z","iopub.execute_input":"2024-09-18T00:12:00.253368Z","iopub.status.idle":"2024-09-18T00:12:12.829232Z","shell.execute_reply.started":"2024-09-18T00:12:00.253328Z","shell.execute_reply":"2024-09-18T00:12:12.828320Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Triplet Loss + Center Loss + EMA","metadata":{}},{"cell_type":"markdown","source":"## A. Create triplets","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\n\ndef create_triplets(images_np, labels_np):\n    num_samples = len(images_np)\n    num_classes = labels_np.shape[1]  # Number of classes (one-hot encoded dimension)\n    \n    # Convert one-hot labels to class indices\n    labels = np.argmax(labels_np, axis=1)\n    \n    # Prepare lists to hold triplets\n    anchors = []\n    positives = []\n    negatives = []\n    anchor_labels = []\n    positive_labels = []\n    negative_labels = []\n    \n    for i in range(num_samples):\n        anchor = images_np[i]\n        anchor_label = labels[i]\n        \n        # Find indices of all samples\n        same_class_indices = np.where(labels == anchor_label)[0]\n        other_class_indices = np.where(labels != anchor_label)[0]\n        \n        # Randomly pick a positive sample from the same class\n        positive_index = np.random.choice(same_class_indices)\n        positive = images_np[positive_index]\n        positive_label = labels[positive_index]\n        \n        # Randomly pick a negative sample from a different class\n        negative_index = np.random.choice(other_class_indices)\n        negative = images_np[negative_index]\n        negative_label = labels[negative_index]\n        \n        # Append to triplet lists\n        anchors.append(anchor)\n        positives.append(positive)\n        negatives.append(negative)\n        anchor_labels.append(anchor_label)\n        positive_labels.append(positive_label)\n        negative_labels.append(negative_label)\n    \n    # Convert lists to numpy arrays\n    anchors = np.array(anchors)\n    positives = np.array(positives)\n    negatives = np.array(negatives)\n    anchor_labels = np.array(anchor_labels)\n    positive_labels = np.array(positive_labels)\n    negative_labels = np.array(negative_labels)\n    \n    # Stack triplets\n    images_triplet = np.stack([anchors, positives, negatives], axis=1)\n    \n    # Convert labels to one-hot encoding\n    one_hot_encoder = OneHotEncoder(sparse_output=False, categories=[range(num_classes)])\n    one_hot_encoder.fit(np.arange(num_classes).reshape(-1, 1))\n    \n    anchor_labels_one_hot = one_hot_encoder.transform(anchor_labels.reshape(-1, 1))\n    positive_labels_one_hot = one_hot_encoder.transform(positive_labels.reshape(-1, 1))\n    negative_labels_one_hot = one_hot_encoder.transform(negative_labels.reshape(-1, 1))\n    \n    # Stack one-hot encoded labels\n    labels_triplet = np.stack([anchor_labels_one_hot, positive_labels_one_hot, negative_labels_one_hot], axis=1)\n    \n    return images_triplet, labels_triplet\n\n# Example usage\nimages_triplet, labels_triplet = create_triplets(images_np_preprocessed, labels_np_onehot)\n\n# Check shapes\nprint(f\"Images Triplet Shape: {images_triplet.shape}\")\nprint(f\"Labels Triplet Shape: {labels_triplet.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T11:37:40.920007Z","iopub.execute_input":"2024-09-18T11:37:40.920692Z","iopub.status.idle":"2024-09-18T11:37:47.022544Z","shell.execute_reply.started":"2024-09-18T11:37:40.920642Z","shell.execute_reply":"2024-09-18T11:37:47.021529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### B. Split into training, validationa and testing","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ndef split_triplets(images_triplet, labels_triplet, test_size=0.3, validation_size=0.5, random_state=42):\n    # Split into training and temporary validation+test sets\n    X_train, X_temp, y_train, y_temp = train_test_split(\n        images_triplet, labels_triplet,\n        test_size=test_size,  # 30% for validation+test\n        random_state=random_state\n    )\n    \n    # Split the temporary validation+test set into validation and test sets\n    X_val, X_test, y_val, y_test = train_test_split(\n        X_temp, y_temp,\n        test_size=validation_size,  # 50% of the 30% for test (15% of total data)\n        random_state=random_state\n    )\n    \n    # Print shapes for verification\n    print(f\"Train set: {X_train.shape}, {y_train.shape}\")\n    print(f\"Validation set: {X_val.shape}, {y_val.shape}\")\n    print(f\"Test set: {X_test.shape}, {y_test.shape}\")\n    \n    return X_train, y_train, X_val, y_val, X_test, y_test\n\n# Example usage\nX_train, y_train, X_val, y_val, X_test, y_test = split_triplets(images_triplet, labels_triplet)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T11:37:49.651961Z","iopub.execute_input":"2024-09-18T11:37:49.652434Z","iopub.status.idle":"2024-09-18T11:37:51.400113Z","shell.execute_reply.started":"2024-09-18T11:37:49.652340Z","shell.execute_reply":"2024-09-18T11:37:51.399089Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming the shape of X_train is (num_samples, 3, height, width, channels)\nanchor_train = X_train[:, 0, :, :, :]  # Take the first image in each triplet (anchor)\npositive_train = X_train[:, 1, :, :, :]  # Take the second image in each triplet (positive)\nnegative_train = X_train[:, 2, :, :, :]  # Take the third image in each triplet (negative)\n\n# Do the same for X_val\nanchor_val = X_val[:, 0, :, :, :]\npositive_val = X_val[:, 1, :, :, :]\nnegative_val = X_val[:, 2, :, :, :]\n\n# Split y_train into anchor, positive, and negative labels\nanchor_label_train = y_train[:, 0]  # Take the first label in each triplet (anchor)\npositive_label_train = y_train[:, 1]  # Take the second label in each triplet (positive)\nnegative_label_train = y_train[:, 2]  # Take the third label in each triplet (negative)\n\n# Do the same for y_val\nanchor_label_val = y_val[:, 0]  # Take the first label in each triplet (anchor)\npositive_label_val = y_val[:, 1]  # Take the second label in each triplet (positive)\nnegative_label_val = y_val[:, 2]  # Take the third label in each triplet (negative)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T11:41:58.922596Z","iopub.execute_input":"2024-09-18T11:41:58.923017Z","iopub.status.idle":"2024-09-18T11:41:58.931796Z","shell.execute_reply.started":"2024-09-18T11:41:58.922977Z","shell.execute_reply":"2024-09-18T11:41:58.930284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Print shapes of training triplets (images)\nprint(\"Training Set Shapes:\")\nprint(\"Anchor images (X_train):\", anchor_train.shape)\nprint(\"Positive images (X_train):\", positive_train.shape)\nprint(\"Negative images (X_train):\", negative_train.shape)\n\n# Print shapes of validation triplets (images)\nprint(\"\\nValidation Set Shapes:\")\nprint(\"Anchor images (X_val):\", anchor_val.shape)\nprint(\"Positive images (X_val):\", positive_val.shape)\nprint(\"Negative images (X_val):\", negative_val.shape)\n\n# Print shapes of training triplets (labels)\nprint(\"\\nTraining Set Label Shapes:\")\nprint(\"Anchor labels (y_train):\", anchor_label_train.shape)\nprint(\"Positive labels (y_train):\", positive_label_train.shape)\nprint(\"Negative labels (y_train):\", negative_label_train.shape)\n\n# Print shapes of validation triplets (labels)\nprint(\"\\nValidation Set Label Shapes:\")\nprint(\"Anchor labels (y_val):\", anchor_label_val.shape)\nprint(\"Positive labels (y_val):\", positive_label_val.shape)\nprint(\"Negative labels (y_val):\", negative_label_val.shape)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T11:43:21.828285Z","iopub.execute_input":"2024-09-18T11:43:21.828795Z","iopub.status.idle":"2024-09-18T11:43:21.837782Z","shell.execute_reply.started":"2024-09-18T11:43:21.828755Z","shell.execute_reply":"2024-09-18T11:43:21.836573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### C. Model","metadata":{}},{"cell_type":"markdown","source":"### Aproach one","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Triplet Loss Layer\nclass TripletLossLayer(tf.keras.layers.Layer):\n    def __init__(self, margin=1.0, **kwargs):\n        super(TripletLossLayer, self).__init__(**kwargs)\n        self.margin = margin\n\n    def call(self, inputs):\n        anchor, positive, negative = inputs\n\n        # Compute distances\n        positive_distance = tf.reduce_sum(tf.square(anchor - positive), axis=-1)\n        negative_distance = tf.reduce_sum(tf.square(anchor - negative), axis=-1)\n\n        # Compute triplet loss\n        triplet_loss = tf.maximum(0.0, positive_distance - negative_distance + self.margin)\n        return tf.reduce_mean(triplet_loss)\n\ndef build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    anchor_input = layers.Input(shape=input_shape)\n    positive_input = layers.Input(shape=input_shape)\n    negative_input = layers.Input(shape=input_shape)\n    labels_input = layers.Input(shape=(num_classes,))\n\n    # Define VGG19 backbone\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n    x = base_model.output\n    x = layers.Flatten()(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define embedding model\n    embedding_output = models.Model(inputs=base_model.input, outputs=x)\n\n    embedding_anchor = embedding_output(anchor_input)\n    embedding_positive = embedding_output(positive_input)\n    embedding_negative = embedding_output(negative_input)\n\n    # Define logits for classification\n    logits = layers.Dense(num_classes, activation='softmax')(x)\n\n    # Define center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding_anchor, labels_input])\n\n    # Define models\n    triplet_model = models.Model(inputs=[anchor_input, positive_input, negative_input], \n                                 outputs=[embedding_anchor, embedding_positive, embedding_negative])\n\n    full_model = models.Model(inputs=[anchor_input, positive_input, negative_input, labels_input],\n                              outputs=[logits, center_loss_output])\n    \n    return triplet_model, full_model\n\n\n\n# Training and Evaluation Function\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n    \n    @tf.function\n    def train_step(anchor, positive, negative, labels):\n        with tf.GradientTape() as tape:\n            logits, center_loss = model([anchor, positive, negative], training=True)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = classification_loss + center_loss_weight * center_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, train_acc\n\n\n    @tf.function\n    def eval_step(anchor, positive, negative, labels):\n        logits, center_loss = model([anchor, positive, negative], training=True)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        return classification_loss, triplet_loss_val, center_loss, accuracy\n\n    train_loss_history = []\n    val_loss_history = []\n    train_acc_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for batch_start in range(0, len(X_train), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train))\n            anchor_batch = X_train[batch_start:batch_end, 0]\n            positive_batch = X_train[batch_start:batch_end, 1]\n            negative_batch = X_train[batch_start:batch_end, 2]\n            labels_batch = y_train[batch_start:batch_end, 0]\n\n            loss, classification_loss, acc = train_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            epoch_loss += loss\n            epoch_acc += acc\n\n        val_loss = 0\n        val_acc = 0\n        for batch_start in range(0, len(X_val), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val))\n            anchor_batch = X_val[batch_start:batch_end, 0]\n            positive_batch = X_val[batch_start:batch_end, 1]\n            negative_batch = X_val[batch_start:batch_end, 2]\n            labels_batch = y_val[batch_start:batch_end, 0]\n\n            loss, triplet_loss_val, center_loss, acc = eval_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            val_loss += loss\n            val_acc += acc\n\n        # Average loss and accuracy\n        epoch_loss /= (len(X_train) // batch_size)\n        epoch_acc /= (len(X_train) // batch_size)\n        val_loss /= (len(X_val) // batch_size)\n        val_acc /= (len(X_val) // batch_size)\n\n        train_loss_history.append(epoch_loss.numpy())\n        val_loss_history.append(val_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        val_acc_history.append(val_acc.numpy())\n\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        print(f\"Training loss: {epoch_loss.numpy():.4f}, Accuracy: {epoch_acc.numpy():.4f}\")\n        print(f\"Validation loss: {val_loss.numpy():.4f}, Accuracy: {val_acc.numpy():.4f}\")\n\n    # Plot loss and accuracy\n    plt.figure()\n    plt.plot(train_loss_history, label='Training Loss')\n    plt.plot(val_loss_history, label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()\n\n    plt.figure()\n    plt.plot(train_acc_history, label='Training Accuracy')\n    plt.plot(val_acc_history, label='Validation Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n    plt.show()\n\n# Example usage\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 128\ndropout_rate = 0.5\nweight_decay = 1e-4\ncenter_loss_weight = 0.01\nlearning_rate = 1e-4\nbatch_size = 32\nepochs = 10\n\ntriplet_model, full_model = build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\n# Assume X_train, y_train, X_val, y_val are already defined\ntrain_and_evaluate(full_model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T03:12:06.878820Z","iopub.execute_input":"2024-09-18T03:12:06.879583Z","iopub.status.idle":"2024-09-18T03:12:07.741083Z","shell.execute_reply.started":"2024-09-18T03:12:06.879538Z","shell.execute_reply":"2024-09-18T03:12:07.739840Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Approach two","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, optimizers\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha\n\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Triplet Loss Layer\nclass TripletLossLayer(tf.keras.layers.Layer):\n    def __init__(self, margin=1.0, **kwargs):\n        super(TripletLossLayer, self).__init__(**kwargs)\n        self.margin = margin\n\n    def call(self, inputs):\n        anchor, positive, negative = inputs\n        positive_distance = tf.reduce_sum(tf.square(anchor - positive), axis=-1)\n        negative_distance = tf.reduce_sum(tf.square(anchor - negative), axis=-1)\n\n        triplet_loss = tf.maximum(0.0, positive_distance - negative_distance + self.margin)\n        return tf.reduce_mean(triplet_loss)\n\ndef build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate=0.5, weight_decay=1e-4):\n    base_model = tf.keras.applications.VGG19(input_shape=input_shape, include_top=False, weights='imagenet')\n    base_model.trainable = False  # Freeze the base model\n\n    # Embedding model\n    inputs = layers.Input(shape=input_shape, name='embedding_input')\n    x = base_model(inputs, training=False)\n    x = layers.GlobalAveragePooling2D()(x)\n    x = layers.Dense(embedding_dim, activation=None)(x)  # Embedding layer\n    embeddings = layers.Lambda(lambda x: tf.math.l2_normalize(x, axis=-1))(x)  # L2 normalization\n\n    # Classification layer\n    classification_output = layers.Dense(num_classes, activation='softmax', name='classification_output')(embeddings)\n\n    # Triplet Loss layer inputs\n    anchor_input = layers.Input(shape=input_shape, name='anchor_input')\n    positive_input = layers.Input(shape=input_shape, name='positive_input')\n    negative_input = layers.Input(shape=input_shape, name='negative_input')\n\n    anchor_embedding = base_model(anchor_input)\n    positive_embedding = base_model(positive_input)\n    negative_embedding = base_model(negative_input)\n\n    anchor_embedding = layers.GlobalAveragePooling2D()(anchor_embedding)\n    positive_embedding = layers.GlobalAveragePooling2D()(positive_embedding)\n    negative_embedding = layers.GlobalAveragePooling2D()(negative_embedding)\n\n    anchor_embedding = layers.Dense(embedding_dim, activation=None)(anchor_embedding)\n    positive_embedding = layers.Dense(embedding_dim, activation=None)(positive_embedding)\n    negative_embedding = layers.Dense(embedding_dim, activation=None)(negative_embedding)\n\n    # Triplet Loss\n    triplet_loss = TripletLossLayer(name='triplet_loss')([anchor_embedding, positive_embedding, negative_embedding])\n\n    # Center Loss\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input')\n    center_loss = CenterLossLayer(num_classes, embedding_dim, name='center_loss')([anchor_embedding, labels_input])\n\n    # Full model\n    triplet_model = models.Model(inputs=[anchor_input, positive_input, negative_input], outputs=triplet_loss)\n    full_model = models.Model(inputs=[anchor_input, positive_input, negative_input, labels_input], outputs=[classification_output, center_loss])\n\n    return triplet_model, full_model\n\n\ndef train_and_evaluate(full_model, X_train_triplets, y_train, X_val_triplets, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    # Prepare the optimizer\n    optimizer = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n    \n    # Compile the model\n    full_model.compile(\n        optimizer=optimizer,\n        loss={'classification_output': 'categorical_crossentropy',\n              'center_loss': lambda y_true, y_pred: y_pred},  # The center loss layer outputs the loss directly\n        loss_weights={'classification_output': 1.0, 'center_loss': center_loss_weight},\n        metrics={'classification_output': 'accuracy'}\n    )\n    \n    # Train the model\n    full_model.fit(\n        {\n            'anchor_input': X_train_triplets[0],\n            'positive_input': X_train_triplets[1],\n            'negative_input': X_train_triplets[2],\n            'labels_input': y_train\n        },\n        {\n            'classification_output': y_train,\n            'center_loss': y_train\n        },\n        validation_data=(\n            {\n                'anchor_input': X_val_triplets[0],\n                'positive_input': X_val_triplets[1],\n                'negative_input': X_val_triplets[2],\n                'labels_input': y_val\n            },\n            {\n                'classification_output': y_val,\n                'center_loss': y_val\n            }\n        ),\n        batch_size=batch_size,\n        epochs=epochs\n    )\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T03:47:30.932666Z","iopub.execute_input":"2024-09-18T03:47:30.933078Z","iopub.status.idle":"2024-09-18T03:47:30.964958Z","shell.execute_reply.started":"2024-09-18T03:47:30.933043Z","shell.execute_reply":"2024-09-18T03:47:30.963519Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Aproach three","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Triplet Loss Layer\nclass TripletLossLayer(tf.keras.layers.Layer):\n    def __init__(self, margin=1.0, **kwargs):\n        super(TripletLossLayer, self).__init__(**kwargs)\n        self.margin = margin\n\n    def call(self, inputs):\n        anchor, positive, negative = inputs\n\n        # Compute distances\n        positive_distance = tf.reduce_sum(tf.square(anchor - positive), axis=-1)\n        negative_distance = tf.reduce_sum(tf.square(anchor - negative), axis=-1)\n\n        # Compute triplet loss\n        triplet_loss = tf.maximum(0.0, positive_distance - negative_distance + self.margin)\n        return tf.reduce_mean(triplet_loss)\n\ndef build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    anchor_input = layers.Input(shape=input_shape, name='anchor_input')\n    positive_input = layers.Input(shape=input_shape, name='positive_input')\n    negative_input = layers.Input(shape=input_shape, name='negative_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n    base_model.trainable = False  # Optionally, freeze the base model to avoid retraining ImageNet weights\n\n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n    \n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n#     x = layers.Dropout(dropout_rate)(x)\n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for anchor, positive, and negative\n    embedding_anchor = embedding_model(anchor_input)\n    embedding_positive = embedding_model(positive_input)\n    embedding_negative = embedding_model(negative_input)\n\n    # Define logits for classification using anchor embedding only\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding_anchor)\n\n    # Define the custom triplet loss layer\n    triplet_loss_layer = TripletLossLayer(margin=1.0)\n    triplet_loss_output = triplet_loss_layer([embedding_anchor, embedding_positive, embedding_negative])\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding_anchor, labels_input])\n\n    # Define the triplet model (used for embedding training)\n    triplet_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input], \n        outputs=[embedding_anchor, embedding_positive, embedding_negative],\n        name='triplet_model'\n    )\n\n    # Define the full model with classification, center loss, and triplet loss\n    full_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input, labels_input],\n        outputs=[logits, center_loss_output, triplet_loss_output],\n        name='full_model'\n    )\n\n    return triplet_model, full_model\n\n\n# Training and Evaluation Function\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n    \n    @tf.function\n    def train_step(anchor, positive, negative, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            outputs = model([anchor, positive, negative, labels], training=True)\n            print(f\"Model Outputs: {outputs}\")  # Debug line\n            logits, center_loss, triplet_loss = outputs  # Expecting 3 outputs here\n            \n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            total_loss = 0 * classification_loss + 0 * center_loss + triplet_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, train_acc\n\n    @tf.function\n    def eval_step(anchor, positive, negative, labels):\n        logits, center_loss, triplet_loss = model([anchor, positive, negative, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        return classification_loss, triplet_loss, center_loss, accuracy\n\n    train_loss_history = []\n    val_loss_history = []\n    train_acc_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for batch_start in range(0, len(X_train[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train[0]))\n            anchor_batch = X_train[0][batch_start:batch_end]\n            positive_batch = X_train[1][batch_start:batch_end]\n            negative_batch = X_train[2][batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            loss, classification_loss, acc = train_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            epoch_loss += loss\n            epoch_acc += acc\n\n        val_loss = 0\n        val_acc = 0\n        for batch_start in range(0, len(X_val[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val[0]))\n            anchor_batch = X_val[0][batch_start:batch_end]\n            positive_batch = X_val[1][batch_start:batch_end]\n            negative_batch = X_val[2][batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            loss, triplet_loss_val, center_loss, acc = eval_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            val_loss += loss\n            val_acc += acc\n\n        # Average loss and accuracy\n        epoch_loss /= (len(X_train[0]) // batch_size)\n        epoch_acc /= (len(X_train[0]) // batch_size)\n        val_loss /= (len(X_val[0]) // batch_size)\n        val_acc /= (len(X_val[0]) // batch_size)\n\n        train_loss_history.append(epoch_loss.numpy())\n        val_loss_history.append(val_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        val_acc_history.append(val_acc.numpy())\n\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        print(f\"Training loss: {epoch_loss.numpy():.4f}, Accuracy: {epoch_acc.numpy():.4f}\")\n        print(f\"Validation loss: {val_loss.numpy():.4f}, Accuracy: {val_acc.numpy():.4f}\")\n\n    # Plot loss and accuracy\n    plt.figure()\n    plt.plot(train_loss_history, label='Training Loss')\n    plt.plot(val_loss_history, label='Validation Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n    plt.show()\n    plt.figure()\n    \n    # Plot accuracy\n    plt.figure()\n    plt.plot(train_acc_history, label='Training Accuracy')\n    plt.plot(val_acc_history, label='Validation Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n    plt.show()\n\n# Example usage\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 128\ndropout_rate = 0.1\nweight_decay = 0.0005 #1e-4\ncenter_loss_weight = 0.2 #0.01\nlearning_rate = 1e-4\nbatch_size = 32\nepochs = 10\n\n# Assume X_train, y_train, X_val, y_val are already defined\n# Preprocessing and splitting code should be executed before this\n\ntriplet_model, full_model = build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n# Example function call to train and evaluate\ntrain_and_evaluate(\n    full_model,\n    [anchor_train, positive_train, negative_train],  # Input triplets for training\n    anchor_label_train,  # Only use anchor labels for training\n    [anchor_val, positive_val, negative_val],  # Input triplets for validation\n    anchor_label_val,  # Only use anchor labels for validation\n    batch_size,\n    epochs,\n    center_loss_weight,\n    learning_rate\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T13:13:23.616969Z","iopub.execute_input":"2024-09-18T13:13:23.617370Z","iopub.status.idle":"2024-09-18T13:20:02.039384Z","shell.execute_reply.started":"2024-09-18T13:13:23.617326Z","shell.execute_reply":"2024-09-18T13:20:02.038451Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-09-18T03:36:36.694620Z","iopub.execute_input":"2024-09-18T03:36:36.695476Z","iopub.status.idle":"2024-09-18T03:36:36.701574Z","shell.execute_reply.started":"2024-09-18T03:36:36.695432Z","shell.execute_reply":"2024-09-18T03:36:36.700619Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(anchor_train.shape)  # Should be (1793, height, width, channels)\nprint(positive_train.shape)  # Should be the same as anchor_train.shape\nprint(negative_train.shape)  # Should be the same as anchor_train.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-18T03:47:33.942358Z","iopub.execute_input":"2024-09-18T03:47:33.943375Z","iopub.status.idle":"2024-09-18T03:47:33.948614Z","shell.execute_reply.started":"2024-09-18T03:47:33.943330Z","shell.execute_reply":"2024-09-18T03:47:33.947650Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Example parameters\ninput_shape = (224, 224, 3)  # Example image size (height, width, channels)\nnum_classes = 10  # Number of output classes\nembedding_dim = 128  # Size of the embedding vector\nbatch_size = 16\nepochs = 10\ncenter_loss_weight = 0.5  # Adjust this to balance between classification and center loss\nlearning_rate = 0.001\n\n# Build the model\ntriplet_model, full_model = build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim)\n\n# # Assuming the model expects three inputs: anchor, positive, and negative\n# X_train_triplets = [anchor_train, positive_train, negative_train]\n# X_val_triplets = [anchor_val, positive_val, negative_val]\n\n# # Train the model\n# train_and_evaluate(full_model, X_train_triplets, y_train, X_val_triplets, y_val, batch_size, epochs, center_loss_weight, learning_rate)\nfull_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-18T03:55:13.229971Z","iopub.execute_input":"2024-09-18T03:55:13.230465Z","iopub.status.idle":"2024-09-18T03:55:13.727751Z","shell.execute_reply.started":"2024-09-18T03:55:13.230424Z","shell.execute_reply":"2024-09-18T03:55:13.726823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## VGGFace","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.applications import VGG19\nfrom tensorflow.keras.layers import Flatten\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.regularizers import l2\n\nclass CenterLossLayer(layers.Layer):\n    def __init__(self, num_classes, embedding_dim, alpha=0.5, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.alpha = alpha  # Learning rate for updating the centers\n\n    def build(self, input_shape):\n        self.centers = self.add_weight(\n            shape=(self.num_classes, self.embedding_dim),\n            initializer='uniform',\n            trainable=False,\n            name='centers'\n        )\n\n    def call(self, inputs, labels):\n        labels = tf.argmax(labels, axis=1)  # Convert one-hot to integer\n        centers_batch = tf.gather(self.centers, labels)  # Get the corresponding center for each label\n        center_loss = tf.reduce_mean(tf.square(inputs - centers_batch))  # Euclidean distance between embeddings and centers\n        \n        # Update the centers manually during training\n        diff = centers_batch - inputs\n        unique_labels, unique_idx = tf.unique(labels)\n        updates = tf.tensor_scatter_nd_add(self.centers, tf.expand_dims(unique_labels, 1), self.alpha * diff)\n        \n        return center_loss\n\n\n# Define custom training step\n@tf.function\ndef train_step(images, labels, model, loss_object, center_loss_weight, optimizer):\n    with tf.GradientTape() as tape:\n        predictions, center_loss = model([images, labels], training=True)\n        loss = loss_object(labels, predictions) + center_loss_weight * center_loss\n\n    gradients = tape.gradient(loss, model.trainable_variables)\n    optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n    \n    # Calculate accuracy\n    acc = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(predictions, axis=1), tf.argmax(labels, axis=1)), tf.float32))\n    \n    return loss, acc\n\n# Define custom evaluation step\n@tf.function\ndef eval_step(images, labels, model, loss_object, center_loss_weight):\n    predictions, center_loss = model([images, labels], training=False)\n    loss = loss_object(labels, predictions) + center_loss_weight * center_loss\n    \n    # Calculate accuracy\n    acc = tf.reduce_mean(tf.cast(tf.equal(tf.argmax(predictions, axis=1), tf.argmax(labels, axis=1)), tf.float32))\n    \n    return loss, acc\n\n# Training and evaluation\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.RMSprop(learning_rate=learning_rate)\n    loss_object = tf.keras.losses.CategoricalCrossentropy()\n    \n    num_samples = X_train.shape[0]\n    steps_per_epoch = num_samples // batch_size\n\n    # Lists to store metrics\n    train_loss_history = []\n    train_acc_history = []\n    val_loss_history = []\n    val_acc_history = []\n\n    for epoch in range(epochs):\n        epoch_loss = 0\n        epoch_acc = 0\n        for step in range(steps_per_epoch):\n            batch_start = step * batch_size\n            batch_end = (step + 1) * batch_size\n            images_batch = X_train[batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n            \n            loss, acc = train_step(images_batch, labels_batch, model, loss_object, center_loss_weight, optimizer)\n            epoch_loss += loss\n            epoch_acc += acc\n        \n        epoch_loss /= steps_per_epoch\n        epoch_acc /= steps_per_epoch\n        train_loss_history.append(epoch_loss.numpy())\n        train_acc_history.append(epoch_acc.numpy())\n        print(f\"Epoch {epoch + 1}/{epochs}, Loss: {epoch_loss.numpy()}, Accuracy: {epoch_acc.numpy()}\")\n\n        # Validation step\n        val_loss, val_acc = eval_step(X_val, y_val, model, loss_object, center_loss_weight)\n        val_loss_history.append(val_loss.numpy())\n        val_acc_history.append(val_acc.numpy())\n        print(f\"Validation Loss: {val_loss.numpy()}, Validation Accuracy: {val_acc.numpy()}\")\n\n    # Plot training and validation loss and accuracy\n    plt.figure(figsize=(12, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.plot(train_loss_history, label='Training Loss')\n    plt.plot(val_loss_history, label='Validation Loss')\n    plt.title('Loss')\n    plt.xlabel('Epoch')\n    plt.ylabel('Loss')\n    plt.legend()\n\n    plt.subplot(1, 2, 2)\n    plt.plot(train_acc_history, label='Training Accuracy')\n    plt.plot(val_acc_history, label='Validation Accuracy')\n    plt.title('Accuracy')\n    plt.xlabel('Epoch')\n    plt.ylabel('Accuracy')\n    plt.legend()\n\n    plt.show()\n\n# Build the VGG19 model with Center Loss using Swish activation\ndef build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate=0.5, weight_decay=1e-4):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    inputs = layers.Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    x = layers.Flatten()(x)\n\n    # Add dense layers with L2 regularization and Dropout, using 'swish' as the activation function\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    x = layers.Dense(643, activation='swish')(x)\n    \n    # Add dense layers for embedding\n    embeddings = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=l2(weight_decay))(x)\n    \n    # Compute the center loss\n    labels = layers.Input(shape=(num_classes,))\n    center_loss_layer = CenterLossLayer(num_classes, embedding_dim)\n    center_loss_output = center_loss_layer(embeddings, labels)\n    \n    # Add a softmax classification layer\n    softmax_output = layers.Dense(num_classes, activation='softmax')(embeddings)\n    \n    model = models.Model(inputs=[inputs, labels], outputs=[softmax_output, center_loss_output])\n    \n    return model\n\n\n\n# Model parameters\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes\nembedding_dim = 512  # Dimension of the embedding space\ncenter_loss_weight = 0.5  # Weight for the center loss\nlearning_rate = 0.001\nbatch_size = 32\nepochs = 25\ndropout_rate = 0.1\nweight_decay = 1e-4\n\n# Build the model\nmodel = build_vgg19_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\n# Train the model\ntrain_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Triplet","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\n\ndef create_triplets(images_np, labels_np):\n    num_samples = len(images_np)\n    num_classes = labels_np.shape[1]  # Number of classes (one-hot encoded dimension)\n    \n    # Convert one-hot labels to class indices\n    labels = np.argmax(labels_np, axis=1)\n    \n    # Prepare lists to hold triplets\n    anchors = []\n    positives = []\n    negatives = []\n    anchor_labels = []\n    positive_labels = []\n    negative_labels = []\n    \n    for i in range(num_samples):\n        anchor = images_np[i]\n        anchor_label = labels[i]\n        \n        # Find indices of all samples\n        same_class_indices = np.where(labels == anchor_label)[0]\n        other_class_indices = np.where(labels != anchor_label)[0]\n        \n        # Randomly pick a positive sample from the same class\n        positive_index = np.random.choice(same_class_indices)\n        positive = images_np[positive_index]\n        positive_label = labels[positive_index]\n        \n        # Randomly pick a negative sample from a different class\n        negative_index = np.random.choice(other_class_indices)\n        negative = images_np[negative_index]\n        negative_label = labels[negative_index]\n        \n        # Append to triplet lists\n        anchors.append(anchor)\n        positives.append(positive)\n        negatives.append(negative)\n        anchor_labels.append(anchor_label)\n        positive_labels.append(positive_label)\n        negative_labels.append(negative_label)\n    \n    # Convert lists to numpy arrays\n    anchors = np.array(anchors)\n    positives = np.array(positives)\n    negatives = np.array(negatives)\n    anchor_labels = np.array(anchor_labels)\n    positive_labels = np.array(positive_labels)\n    negative_labels = np.array(negative_labels)\n    \n    # Stack triplets\n    images_triplet = np.stack([anchors, positives, negatives], axis=1)\n    \n    # Convert labels to one-hot encoding\n    one_hot_encoder = OneHotEncoder(sparse_output=False, categories=[range(num_classes)])\n    one_hot_encoder.fit(np.arange(num_classes).reshape(-1, 1))\n    \n    anchor_labels_one_hot = one_hot_encoder.transform(anchor_labels.reshape(-1, 1))\n    positive_labels_one_hot = one_hot_encoder.transform(positive_labels.reshape(-1, 1))\n    negative_labels_one_hot = one_hot_encoder.transform(negative_labels.reshape(-1, 1))\n    \n    # Stack one-hot encoded labels\n    labels_triplet = np.stack([anchor_labels_one_hot, positive_labels_one_hot, negative_labels_one_hot], axis=1)\n    \n    return images_triplet, labels_triplet\n\n# Example usage\nimages_triplet, labels_triplet = create_triplets(images_np_preprocessed, labels_np_onehot)\n\n# Check shapes\nprint(f\"Images Triplet Shape: {images_triplet.shape}\")\nprint(f\"Labels Triplet Shape: {labels_triplet.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T01:42:40.558725Z","iopub.execute_input":"2024-09-18T01:42:40.559137Z","iopub.status.idle":"2024-09-18T01:42:47.769428Z","shell.execute_reply.started":"2024-09-18T01:42:40.559099Z","shell.execute_reply":"2024-09-18T01:42:47.768566Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ndef split_triplets(images_triplet, labels_triplet, test_size=0.3, validation_size=0.5, random_state=42):\n    # Split into training and temporary validation+test sets\n    X_train, X_temp, y_train, y_temp = train_test_split(\n        images_triplet, labels_triplet,\n        test_size=test_size,  # 30% for validation+test\n        random_state=random_state\n    )\n    \n    # Split the temporary validation+test set into validation and test sets\n    X_val, X_test, y_val, y_test = train_test_split(\n        X_temp, y_temp,\n        test_size=validation_size,  # 50% of the 30% for test (15% of total data)\n        random_state=random_state\n    )\n    \n    # Print shapes for verification\n    print(f\"Train set: {X_train.shape}, {y_train.shape}\")\n    print(f\"Validation set: {X_val.shape}, {y_val.shape}\")\n    print(f\"Test set: {X_test.shape}, {y_test.shape}\")\n    \n    return X_train, y_train, X_val, y_val, X_test, y_test\n\n# Example usage\nX_train, y_train, X_val, y_val, X_test, y_test = split_triplets(images_triplet, labels_triplet)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-18T01:44:30.725892Z","iopub.execute_input":"2024-09-18T01:44:30.726315Z","iopub.status.idle":"2024-09-18T01:44:33.943567Z","shell.execute_reply.started":"2024-09-18T01:44:30.726260Z","shell.execute_reply":"2024-09-18T01:44:33.941490Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train[0].shape","metadata":{"execution":{"iopub.status.busy":"2024-09-18T01:36:52.891329Z","iopub.execute_input":"2024-09-18T01:36:52.891657Z","iopub.status.idle":"2024-09-18T01:36:52.897943Z","shell.execute_reply.started":"2024-09-18T01:36:52.891623Z","shell.execute_reply":"2024-09-18T01:36:52.897022Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_train[0]","metadata":{"execution":{"iopub.status.busy":"2024-09-18T01:37:24.625551Z","iopub.execute_input":"2024-09-18T01:37:24.626426Z","iopub.status.idle":"2024-09-18T01:37:24.633687Z","shell.execute_reply.started":"2024-09-18T01:37:24.626371Z","shell.execute_reply":"2024-09-18T01:37:24.632546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ArcFace","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models\nfrom tensorflow.keras.applications import VGG19\n\nclass ArcFaceLayer(layers.Layer):\n    def __init__(self, num_classes, s=30.0, m=0.50, **kwargs):\n        super(ArcFaceLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.s = s  # Scale factor\n        self.m = m  # Margin\n\n    def build(self, input_shape):\n        feature_dim = input_shape[0][-1]  # This grabs the last dimension of the feature vector input\n        self.w = self.add_weight(\n            shape=(feature_dim, self.num_classes),  # Feature dimension and number of classes\n            initializer='glorot_uniform',\n            trainable=True,\n            name=\"weights\"\n        )\n\n    def call(self, inputs):\n        x, labels = inputs\n        x = tf.math.l2_normalize(x, axis=1)  # Normalize the feature vectors\n        w = tf.math.l2_normalize(self.w, axis=0)  # Normalize the weights\n\n        # Compute the cosine of the angle between x and the weights\n        logits = tf.matmul(x, w)\n        theta = tf.acos(tf.clip_by_value(logits, -1.0, 1.0))\n        target_logits = tf.cos(theta + self.m)\n\n        # Apply margin only to the target logits\n        logits = logits * (1 - labels) + target_logits * labels\n        logits *= self.s\n        return logits\n\n\n# Build the model without dropout and regularization\ndef build_arcface_vgg19(input_shape, num_classes):\n    base_model = VGG19(weights='imagenet', include_top=False, input_shape=input_shape)\n    base_model.trainable = False  # Freeze the pre-trained layers\n\n    inputs = layers.Input(shape=input_shape)\n    x = base_model(inputs, training=False)\n    \n    # Add GlobalAveragePooling2D after the base model\n    # x = layers.GlobalAveragePooling2D()(x)\n    \n\n    # Add three Dense layers with relu activation\n    x = layers.Dense(1024, activation='relu')(x)\n    x = layers.Dense(1024, activation='relu')(x)\n    x = layers.Dense(512, activation='relu')(x)\n\n    # One-hot encoded labels\n    labels = layers.Input(shape=(num_classes,))\n    \n    # ArcFace classifier layer\n    arcface_logits = ArcFaceLayer(num_classes)([x, labels])\n\n    model = models.Model(inputs=[inputs, labels], outputs=arcface_logits)\n    return model\n\n# Specify input shape and number of classes\ninput_shape = X_train.shape[1:]  # Shape of the images (height, width, channels)\nnum_classes = y_train.shape[1]   # Number of unique classes (31 in your case)\n\n# Build the ArcFace-VGG19 model without dropout or regularization\nmodel = build_arcface_vgg19(input_shape, num_classes)\n\n# Compile the model with CategoricalCrossentropy loss\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001), \n              loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True), \n              metrics=['accuracy'])\n\nmodel.summary()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-16T23:22:33.571705Z","iopub.status.idle":"2024-09-16T23:22:33.572142Z","shell.execute_reply.started":"2024-09-16T23:22:33.571935Z","shell.execute_reply":"2024-09-16T23:22:33.571956Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Training the model\nhistory = model.fit(\n    [X_train, y_train], y_train,  # Training data and one-hot encoded labels\n    validation_data=([X_val, y_val], y_val),  # Validation data\n    epochs=10,\n    batch_size=32\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:28:16.688952Z","iopub.execute_input":"2024-09-15T02:28:16.689622Z","iopub.status.idle":"2024-09-15T02:30:06.790898Z","shell.execute_reply.started":"2024-09-15T02:28:16.689580Z","shell.execute_reply":"2024-09-15T02:30:06.789942Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate on test data\ntest_loss, test_accuracy = model.evaluate([X_test, y_test], y_test)\nprint(f\"Test Accuracy: {test_accuracy}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:30:15.384379Z","iopub.execute_input":"2024-09-15T02:30:15.384749Z","iopub.status.idle":"2024-09-15T02:30:17.457506Z","shell.execute_reply.started":"2024-09-15T02:30:15.384714Z","shell.execute_reply":"2024-09-15T02:30:17.456601Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\n# Extract the accuracy and loss from the training history\naccuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(accuracy) + 1)\n\n# Plotting the accuracy graph\nplt.figure(figsize=(12, 5))\n\nplt.subplot(1, 2, 1)\nplt.plot(epochs, accuracy, 'bo-', label='Training Accuracy')\nplt.plot(epochs, val_accuracy, 'ro-', label='Validation Accuracy')\nplt.title('Training and Validation Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\n\n# Plotting the loss graph\nplt.subplot(1, 2, 2)\nplt.plot(epochs, loss, 'bo-', label='Training Loss')\nplt.plot(epochs, val_loss, 'ro-', label='Validation Loss')\nplt.title('Training and Validation Loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:30:20.978052Z","iopub.execute_input":"2024-09-15T02:30:20.978745Z","iopub.status.idle":"2024-09-15T02:30:21.583659Z","shell.execute_reply.started":"2024-09-15T02:30:20.978702Z","shell.execute_reply":"2024-09-15T02:30:21.582657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:30:24.921333Z","iopub.execute_input":"2024-09-15T02:30:24.922186Z","iopub.status.idle":"2024-09-15T02:30:24.954262Z","shell.execute_reply.started":"2024-09-15T02:30:24.922134Z","shell.execute_reply":"2024-09-15T02:30:24.953371Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tensorflow.keras.models import Model\n\n# Original model's input\ninput_images = model.input[0]  # The first input (images)\nembedding_layer = model.get_layer(\"dense_2\").output  # Output of the embedding layer\n\n# Create a new model that outputs the embeddings\nembedding_model = Model(inputs=input_images, outputs=embedding_layer)\n\n# Summary of the new model\nembedding_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:30:27.385612Z","iopub.execute_input":"2024-09-15T02:30:27.385999Z","iopub.status.idle":"2024-09-15T02:30:27.414796Z","shell.execute_reply.started":"2024-09-15T02:30:27.385963Z","shell.execute_reply":"2024-09-15T02:30:27.413953Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.get_weights()[38]","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:27:28.627458Z","iopub.execute_input":"2024-09-15T02:27:28.627854Z","iopub.status.idle":"2024-09-15T02:27:28.696898Z","shell.execute_reply.started":"2024-09-15T02:27:28.627817Z","shell.execute_reply":"2024-09-15T02:27:28.695954Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"\nembeddings = embedding_model.predict(preprocess_input(images_np))  # X_test should be your test images\nprint(embeddings.shape)  # This will output (num_samples, 512), where 512 is the embedding size","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:30:33.643816Z","iopub.execute_input":"2024-09-15T02:30:33.644209Z","iopub.status.idle":"2024-09-15T02:30:52.144825Z","shell.execute_reply.started":"2024-09-15T02:30:33.644174Z","shell.execute_reply":"2024-09-15T02:30:52.143744Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(embeddings)\n\n# Define marker styles for each class\nmarkers = ['o', 's', '^', 'D', 'v', '<', '>', 'P', '*', '+', 'x', '|', '_']\nunique_labels = np.unique(numeric_labels)\nlabel_to_marker = {label: markers[i % len(markers)] for i, label in enumerate(unique_labels)}\n\n# Plot the 2D embeddings with color based on numeric labels and different markers for each class\nplt.figure(figsize=(10, 10))\nfor label in unique_labels:\n    indices = np.where(numeric_labels == label)[0]\n    plt.scatter(embeddings_2d[indices, 0], embeddings_2d[indices, 1],\n                marker=label_to_marker[label], label=label_encoder.classes_[label],\n                s=50)  # Adjust `s` for marker size\n\nplt.legend(title=\"Person\")\nplt.title('t-SNE of Image Embeddings with Different Markers')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:30:53.730486Z","iopub.execute_input":"2024-09-15T02:30:53.730875Z","iopub.status.idle":"2024-09-15T02:31:06.485803Z","shell.execute_reply.started":"2024-09-15T02:30:53.730838Z","shell.execute_reply":"2024-09-15T02:31:06.484828Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from keras.applications import VGG16\nfrom keras.models import Model\nfrom keras.layers import Dense, Flatten, Dropout\nfrom keras.optimizers import RMSprop\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\n\n# Use your image size for the input\nimg_rows, img_cols = 224, 224\n\n# Re-loads the VGG model without the top or FC layers\nvgg = VGG16(weights='imagenet', include_top=False, input_shape=(img_rows, img_cols, 3))\n\n# Freeze layers from the pre-trained VGG model\nfor layer in vgg.layers:\n    layer.trainable = False\n\n# Custom fully connected layer (FC)\ndef Fc(bottom_model, num_classes):\n    \"\"\"Creates the top or head of the model that will be placed on top of the base layers\"\"\"\n    top_model = bottom_model.output\n    top_model = Flatten()(top_model)  # Replace GlobalAveragePooling2D with Flatten\n    top_model = Dense(1024, activation='relu')(top_model)\n    top_model = Dense(1024, activation='relu')(top_model)\n    top_model = Dense(512, activation='relu')(top_model)\n    top_model = Dropout(0.3)(top_model)  # Add dropout before the final dense layer\n    top_model = Dense(num_classes, activation='sigmoid')(top_model)  # Change activation to sigmoid\n    return top_model\n\n# Number of classes from your dataset\nnum_classes = y_train.shape[1]\n\n# Add the fully connected head to the base model\nFC_Head = Fc(vgg, num_classes)\nmodel = Model(inputs=vgg.input, outputs=FC_Head)\n\n# Print the model summary\nprint(model.summary())\n\n# Data augmentation\ntrain_datagen = ImageDataGenerator(\n    rescale=1./255,\n    rotation_range=45,\n    width_shift_range=0.3,\n    height_shift_range=0.3,\n    horizontal_flip=True,\n    fill_mode='nearest'\n)\n\nvalidation_datagen = ImageDataGenerator(rescale=1./255)\n\n# Prepare the dataset with flow\nbatch_size = 32\n\ntrain_generator = train_datagen.flow(X_train, y_train, batch_size=batch_size)\nvalidation_generator = validation_datagen.flow(X_val, y_val, batch_size=batch_size)\n\n# Set up model checkpoint and early stopping\ncheckpoint = ModelCheckpoint(\"face_vgg.keras\",  # Changed from .h5 to .keras\n                             monitor=\"val_loss\",\n                             mode=\"min\",\n                             save_best_only=True,\n                             verbose=1)\n\nearlystop = EarlyStopping(monitor='val_loss', \n                          min_delta=0, \n                          patience=3, \n                          verbose=1, \n                          restore_best_weights=True)\n\n# Callbacks list\ncallbacks = [earlystop, checkpoint]\n\n# Compile the model\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=RMSprop(learning_rate=0.0001),  # Change 'lr' to 'learning_rate'\n              metrics=['accuracy'])\n\n# Train the model using `fit` with generators\nhistory = model.fit(\n    X_train, y_train,\n    batch_size=batch_size,\n    epochs=20,\n#     callbacks=callbacks,\n    validation_data=(X_val, y_val)\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:32:55.158256Z","iopub.execute_input":"2024-09-15T02:32:55.158686Z","iopub.status.idle":"2024-09-15T02:36:04.617091Z","shell.execute_reply.started":"2024-09-15T02:32:55.158645Z","shell.execute_reply":"2024-09-15T02:36:04.616107Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:38:15.038553Z","iopub.execute_input":"2024-09-15T02:38:15.039510Z","iopub.status.idle":"2024-09-15T02:38:15.084318Z","shell.execute_reply.started":"2024-09-15T02:38:15.039459Z","shell.execute_reply":"2024-09-15T02:38:15.083334Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.models import Model\n\n# Original model's input\ninput_images = model.input[0]  # The first input (images)\nembedding_layer = model.get_layer(\"dense_2\").output  # Output of the embedding layer\n\n# Create a new model that outputs the embeddings\nembedding_model = Model(inputs=input_images, outputs=embedding_layer)\n\n# Summary of the new model\nembedding_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T02:38:02.214463Z","iopub.execute_input":"2024-09-15T02:38:02.215060Z","iopub.status.idle":"2024-09-15T02:38:02.299257Z","shell.execute_reply.started":"2024-09-15T02:38:02.215017Z","shell.execute_reply":"2024-09-15T02:38:02.298135Z"},"trusted":true},"execution_count":null,"outputs":[]}]}