{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9394165,"sourceType":"datasetVersion","datasetId":5701259},{"sourceId":9430984,"sourceType":"datasetVersion","datasetId":5729649}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 1. Data preprocess","metadata":{}},{"cell_type":"markdown","source":"## 1.1 Prepare dataset\n\nhttps://www.kaggle.com/datasets/vasukipatel/face-recognition-dataset","metadata":{}},{"cell_type":"code","source":"# Set directories\nimport os\nws_dir = '/kaggle/input'\ndataset_dir = os.path.join(ws_dir, 'dataset01')\nfaces_dir = os.path.join(dataset_dir, 'faces')","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:14:38.546287Z","iopub.execute_input":"2024-09-19T21:14:38.546725Z","iopub.status.idle":"2024-09-19T21:14:38.552935Z","shell.execute_reply.started":"2024-09-19T21:14:38.546670Z","shell.execute_reply":"2024-09-19T21:14:38.551710Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"dataset_dir","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:14:44.453835Z","iopub.execute_input":"2024-09-19T21:14:44.454742Z","iopub.status.idle":"2024-09-19T21:14:44.461420Z","shell.execute_reply.started":"2024-09-19T21:14:44.454690Z","shell.execute_reply":"2024-09-19T21:14:44.460569Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"'/kaggle/input/dataset01'"},"metadata":{}}]},{"cell_type":"markdown","source":"## 1.2 Convert dataset into numpy \n\nhttps://www.kaggle.com/datasets/vasukipatel/face-recognition-dataset","metadata":{}},{"cell_type":"code","source":"import cv2\nimport numpy as np\n\nimages = []\nlabels = []\n\n# Loop over each person directory in the faces directory\nfor person_name in os.listdir(faces_dir):\n    person_dir = os.path.join(faces_dir, person_name)\n\n    # Check if it is a directory (and not a file)\n    if os.path.isdir(person_dir):\n        # Loop over each image in the person's directory\n        for image_name in os.listdir(person_dir):\n            image_path = os.path.join(person_dir, image_name)\n\n            # Load image using OpenCV\n            image = cv2.imread(image_path)\n\n            # Optionally resize images to a standard size (e.g., 224x224)\n            image = cv2.resize(image, (224, 224))\n\n            # Convert the image to RGB (OpenCV loads images in BGR format by default)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n            # Append image and corresponding label to lists\n            images.append(image)\n            labels.append(person_name)  # The person's name is used as the label\n\n# Convert lists to NumPy arrays\nimages_np = np.array(images)\nlabels_np = np.array(labels)\n\n# Verify the shapes\nprint(f'Images shape: {images_np.shape}')  # (num_images, 224, 224, 3)\nprint(f'Labels shape: {labels_np.shape}')  # (num_images,)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:14:48.311120Z","iopub.execute_input":"2024-09-19T21:14:48.312208Z","iopub.status.idle":"2024-09-19T21:14:57.632571Z","shell.execute_reply.started":"2024-09-19T21:14:48.312152Z","shell.execute_reply":"2024-09-19T21:14:57.631632Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Images shape: (2562, 224, 224, 3)\nLabels shape: (2562,)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 1.3 input preprocessing\n* preprocess images using preprocess_input\n* convert labels to one-hot encoding","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from tensorflow.keras.applications.vgg19 import preprocess_input\nfrom sklearn.preprocessing import OneHotEncoder\nimport numpy as np\n\n# Assuming images_np and labels_np are provided\n# images_np.shape = (num_samples, height, width, channels)\n# labels_np.shape = (num_samples,)\n\n# Preprocess images for VGG19\nimages_np_preprocessed = preprocess_input(images_np)\n\n# One-hot encode labels\none_hot_encoder = OneHotEncoder(sparse=False)\nlabels_np_onehot = one_hot_encoder.fit_transform(labels_np.reshape(-1, 1))","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:15:03.122816Z","iopub.execute_input":"2024-09-19T21:15:03.123678Z","iopub.status.idle":"2024-09-19T21:15:16.179386Z","shell.execute_reply.started":"2024-09-19T21:15:03.123637Z","shell.execute_reply":"2024-09-19T21:15:16.178385Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# 2. Triplets ","metadata":{}},{"cell_type":"markdown","source":"## 2.1 create triplets\n* random selection\n* anchor, positive and negative","metadata":{}},{"cell_type":"code","source":"import numpy as np\nfrom sklearn.preprocessing import OneHotEncoder\n\ndef create_triplets(images_np, labels_np):\n    num_samples = len(images_np)\n    num_classes = labels_np.shape[1]  # Number of classes (one-hot encoded dimension)\n    \n    # Convert one-hot labels to class indices\n    labels = np.argmax(labels_np, axis=1)\n    \n    # Prepare lists to hold triplets\n    anchors = []\n    positives = []\n    negatives = []\n    anchor_labels = []\n    positive_labels = []\n    negative_labels = []\n    \n    for i in range(num_samples):\n        anchor = images_np[i]\n        anchor_label = labels[i]\n        \n        # Find indices of all samples\n        same_class_indices = np.where(labels == anchor_label)[0]\n        other_class_indices = np.where(labels != anchor_label)[0]\n        \n        # Randomly pick a positive sample from the same class\n        positive_index = np.random.choice(same_class_indices)\n        positive = images_np[positive_index]\n        positive_label = labels[positive_index]\n        \n        # Randomly pick a negative sample from a different class\n        negative_index = np.random.choice(other_class_indices)\n        negative = images_np[negative_index]\n        negative_label = labels[negative_index]\n        \n        # Append to triplet lists\n        anchors.append(anchor)\n        positives.append(positive)\n        negatives.append(negative)\n        anchor_labels.append(anchor_label)\n        positive_labels.append(positive_label)\n        negative_labels.append(negative_label)\n    \n    # Convert lists to numpy arrays\n    anchors = np.array(anchors)\n    positives = np.array(positives)\n    negatives = np.array(negatives)\n    anchor_labels = np.array(anchor_labels)\n    positive_labels = np.array(positive_labels)\n    negative_labels = np.array(negative_labels)\n    \n    # Stack triplets\n    images_triplet = np.stack([anchors, positives, negatives], axis=1)\n    \n    # Convert labels to one-hot encoding\n    one_hot_encoder = OneHotEncoder(sparse_output=False, categories=[range(num_classes)])\n    one_hot_encoder.fit(np.arange(num_classes).reshape(-1, 1))\n    \n    anchor_labels_one_hot = one_hot_encoder.transform(anchor_labels.reshape(-1, 1))\n    positive_labels_one_hot = one_hot_encoder.transform(positive_labels.reshape(-1, 1))\n    negative_labels_one_hot = one_hot_encoder.transform(negative_labels.reshape(-1, 1))\n    \n    # Stack one-hot encoded labels\n    labels_triplet = np.stack([anchor_labels_one_hot, positive_labels_one_hot, negative_labels_one_hot], axis=1)\n    \n    return images_triplet, labels_triplet\n\n# Example usage\nimages_triplet, labels_triplet = create_triplets(images_np_preprocessed, labels_np_onehot)\n\n# Check shapes\nprint(f\"Images Triplet Shape: {images_triplet.shape}\")\nprint(f\"Labels Triplet Shape: {labels_triplet.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:15:20.019168Z","iopub.execute_input":"2024-09-19T21:15:20.020432Z","iopub.status.idle":"2024-09-19T21:15:26.051208Z","shell.execute_reply.started":"2024-09-19T21:15:20.020379Z","shell.execute_reply":"2024-09-19T21:15:26.050276Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Images Triplet Shape: (2562, 3, 224, 224, 3)\nLabels Triplet Shape: (2562, 3, 31)\n","output_type":"stream"}]},{"cell_type":"code","source":"images_np[0].shape","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:15:31.858459Z","iopub.execute_input":"2024-09-19T21:15:31.859155Z","iopub.status.idle":"2024-09-19T21:15:31.865576Z","shell.execute_reply.started":"2024-09-19T21:15:31.859107Z","shell.execute_reply":"2024-09-19T21:15:31.864520Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"(224, 224, 3)"},"metadata":{}}]},{"cell_type":"markdown","source":"## 2.2 Split triplets","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\ndef split_triplets(images_triplet, labels_triplet, test_size=0.3, validation_size=0.5, random_state=42):\n    # Split into training and temporary validation+test sets\n    X_train, X_temp, y_train, y_temp = train_test_split(\n        images_triplet, labels_triplet,\n        test_size=test_size,  # 30% for validation+test\n        random_state=random_state\n    )\n    \n    # Split the temporary validation+test set into validation and test sets\n    X_val, X_test, y_val, y_test = train_test_split(\n        X_temp, y_temp,\n        test_size=validation_size,  # 50% of the 30% for test (15% of total data)\n        random_state=random_state\n    )\n    \n    # Print shapes for verification\n    print(f\"Train set: {X_train.shape}, {y_train.shape}\")\n    print(f\"Validation set: {X_val.shape}, {y_val.shape}\")\n    print(f\"Test set: {X_test.shape}, {y_test.shape}\")\n    \n    return X_train, y_train, X_val, y_val, X_test, y_test\n\n# Example usage\nX_train, y_train, X_val, y_val, X_test, y_test = split_triplets(images_triplet, labels_triplet)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:15:35.774549Z","iopub.execute_input":"2024-09-19T21:15:35.774918Z","iopub.status.idle":"2024-09-19T21:15:37.587426Z","shell.execute_reply.started":"2024-09-19T21:15:35.774882Z","shell.execute_reply":"2024-09-19T21:15:37.586422Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"Train set: (1793, 3, 224, 224, 3), (1793, 3, 31)\nValidation set: (384, 3, 224, 224, 3), (384, 3, 31)\nTest set: (385, 3, 224, 224, 3), (385, 3, 31)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## 2.3 ndarry to list","metadata":{}},{"cell_type":"code","source":"# Assuming the shape of X_train is (num_samples, 3, height, width, channels)\nanchor_train = X_train[:, 0, :, :, :]  # Take the first image in each triplet (anchor)\npositive_train = X_train[:, 1, :, :, :]  # Take the second image in each triplet (positive)\nnegative_train = X_train[:, 2, :, :, :]  # Take the third image in each triplet (negative)\n\n# Do the same for X_val\nanchor_val = X_val[:, 0, :, :, :]\npositive_val = X_val[:, 1, :, :, :]\nnegative_val = X_val[:, 2, :, :, :]\n\n# Split y_train into anchor, positive, and negative labels\nanchor_label_train = y_train[:, 0]  # Take the first label in each triplet (anchor)\npositive_label_train = y_train[:, 1]  # Take the second label in each triplet (positive)\nnegative_label_train = y_train[:, 2]  # Take the third label in each triplet (negative)\n\n# Do the same for y_val\nanchor_label_val = y_val[:, 0]  # Take the first label in each triplet (anchor)\npositive_label_val = y_val[:, 1]  # Take the second label in each triplet (positive)\nnegative_label_val = y_val[:, 2]  # Take the third label in each triplet (negative)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:15:41.205599Z","iopub.execute_input":"2024-09-19T21:15:41.206167Z","iopub.status.idle":"2024-09-19T21:15:41.213848Z","shell.execute_reply.started":"2024-09-19T21:15:41.206129Z","shell.execute_reply":"2024-09-19T21:15:41.212830Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Print shapes of training triplets (images)\nprint(\"Training Set Shapes:\")\nprint(\"Anchor images (X_train):\", anchor_train.shape)\nprint(\"Positive images (X_train):\", positive_train.shape)\nprint(\"Negative images (X_train):\", negative_train.shape)\n\n# Print shapes of validation triplets (images)\nprint(\"\\nValidation Set Shapes:\")\nprint(\"Anchor images (X_val):\", anchor_val.shape)\nprint(\"Positive images (X_val):\", positive_val.shape)\nprint(\"Negative images (X_val):\", negative_val.shape)\n\n# Print shapes of training triplets (labels)\nprint(\"\\nTraining Set Label Shapes:\")\nprint(\"Anchor labels (y_train):\", anchor_label_train.shape)\nprint(\"Positive labels (y_train):\", positive_label_train.shape)\nprint(\"Negative labels (y_train):\", negative_label_train.shape)\n\n# Print shapes of validation triplets (labels)\nprint(\"\\nValidation Set Label Shapes:\")\nprint(\"Anchor labels (y_val):\", anchor_label_val.shape)\nprint(\"Positive labels (y_val):\", positive_label_val.shape)\nprint(\"Negative labels (y_val):\", negative_label_val.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:15:44.602324Z","iopub.execute_input":"2024-09-19T21:15:44.603072Z","iopub.status.idle":"2024-09-19T21:15:44.610886Z","shell.execute_reply.started":"2024-09-19T21:15:44.603034Z","shell.execute_reply":"2024-09-19T21:15:44.609991Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Training Set Shapes:\nAnchor images (X_train): (1793, 224, 224, 3)\nPositive images (X_train): (1793, 224, 224, 3)\nNegative images (X_train): (1793, 224, 224, 3)\n\nValidation Set Shapes:\nAnchor images (X_val): (384, 224, 224, 3)\nPositive images (X_val): (384, 224, 224, 3)\nNegative images (X_val): (384, 224, 224, 3)\n\nTraining Set Label Shapes:\nAnchor labels (y_train): (1793, 31)\nPositive labels (y_train): (1793, 31)\nNegative labels (y_train): (1793, 31)\n\nValidation Set Label Shapes:\nAnchor labels (y_val): (384, 31)\nPositive labels (y_val): (384, 31)\nNegative labels (y_val): (384, 31)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model( Tunning 1 = max 94.1%)","metadata":{}},{"cell_type":"code","source":"pip install keras-facenet\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T11:44:57.377546Z","iopub.execute_input":"2024-09-19T11:44:57.378341Z","iopub.status.idle":"2024-09-19T11:45:14.326764Z","shell.execute_reply.started":"2024-09-19T11:44:57.378300Z","shell.execute_reply":"2024-09-19T11:45:14.325610Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Collecting keras-facenet\n  Downloading keras-facenet-0.3.2.tar.gz (10 kB)\n  Preparing metadata (setup.py) ... \u001b[?25ldone\n\u001b[?25hCollecting mtcnn (from keras-facenet)\n  Downloading mtcnn-0.1.1-py3-none-any.whl.metadata (5.8 kB)\nRequirement already satisfied: keras>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from mtcnn->keras-facenet) (3.3.3)\nRequirement already satisfied: opencv-python>=4.1.0 in /opt/conda/lib/python3.10/site-packages (from mtcnn->keras-facenet) (4.10.0.84)\nRequirement already satisfied: absl-py in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (1.4.0)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (1.26.4)\nRequirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (13.7.1)\nRequirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (0.0.8)\nRequirement already satisfied: h5py in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (3.11.0)\nRequirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (0.11.0)\nRequirement already satisfied: ml-dtypes in /opt/conda/lib/python3.10/site-packages (from keras>=2.0.0->mtcnn->keras-facenet) (0.3.2)\nRequirement already satisfied: typing-extensions>=4.0.0 in /opt/conda/lib/python3.10/site-packages (from optree->keras>=2.0.0->mtcnn->keras-facenet) (4.12.2)\nRequirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=2.0.0->mtcnn->keras-facenet) (3.0.0)\nRequirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=2.0.0->mtcnn->keras-facenet) (2.18.0)\nRequirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras>=2.0.0->mtcnn->keras-facenet) (0.1.2)\nDownloading mtcnn-0.1.1-py3-none-any.whl (2.3 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.3/2.3 MB\u001b[0m \u001b[31m9.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m0:01\u001b[0m0m\n\u001b[?25hBuilding wheels for collected packages: keras-facenet\n  Building wheel for keras-facenet (setup.py) ... \u001b[?25ldone\n\u001b[?25h  Created wheel for keras-facenet: filename=keras_facenet-0.3.2-py3-none-any.whl size=10369 sha256=9645d41fdc4d649d3c8fec1a84f35ba6def8fbc9bb86330eeeb2a43429fdaf79\n  Stored in directory: /root/.cache/pip/wheels/1d/d8/a9/85cf04ea29321d2afcb82c0caaafdca9195385f9d68cbc7185\nSuccessfully built keras-facenet\nInstalling collected packages: mtcnn, keras-facenet\nSuccessfully installed keras-facenet-0.3.2 mtcnn-0.1.1\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"from keras_facenet import FaceNet\ndef build_facenet_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    anchor_input = layers.Input(shape=input_shape, name='anchor_input')\n    positive_input = layers.Input(shape=input_shape, name='positive_input')\n    negative_input = layers.Input(shape=input_shape, name='negative_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define FaceNet backbone\n    base_model = FaceNet().model  # Load FaceNet pre-trained model\n    base_model.trainable = False  # Optionally, freeze the FaceNet backbone\n\n    # Flatten the output of the FaceNet backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n\n    # Add fully connected layers on top of the FaceNet backbone\n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for anchor, positive, and negative\n    embedding_anchor = embedding_model(anchor_input)\n    embedding_positive = embedding_model(positive_input)\n    embedding_negative = embedding_model(negative_input)\n\n    # Define logits for classification using anchor embedding only\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding_anchor)\n\n    # Define the custom triplet loss layer\n    triplet_loss_layer = TripletLossLayer(margin=1.0)\n    triplet_loss_output = triplet_loss_layer([embedding_anchor, embedding_positive, embedding_negative])\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding_anchor, labels_input])\n\n    # Define the triplet model (used for embedding training)\n    triplet_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input], \n        outputs=[embedding_anchor, embedding_positive, embedding_negative],\n        name='triplet_model'\n    )\n\n    # Define the full model with classification, center loss, and triplet loss\n    full_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input, labels_input],\n        outputs=[logits, center_loss_output, triplet_loss_output],\n        name='full_model'\n    )\n\n    return triplet_model, full_model","metadata":{"execution":{"iopub.status.busy":"2024-09-19T11:45:14.353311Z","iopub.execute_input":"2024-09-19T11:45:14.353657Z","iopub.status.idle":"2024-09-19T11:45:14.367056Z","shell.execute_reply.started":"2024-09-19T11:45:14.353617Z","shell.execute_reply":"2024-09-19T11:45:14.366021Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Triplet Loss Layer with Cosine Similarity\nclass TripletLossLayer(tf.keras.layers.Layer):\n    def __init__(self, margin=0.35, **kwargs):\n        super(TripletLossLayer, self).__init__(**kwargs)\n        self.margin = margin\n\n    def call(self, inputs):\n        anchor, positive, negative = inputs\n\n        # Normalize the embeddings to unit vectors for cosine similarity\n        anchor_normalized = tf.nn.l2_normalize(anchor, axis=-1)\n        positive_normalized = tf.nn.l2_normalize(positive, axis=-1)\n        negative_normalized = tf.nn.l2_normalize(negative, axis=-1)\n\n        # Compute cosine similarity: negative cosine similarity is used because we want to minimize distance\n        positive_similarity = tf.reduce_sum(anchor_normalized * positive_normalized, axis=-1)  # Cosine similarity between anchor and positive\n        negative_similarity = tf.reduce_sum(anchor_normalized * negative_normalized, axis=-1)  # Cosine similarity between anchor and negative\n\n        # Compute triplet loss (maximize positive similarity and minimize negative similarity)\n        triplet_loss = tf.maximum(0.0, negative_similarity - positive_similarity + self.margin)\n\n        return tf.reduce_mean(triplet_loss)\n\n\ndef build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    anchor_input = layers.Input(shape=input_shape, name='anchor_input')\n    positive_input = layers.Input(shape=input_shape, name='positive_input')\n    negative_input = layers.Input(shape=input_shape, name='negative_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n    #base_model.trainable = False  # Optionally, freeze the base model to avoid retraining ImageNet weights\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n    \n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n#     x = layers.Dropout(dropout_rate)(x)\n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for anchor, positive, and negative\n    embedding_anchor = embedding_model(anchor_input)\n    embedding_positive = embedding_model(positive_input)\n    embedding_negative = embedding_model(negative_input)\n\n    # Define logits for classification using anchor embedding only\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding_anchor)\n\n    # Define the custom triplet loss layer\n    triplet_loss_layer = TripletLossLayer(margin=1.0)\n    triplet_loss_output = triplet_loss_layer([embedding_anchor, embedding_positive, embedding_negative])\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding_anchor, labels_input])\n\n    # Define the triplet model (used for embedding training)\n    triplet_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input], \n        outputs=[embedding_anchor, embedding_positive, embedding_negative],\n        name='triplet_model'\n    )\n\n    # Define the full model with classification, center loss, and triplet loss\n    full_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input, labels_input],\n        outputs=[logits, center_loss_output, triplet_loss_output],\n        name='full_model'\n    )\n\n    return triplet_model, full_model\n\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    # History dictionary to store losses and accuracies over epochs\n    history = {\n        \"train_loss\": [],\n        \"train_class_loss\": [],\n        \"train_center_loss\": [],\n        \"train_triplet_loss\": [],\n        \"train_acc\": [],\n        \"val_class_loss\": [],\n        \"val_center_loss\": [],\n        \"val_triplet_loss\": [],\n        \"val_acc\": []\n    }\n\n    @tf.function\n    def train_step(anchor, positive, negative, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            outputs = model([anchor, positive, negative, labels], training=True)\n            logits, center_loss, triplet_loss = outputs  # Expecting 3 outputs here\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + center_loss_weight * center_loss + triplet_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, triplet_loss, train_acc\n\n    @tf.function\n    def eval_step(anchor, positive, negative, labels):\n        logits, center_loss, triplet_loss = model([anchor, positive, negative, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, triplet_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_triplet_loss, epoch_acc = 0, 0, 0, 0, 0\n        for batch_start in range(0, len(X_train[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train[0]))\n            anchor_batch = X_train[0][batch_start:batch_end]\n            positive_batch = X_train[1][batch_start:batch_end]\n            negative_batch = X_train[2][batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            total_loss, class_loss, center_loss, triplet_loss, acc = train_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            epoch_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_triplet_loss += triplet_loss\n            epoch_acc += acc\n\n        # Validation loop\n        val_class_loss, val_center_loss, val_triplet_loss, val_acc = 0, 0, 0, 0\n        for batch_start in range(0, len(X_val[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val[0]))\n            anchor_batch = X_val[0][batch_start:batch_end]\n            positive_batch = X_val[1][batch_start:batch_end]\n            negative_batch = X_val[2][batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            class_loss, center_loss, triplet_loss, acc = eval_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_triplet_loss += triplet_loss\n            val_acc += acc\n\n        # Average out the losses and accuracies\n        epoch_loss /= (len(X_train[0]) // batch_size)\n        epoch_class_loss /= (len(X_train[0]) // batch_size)\n        epoch_center_loss /= (len(X_train[0]) // batch_size)\n        epoch_triplet_loss /= (len(X_train[0]) // batch_size)\n        epoch_acc /= (len(X_train[0]) // batch_size)\n\n        val_class_loss /= (len(X_val[0]) // batch_size)\n        val_center_loss /= (len(X_val[0]) // batch_size)\n        val_triplet_loss /= (len(X_val[0]) // batch_size)\n        val_acc /= (len(X_val[0]) // batch_size)\n\n        # Log losses and accuracies in the history\n        history[\"train_loss\"].append(epoch_loss.numpy())\n        history[\"train_class_loss\"].append(epoch_class_loss.numpy())\n        history[\"train_center_loss\"].append(epoch_center_loss.numpy())\n        history[\"train_triplet_loss\"].append(epoch_triplet_loss.numpy())\n        history[\"train_acc\"].append(epoch_acc.numpy())\n        history[\"val_class_loss\"].append(val_class_loss.numpy())\n        history[\"val_center_loss\"].append(val_center_loss.numpy())\n        history[\"val_triplet_loss\"].append(val_triplet_loss.numpy())\n        history[\"val_acc\"].append(val_acc.numpy())\n\n        # Print losses and accuracies\n        print(f\"Training loss: {epoch_loss.numpy():.4f}, \"\n              f\"Classification Loss: {epoch_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {epoch_center_loss.numpy():.4f}, \"\n              f\"Triplet Loss: {epoch_triplet_loss.numpy():.4f}, \"\n              f\"Accuracy: {epoch_acc.numpy():.4f}\")\n        \n        print(f\"Validation Classification Loss: {val_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {val_center_loss.numpy():.4f}, \"\n              f\"Triplet Loss: {val_triplet_loss.numpy():.4f}, \"\n              f\"Accuracy: {val_acc.numpy():.4f}\\n\")\n\n    return history\n\n\n# Example usage\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 768\ndropout_rate = 0.2\nweight_decay = 0.05 #1e-4\ncenter_loss_weight = 0.01 #0.01\nlearning_rate = 1e-4\nbatch_size = 32\nepochs = 20\n\n# Assume X_train, y_train, X_val, y_val are already defined\n# Preprocessing and splitting code should be executed before this\n\ntriplet_model, full_model = build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n# Example function call to train and evaluate\n# history = train_and_evaluate(\n#             full_model,\n#             [anchor_train, positive_train, negative_train],  # Input triplets for training\n#             anchor_label_train,  # Only use anchor labels for training\n#             [anchor_val, positive_val, negative_val],  # Input triplets for validation\n#             anchor_label_val,  # Only use anchor labels for validation\n#             batch_size,\n#             epochs,\n#             center_loss_weight,\n#             learning_rate\n#         )","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:16:13.791821Z","iopub.execute_input":"2024-09-19T21:16:13.792253Z","iopub.status.idle":"2024-09-19T21:16:15.718799Z","shell.execute_reply.started":"2024-09-19T21:16:13.792212Z","shell.execute_reply":"2024-09-19T21:16:15.718000Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m80134624/80134624\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\ndef plot_history(history):\n    epochs = range(1, len(history[\"train_loss\"]) + 1)\n\n    # Create figure and axis objects\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\n\n    # Plot losses\n    ax1.plot(epochs, history[\"train_loss\"], 'b', label='Training Loss')\n    ax1.plot(epochs, history[\"val_class_loss\"], 'r', label='Validation Classification Loss')\n    ax1.plot(epochs, history[\"train_center_loss\"], 'g', label='Training Center Loss')\n    ax1.plot(epochs, history[\"val_center_loss\"], 'y', label='Validation Center Loss')\n    ax1.plot(epochs, history[\"train_triplet_loss\"], 'm', label='Training Triplet Loss')\n    ax1.plot(epochs, history[\"val_triplet_loss\"], 'c', label='Validation Triplet Loss')\n    ax1.set_xlabel('Epochs')\n    ax1.set_ylabel('Loss')\n    ax1.legend()\n    ax1.set_title('Training and Validation Losses')\n\n    # Plot accuracies\n    ax2.plot(epochs, history[\"train_acc\"], 'b', label='Training Accuracy')\n    ax2.plot(epochs, history[\"val_acc\"], 'r', label='Validation Accuracy')\n    ax2.set_xlabel('Epochs')\n    ax2.set_ylabel('Accuracy')\n    ax2.legend()\n    ax2.set_title('Training and Validation Accuracy')\n\n    # Adjust layout\n    plt.tight_layout()\n    plt.show()\n\n# Example usage\nplot_history(history)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:08:54.821886Z","iopub.execute_input":"2024-09-19T17:08:54.822823Z","iopub.status.idle":"2024-09-19T17:08:55.469942Z","shell.execute_reply.started":"2024-09-19T17:08:54.822782Z","shell.execute_reply":"2024-09-19T17:08:55.469018Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1200 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"triplet_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:13:17.414648Z","iopub.execute_input":"2024-09-19T17:13:17.415031Z","iopub.status.idle":"2024-09-19T17:13:17.441943Z","shell.execute_reply.started":"2024-09-19T17:13:17.414995Z","shell.execute_reply":"2024-09-19T17:13:17.440983Z"},"trusted":true},"execution_count":24,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"triplet_model\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"triplet_model\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ anchor_input        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ positive_input      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ negative_input      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │ \u001b[38;5;34m53,886,963\u001b[0m │ anchor_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n│ (\u001b[38;5;33mFunctional\u001b[0m)        │                   │            │ positive_input[\u001b[38;5;34m0\u001b[0m… │\n│                     │                   │            │ negative_input[\u001b[38;5;34m0\u001b[0m… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ anchor_input        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ positive_input      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ negative_input      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │ <span style=\"color: #00af00; text-decoration-color: #00af00\">53,886,963</span> │ anchor_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)        │                   │            │ positive_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n│                     │                   │            │ negative_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m53,886,963\u001b[0m (205.56 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">53,886,963</span> (205.56 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m45,661,619\u001b[0m (174.19 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">45,661,619</span> (174.19 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m8,225,344\u001b[0m (31.38 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,225,344</span> (31.38 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"full_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:16:23.274910Z","iopub.execute_input":"2024-09-19T21:16:23.275802Z","iopub.status.idle":"2024-09-19T21:16:23.306172Z","shell.execute_reply.started":"2024-09-19T21:16:23.275761Z","shell.execute_reply":"2024-09-19T21:16:23.305349Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"full_model\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"full_model\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)       \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape     \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m   Param #\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mConnected to     \u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ anchor_input        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ positive_input      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ negative_input      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m,  │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │ \u001b[38;5;34m3\u001b[0m)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)       │ \u001b[38;5;34m53,886,963\u001b[0m │ anchor_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n│ (\u001b[38;5;33mFunctional\u001b[0m)        │                   │            │ positive_input[\u001b[38;5;34m0\u001b[0m… │\n│                     │                   │            │ negative_input[\u001b[38;5;34m0\u001b[0m… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ labels_input        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m31\u001b[0m)        │          \u001b[38;5;34m0\u001b[0m │ -                 │\n│ (\u001b[38;5;33mInputLayer\u001b[0m)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ classification_lay… │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m31\u001b[0m)        │     \u001b[38;5;34m23,839\u001b[0m │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n│ (\u001b[38;5;33mDense\u001b[0m)             │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ center_loss_layer   │ ()                │     \u001b[38;5;34m23,808\u001b[0m │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n│ (\u001b[38;5;33mCenterLossLayer\u001b[0m)   │                   │            │ labels_input[\u001b[38;5;34m0\u001b[0m][\u001b[38;5;34m…\u001b[0m │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ triplet_loss_layer  │ ()                │          \u001b[38;5;34m0\u001b[0m │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n│ (\u001b[38;5;33mTripletLossLayer\u001b[0m)  │                   │            │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n│                     │                   │            │ embedding_model[\u001b[38;5;34m…\u001b[0m │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)        </span>┃<span style=\"font-weight: bold\"> Output Shape      </span>┃<span style=\"font-weight: bold\">    Param # </span>┃<span style=\"font-weight: bold\"> Connected to      </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━┩\n│ anchor_input        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ positive_input      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ negative_input      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>,  │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)                │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ embedding_model     │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)       │ <span style=\"color: #00af00; text-decoration-color: #00af00\">53,886,963</span> │ anchor_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)        │                   │            │ positive_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n│                     │                   │            │ negative_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>… │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ labels_input        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">31</span>)        │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ -                 │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ classification_lay… │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">31</span>)        │     <span style=\"color: #00af00; text-decoration-color: #00af00\">23,839</span> │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)             │                   │            │                   │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ center_loss_layer   │ ()                │     <span style=\"color: #00af00; text-decoration-color: #00af00\">23,808</span> │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">CenterLossLayer</span>)   │                   │            │ labels_input[<span style=\"color: #00af00; text-decoration-color: #00af00\">0</span>][<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n├─────────────────────┼───────────────────┼────────────┼───────────────────┤\n│ triplet_loss_layer  │ ()                │          <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">TripletLossLayer</span>)  │                   │            │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n│                     │                   │            │ embedding_model[<span style=\"color: #00af00; text-decoration-color: #00af00\">…</span> │\n└─────────────────────┴───────────────────┴────────────┴───────────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m53,934,610\u001b[0m (205.74 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">53,934,610</span> (205.74 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m45,685,458\u001b[0m (174.28 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">45,685,458</span> (174.28 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m8,249,152\u001b[0m (31.47 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,249,152</span> (31.47 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"# Extract the embedding model\nembedding_model = triplet_model.get_layer('embedding_model')\nembedding_model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-19T21:18:22.303426Z","iopub.execute_input":"2024-09-19T21:18:22.303679Z","iopub.status.idle":"2024-09-19T21:18:22.346391Z","shell.execute_reply.started":"2024-09-19T21:18:22.303649Z","shell.execute_reply":"2024-09-19T21:18:22.345520Z"},"trusted":true},"execution_count":16,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"embedding_model\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"embedding_model\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │         \u001b[38;5;34m1,792\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │        \u001b[38;5;34m36,928\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m64\u001b[0m)   │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │        \u001b[38;5;34m73,856\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m112\u001b[0m, \u001b[38;5;34m128\u001b[0m)  │       \u001b[38;5;34m147,584\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m128\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m295,168\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv4 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m56\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │       \u001b[38;5;34m590,080\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m256\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m1,180,160\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv4 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv1 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv2 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv3 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv4 (\u001b[38;5;33mConv2D\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m512\u001b[0m)    │     \u001b[38;5;34m2,359,808\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_pool (\u001b[38;5;33mMaxPooling2D\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m512\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m25088\u001b[0m)          │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1231\u001b[0m)           │    \u001b[38;5;34m30,884,559\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1231\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m987\u001b[0m)            │     \u001b[38;5;34m1,215,984\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m987\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1003\u001b[0m)           │       \u001b[38;5;34m990,964\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m768\u001b[0m)            │       \u001b[38;5;34m771,072\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block1_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)   │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">112</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)  │       <span style=\"color: #00af00; text-decoration-color: #00af00\">147,584</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block2_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">295,168</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_conv4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">56</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │       <span style=\"color: #00af00; text-decoration-color: #00af00\">590,080</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block3_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,180,160</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_conv4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block4_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_conv4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)    │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,359,808</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ block5_pool (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">25088</span>)          │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1231</span>)           │    <span style=\"color: #00af00; text-decoration-color: #00af00\">30,884,559</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1231</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">987</span>)            │     <span style=\"color: #00af00; text-decoration-color: #00af00\">1,215,984</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">987</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1003</span>)           │       <span style=\"color: #00af00; text-decoration-color: #00af00\">990,964</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">768</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">771,072</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m53,886,963\u001b[0m (205.56 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">53,886,963</span> (205.56 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m45,661,619\u001b[0m (174.19 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">45,661,619</span> (174.19 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m8,225,344\u001b[0m (31.38 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">8,225,344</span> (31.38 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"image_embeddings = embedding_model.predict(images_np_preprocessed)","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:25:13.533019Z","iopub.execute_input":"2024-09-19T17:25:13.533713Z","iopub.status.idle":"2024-09-19T17:25:47.681874Z","shell.execute_reply.started":"2024-09-19T17:25:13.533671Z","shell.execute_reply":"2024-09-19T17:25:47.680922Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1726766718.063864     106 service.cc:145] XLA service 0x7e46580023b0 initialized for platform CUDA (this does not guarantee that XLA will be used). Devices:\nI0000 00:00:1726766718.063923     106 service.cc:153]   StreamExecutor device (0): Tesla T4, Compute Capability 7.5\nI0000 00:00:1726766718.063929     106 service.cc:153]   StreamExecutor device (1): Tesla T4, Compute Capability 7.5\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m 2/81\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m12s\u001b[0m 152ms/step","output_type":"stream"},{"name":"stderr","text":"I0000 00:00:1726766731.851867     106 device_compiler.h:188] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m81/81\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m30s\u001b[0m 196ms/step\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Visualize embeddings","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import LabelEncoder\n\n# Sample image embeddings and labels\n# image_embeddings = ... (your embeddings)\n# labels_np = ... (your string labels)\n\n# Convert string labels to numeric labels\nlabel_encoder = LabelEncoder()\nnumeric_labels = label_encoder.fit_transform(labels_np)\n\n# Use t-SNE to reduce the embedding space to 2D for visualization\ntsne = TSNE(n_components=2, random_state=42)\nembeddings_2d = tsne.fit_transform(image_embeddings)\n\n# Define marker styles for each class\nmarkers = ['o', 's', '^', 'D', 'v', '<', '>', 'P', '*', '+', 'x', '|', '_']\nunique_labels = np.unique(numeric_labels)\nlabel_to_marker = {label: markers[i % len(markers)] for i, label in enumerate(unique_labels)}\n\n# Plot the 2D embeddings with color based on numeric labels and different markers for each class\nplt.figure(figsize=(10, 10))\nfor label in unique_labels:\n    indices = np.where(numeric_labels == label)[0]\n    plt.scatter(embeddings_2d[indices, 0], embeddings_2d[indices, 1],\n                marker=label_to_marker[label], label=label_encoder.classes_[label],\n                s=50)  # Adjust `s` for marker size\n\nplt.legend(title=\"Person\")\nplt.title('t-SNE of Image Embeddings with Different Markers')\nplt.xlabel('Component 1')\nplt.ylabel('Component 2')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T17:25:50.329368Z","iopub.execute_input":"2024-09-19T17:25:50.330124Z","iopub.status.idle":"2024-09-19T17:26:00.306008Z","shell.execute_reply.started":"2024-09-19T17:25:50.330088Z","shell.execute_reply":"2024-09-19T17:26:00.305098Z"},"trusted":true},"execution_count":31,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Model (Tunnning 2 Max=?)","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\n# Center Loss Layer\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=1.0, alpha=0.001, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Compute the loss\n        incorrect_loss = tf.maximum(0.0, self.margin - min_incorrect_distances)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - tf.reduce_mean(distances, axis=1)))\n\n        return center_loss + tf.reduce_mean(incorrect_loss)\n\n# Triplet Loss Layer with Cosine Similarity\nclass TripletLossLayer(tf.keras.layers.Layer):\n    def __init__(self, margin=0.35, **kwargs):\n        super(TripletLossLayer, self).__init__(**kwargs)\n        self.margin = margin\n\n    def call(self, inputs):\n        anchor, positive, negative = inputs\n\n        # Normalize the embeddings to unit vectors for cosine similarity\n        anchor_normalized = tf.nn.l2_normalize(anchor, axis=-1)\n        positive_normalized = tf.nn.l2_normalize(positive, axis=-1)\n        negative_normalized = tf.nn.l2_normalize(negative, axis=-1)\n\n        # Compute cosine similarity: negative cosine similarity is used because we want to minimize distance\n        positive_similarity = tf.reduce_sum(anchor_normalized * positive_normalized, axis=-1)  # Cosine similarity between anchor and positive\n        negative_similarity = tf.reduce_sum(anchor_normalized * negative_normalized, axis=-1)  # Cosine similarity between anchor and negative\n\n        # Compute triplet loss (maximize positive similarity and minimize negative similarity)\n        triplet_loss = tf.maximum(0.0, negative_similarity - positive_similarity + self.margin)\n\n        return tf.reduce_mean(triplet_loss)\n\n\ndef build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    anchor_input = layers.Input(shape=input_shape, name='anchor_input')\n    positive_input = layers.Input(shape=input_shape, name='positive_input')\n    negative_input = layers.Input(shape=input_shape, name='negative_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n    #base_model.trainable = False  # Optionally, freeze the base model to avoid retraining ImageNet weights\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n    \n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n#     x = layers.Dropout(dropout_rate)(x)\n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for anchor, positive, and negative\n    embedding_anchor = embedding_model(anchor_input)\n    embedding_positive = embedding_model(positive_input)\n    embedding_negative = embedding_model(negative_input)\n\n    # Define logits for classification using anchor embedding only\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding_anchor)\n\n    # Define the custom triplet loss layer\n    triplet_loss_layer = TripletLossLayer(margin=1.0)\n    triplet_loss_output = triplet_loss_layer([embedding_anchor, embedding_positive, embedding_negative])\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding_anchor, labels_input])\n\n    # Define the triplet model (used for embedding training)\n    triplet_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input], \n        outputs=[embedding_anchor, embedding_positive, embedding_negative],\n        name='triplet_model'\n    )\n\n    # Define the full model with classification, center loss, and triplet loss\n    full_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input, labels_input],\n        outputs=[logits, center_loss_output, triplet_loss_output],\n        name='full_model'\n    )\n\n    return triplet_model, full_model\n\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    @tf.function\n    def train_step(anchor, positive, negative, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            outputs = model([anchor, positive, negative, labels], training=True)\n            logits, center_loss, triplet_loss = outputs  # Expecting 3 outputs here\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + 0.05 * center_loss + triplet_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, triplet_loss, train_acc\n\n    @tf.function\n    def eval_step(anchor, positive, negative, labels):\n        logits, center_loss, triplet_loss = model([anchor, positive, negative, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, triplet_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_triplet_loss, epoch_acc = 0, 0, 0, 0, 0\n        for batch_start in range(0, len(X_train[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train[0]))\n            anchor_batch = X_train[0][batch_start:batch_end]\n            positive_batch = X_train[1][batch_start:batch_end]\n            negative_batch = X_train[2][batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            total_loss, class_loss, center_loss, triplet_loss, acc = train_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            epoch_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_triplet_loss += triplet_loss\n            epoch_acc += acc\n\n        # Validation loop\n        val_loss, val_class_loss, val_center_loss, val_triplet_loss, val_acc = 0, 0, 0, 0, 0\n        for batch_start in range(0, len(X_val[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val[0]))\n            anchor_batch = X_val[0][batch_start:batch_end]\n            positive_batch = X_val[1][batch_start:batch_end]\n            negative_batch = X_val[2][batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            class_loss, center_loss, triplet_loss, acc = eval_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_triplet_loss += triplet_loss\n            val_acc += acc\n\n        # Average out the losses and accuracies\n        epoch_loss /= (len(X_train[0]) // batch_size)\n        epoch_class_loss /= (len(X_train[0]) // batch_size)\n        epoch_center_loss /= (len(X_train[0]) // batch_size)\n        epoch_triplet_loss /= (len(X_train[0]) // batch_size)\n        epoch_acc /= (len(X_train[0]) // batch_size)\n\n        val_class_loss /= (len(X_val[0]) // batch_size)\n        val_center_loss /= (len(X_val[0]) // batch_size)\n        val_triplet_loss /= (len(X_val[0]) // batch_size)\n        val_acc /= (len(X_val[0]) // batch_size)\n\n        # Print losses and accuracies\n        print(f\"Training loss: {epoch_loss.numpy():.4f}, \"\n              f\"Classification Loss: {epoch_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {epoch_center_loss.numpy():.4f}, \"\n              f\"Triplet Loss: {epoch_triplet_loss.numpy():.4f}, \"\n              f\"Accuracy: {epoch_acc.numpy():.4f}\")\n        \n        print(f\"Validation Classification Loss: {val_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {val_center_loss.numpy():.4f}, \"\n              f\"Triplet Loss: {val_triplet_loss.numpy():.4f}, \"\n              f\"Accuracy: {val_acc.numpy():.4f}\\n\")\n\n# Example usage\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 768\ndropout_rate = 0.2\nweight_decay = 0.3 #1e-4\ncenter_loss_weight = 0.01 #0.01\nlearning_rate = 1e-4\nbatch_size = 32\nepochs = 25\n\n# Assume X_train, y_train, X_val, y_val are already defined\n# Preprocessing and splitting code should be executed before this\n\ntriplet_model, full_model = build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n# Example function call to train and evaluate\ntrain_and_evaluate(\n    full_model,\n    [anchor_train, positive_train, negative_train],  # Input triplets for training\n    anchor_label_train,  # Only use anchor labels for training\n    [anchor_val, positive_val, negative_val],  # Input triplets for validation\n    anchor_label_val,  # Only use anchor labels for validation\n    batch_size,\n    epochs,\n    center_loss_weight,\n    learning_rate\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T14:31:47.968774Z","iopub.execute_input":"2024-09-19T14:31:47.969129Z","iopub.status.idle":"2024-09-19T14:44:53.979539Z","shell.execute_reply.started":"2024-09-19T14:31:47.969096Z","shell.execute_reply":"2024-09-19T14:44:53.978250Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg19/vgg19_weights_tf_dim_ordering_tf_kernels_notop.h5\n\u001b[1m80134624/80134624\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\nEpoch 1/25\nTraining loss: 4.0516, Classification Loss: 3.1967, Center Loss: 1.4757, Triplet Loss: 0.7812, Accuracy: 0.1323\nValidation Classification Loss: 2.3926, Center Loss: 4.6040, Triplet Loss: 0.4818, Accuracy: 0.2865\n\nEpoch 2/25\nTraining loss: 2.9671, Classification Loss: 2.1938, Center Loss: 5.7078, Triplet Loss: 0.4880, Accuracy: 0.4068\nValidation Classification Loss: 1.8873, Center Loss: 7.7654, Triplet Loss: 0.3809, Accuracy: 0.4479\n\nEpoch 3/25\nTraining loss: 2.6090, Classification Loss: 1.6501, Center Loss: 10.8187, Triplet Loss: 0.4180, Accuracy: 0.5714\nValidation Classification Loss: 1.6992, Center Loss: 4.4286, Triplet Loss: 0.3577, Accuracy: 0.5911\n\nEpoch 4/25\nTraining loss: 2.2284, Classification Loss: 1.4219, Center Loss: 8.1693, Triplet Loss: 0.3981, Accuracy: 0.6869\nValidation Classification Loss: 1.4771, Center Loss: 7.9103, Triplet Loss: 0.3247, Accuracy: 0.6589\n\nEpoch 5/25\nTraining loss: 1.9535, Classification Loss: 1.0411, Center Loss: 10.7985, Triplet Loss: 0.3725, Accuracy: 0.8510\nValidation Classification Loss: 1.2888, Center Loss: 9.0333, Triplet Loss: 0.3313, Accuracy: 0.7552\n\nEpoch 6/25\nTraining loss: 1.7340, Classification Loss: 0.8498, Center Loss: 10.6314, Triplet Loss: 0.3526, Accuracy: 0.9169\nValidation Classification Loss: 1.2063, Center Loss: 9.2587, Triplet Loss: 0.3161, Accuracy: 0.7526\n\nEpoch 7/25\nTraining loss: 1.9219, Classification Loss: 0.7096, Center Loss: 17.5244, Triplet Loss: 0.3361, Accuracy: 0.9749\nValidation Classification Loss: 1.2467, Center Loss: 8.7847, Triplet Loss: 0.2988, Accuracy: 0.8203\n\nEpoch 8/25\nTraining loss: 1.7802, Classification Loss: 0.8159, Center Loss: 12.3750, Triplet Loss: 0.3456, Accuracy: 0.9704\nValidation Classification Loss: 1.1079, Center Loss: 11.0661, Triplet Loss: 0.2779, Accuracy: 0.8438\n\nEpoch 9/25\nTraining loss: 1.6634, Classification Loss: 0.6588, Center Loss: 14.1126, Triplet Loss: 0.2990, Accuracy: 1.0011\nValidation Classification Loss: 1.2605, Center Loss: 9.7775, Triplet Loss: 0.2653, Accuracy: 0.8203\n\nEpoch 10/25\nTraining loss: 1.5949, Classification Loss: 0.6589, Center Loss: 13.6684, Triplet Loss: 0.2526, Accuracy: 0.9967\nValidation Classification Loss: 1.1055, Center Loss: 11.1397, Triplet Loss: 0.2304, Accuracy: 0.8620\n\nEpoch 11/25\nTraining loss: 1.6219, Classification Loss: 0.6231, Center Loss: 15.2535, Triplet Loss: 0.2361, Accuracy: 1.0140\nValidation Classification Loss: 1.1565, Center Loss: 9.8441, Triplet Loss: 0.2188, Accuracy: 0.8958\n\nEpoch 12/25\nTraining loss: 1.6216, Classification Loss: 0.6689, Center Loss: 14.7605, Triplet Loss: 0.2147, Accuracy: 1.0140\nValidation Classification Loss: 1.1502, Center Loss: 10.3282, Triplet Loss: 0.2206, Accuracy: 0.9062\n\nEpoch 13/25\nTraining loss: 1.6328, Classification Loss: 0.6390, Center Loss: 15.7459, Triplet Loss: 0.2064, Accuracy: 1.0156\nValidation Classification Loss: 1.1922, Center Loss: 10.2872, Triplet Loss: 0.2100, Accuracy: 0.9089\n\nEpoch 14/25\nTraining loss: 1.6328, Classification Loss: 0.6805, Center Loss: 15.4406, Triplet Loss: 0.1803, Accuracy: 1.0167\nValidation Classification Loss: 1.1392, Center Loss: 10.9102, Triplet Loss: 0.2096, Accuracy: 0.9245\n\nEpoch 15/25\nTraining loss: 1.6314, Classification Loss: 0.6536, Center Loss: 16.3676, Triplet Loss: 0.1594, Accuracy: 1.0173\nValidation Classification Loss: 1.0775, Center Loss: 11.9830, Triplet Loss: 0.2034, Accuracy: 0.9219\n\nEpoch 16/25\nTraining loss: 1.6520, Classification Loss: 0.7087, Center Loss: 15.6492, Triplet Loss: 0.1608, Accuracy: 1.0167\nValidation Classification Loss: 1.0995, Center Loss: 11.3044, Triplet Loss: 0.2015, Accuracy: 0.9167\n\nEpoch 17/25\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[10], line 265\u001b[0m\n\u001b[1;32m    263\u001b[0m triplet_model, full_model \u001b[38;5;241m=\u001b[39m build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\u001b[1;32m    264\u001b[0m \u001b[38;5;66;03m# Example function call to train and evaluate\u001b[39;00m\n\u001b[0;32m--> 265\u001b[0m \u001b[43mtrain_and_evaluate\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    266\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfull_model\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    267\u001b[0m \u001b[43m    \u001b[49m\u001b[43m[\u001b[49m\u001b[43manchor_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpositive_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnegative_train\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Input triplets for training\u001b[39;49;00m\n\u001b[1;32m    268\u001b[0m \u001b[43m    \u001b[49m\u001b[43manchor_label_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Only use anchor labels for training\u001b[39;49;00m\n\u001b[1;32m    269\u001b[0m \u001b[43m    \u001b[49m\u001b[43m[\u001b[49m\u001b[43manchor_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpositive_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnegative_val\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Input triplets for validation\u001b[39;49;00m\n\u001b[1;32m    270\u001b[0m \u001b[43m    \u001b[49m\u001b[43manchor_label_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Only use anchor labels for validation\u001b[39;49;00m\n\u001b[1;32m    271\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    272\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    273\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcenter_loss_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    274\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlearning_rate\u001b[49m\n\u001b[1;32m    275\u001b[0m \u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[10], line 203\u001b[0m, in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\u001b[0m\n\u001b[1;32m    200\u001b[0m negative_batch \u001b[38;5;241m=\u001b[39m X_train[\u001b[38;5;241m2\u001b[39m][batch_start:batch_end]\n\u001b[1;32m    201\u001b[0m labels_batch \u001b[38;5;241m=\u001b[39m y_train[batch_start:batch_end]\n\u001b[0;32m--> 203\u001b[0m total_loss, class_loss, center_loss, triplet_loss, acc \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43manchor_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpositive_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnegative_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels_batch\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    204\u001b[0m epoch_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m total_loss\n\u001b[1;32m    205\u001b[0m epoch_class_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m class_loss\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    832\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 833\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    836\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:869\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    867\u001b[0m   \u001b[38;5;66;03m# In this case we have created variables on the first call, so we run the\u001b[39;00m\n\u001b[1;32m    868\u001b[0m   \u001b[38;5;66;03m# defunned version which is guaranteed to never create variables.\u001b[39;00m\n\u001b[0;32m--> 869\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mtracing_compilation\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    870\u001b[0m \u001b[43m      \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_no_variable_creation_config\u001b[49m\n\u001b[1;32m    871\u001b[0m \u001b[43m  \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    872\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_variable_creation_config \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    873\u001b[0m   \u001b[38;5;66;03m# Release the lock early so that multiple threads can perform the call\u001b[39;00m\n\u001b[1;32m    874\u001b[0m   \u001b[38;5;66;03m# in parallel.\u001b[39;00m\n\u001b[1;32m    875\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:139\u001b[0m, in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    137\u001b[0m bound_args \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mbind(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    138\u001b[0m flat_inputs \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39munpack_inputs(bound_args)\n\u001b[0;32m--> 139\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_flat\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# pylint: disable=protected-access\u001b[39;49;00m\n\u001b[1;32m    140\u001b[0m \u001b[43m    \u001b[49m\u001b[43mflat_inputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcaptured_inputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcaptured_inputs\u001b[49m\n\u001b[1;32m    141\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/concrete_function.py:1322\u001b[0m, in \u001b[0;36mConcreteFunction._call_flat\u001b[0;34m(self, tensor_inputs, captured_inputs)\u001b[0m\n\u001b[1;32m   1318\u001b[0m possible_gradient_type \u001b[38;5;241m=\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPossibleTapeGradientTypes(args)\n\u001b[1;32m   1319\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (possible_gradient_type \u001b[38;5;241m==\u001b[39m gradients_util\u001b[38;5;241m.\u001b[39mPOSSIBLE_GRADIENT_TYPES_NONE\n\u001b[1;32m   1320\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m executing_eagerly):\n\u001b[1;32m   1321\u001b[0m   \u001b[38;5;66;03m# No tape is watching; skip to running the function.\u001b[39;00m\n\u001b[0;32m-> 1322\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_inference_function\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_preflattened\u001b[49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1323\u001b[0m forward_backward \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_select_forward_and_backward_functions(\n\u001b[1;32m   1324\u001b[0m     args,\n\u001b[1;32m   1325\u001b[0m     possible_gradient_type,\n\u001b[1;32m   1326\u001b[0m     executing_eagerly)\n\u001b[1;32m   1327\u001b[0m forward_function, args_with_tangents \u001b[38;5;241m=\u001b[39m forward_backward\u001b[38;5;241m.\u001b[39mforward()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:216\u001b[0m, in \u001b[0;36mAtomicFunction.call_preflattened\u001b[0;34m(self, args)\u001b[0m\n\u001b[1;32m    214\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mcall_preflattened\u001b[39m(\u001b[38;5;28mself\u001b[39m, args: Sequence[core\u001b[38;5;241m.\u001b[39mTensor]) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Any:\n\u001b[1;32m    215\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Calls with flattened tensor inputs and returns the structured output.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 216\u001b[0m   flat_outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_flat\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    217\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mpack_output(flat_outputs)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/atomic_function.py:251\u001b[0m, in \u001b[0;36mAtomicFunction.call_flat\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m    249\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m record\u001b[38;5;241m.\u001b[39mstop_recording():\n\u001b[1;32m    250\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_bound_context\u001b[38;5;241m.\u001b[39mexecuting_eagerly():\n\u001b[0;32m--> 251\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_bound_context\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    253\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43margs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction_type\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mflat_outputs\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    255\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    256\u001b[0m   \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    257\u001b[0m     outputs \u001b[38;5;241m=\u001b[39m make_call_op_in_graph(\n\u001b[1;32m    258\u001b[0m         \u001b[38;5;28mself\u001b[39m,\n\u001b[1;32m    259\u001b[0m         \u001b[38;5;28mlist\u001b[39m(args),\n\u001b[1;32m    260\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_bound_context\u001b[38;5;241m.\u001b[39mfunction_call_options\u001b[38;5;241m.\u001b[39mas_attrs(),\n\u001b[1;32m    261\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/context.py:1500\u001b[0m, in \u001b[0;36mContext.call_function\u001b[0;34m(self, name, tensor_inputs, num_outputs)\u001b[0m\n\u001b[1;32m   1498\u001b[0m cancellation_context \u001b[38;5;241m=\u001b[39m cancellation\u001b[38;5;241m.\u001b[39mcontext()\n\u001b[1;32m   1499\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cancellation_context \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 1500\u001b[0m   outputs \u001b[38;5;241m=\u001b[39m \u001b[43mexecute\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexecute\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1501\u001b[0m \u001b[43m      \u001b[49m\u001b[43mname\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdecode\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mutf-8\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1502\u001b[0m \u001b[43m      \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_outputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1503\u001b[0m \u001b[43m      \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtensor_inputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1504\u001b[0m \u001b[43m      \u001b[49m\u001b[43mattrs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1505\u001b[0m \u001b[43m      \u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1506\u001b[0m \u001b[43m  \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1507\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   1508\u001b[0m   outputs \u001b[38;5;241m=\u001b[39m execute\u001b[38;5;241m.\u001b[39mexecute_with_cancellation(\n\u001b[1;32m   1509\u001b[0m       name\u001b[38;5;241m.\u001b[39mdecode(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mutf-8\u001b[39m\u001b[38;5;124m\"\u001b[39m),\n\u001b[1;32m   1510\u001b[0m       num_outputs\u001b[38;5;241m=\u001b[39mnum_outputs,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1514\u001b[0m       cancellation_manager\u001b[38;5;241m=\u001b[39mcancellation_context,\n\u001b[1;32m   1515\u001b[0m   )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/execute.py:53\u001b[0m, in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     52\u001b[0m   ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m---> 53\u001b[0m   tensors \u001b[38;5;241m=\u001b[39m \u001b[43mpywrap_tfe\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mTFE_Py_Execute\u001b[49m\u001b[43m(\u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_handle\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdevice_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mop_name\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m     54\u001b[0m \u001b[43m                                      \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mattrs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnum_outputs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     55\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m core\u001b[38;5;241m.\u001b[39m_NotOkStatusException \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m     56\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m name \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"markdown","source":"# Model ( Spherical Center Loss)","metadata":{}},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras import layers, models, regularizers\nimport matplotlib.pyplot as plt\n\nclass CenterLossLayer(tf.keras.layers.Layer):\n    def __init__(self, num_classes, embedding_dim, margin=0.5, alpha=0.001, radius=0.7, **kwargs):\n        super(CenterLossLayer, self).__init__(**kwargs)\n        self.num_classes = num_classes\n        self.embedding_dim = embedding_dim\n        self.margin = margin\n        self.alpha = alpha  # EMA smoothing factor for updating centers\n        self.radius = radius  # Radius of each class sphere\n\n        # Initialize centers as trainable=False since we update them manually\n        self.centers = self.add_weight(name='centers',\n                                       shape=(num_classes, embedding_dim),\n                                       initializer='zeros',\n                                       trainable=False,\n                                       dtype=tf.float32)\n\n    def call(self, inputs):\n        embeddings, labels = inputs\n\n        # Ensure embeddings and labels are float32\n        embeddings = tf.cast(embeddings, tf.float32)\n        labels = tf.cast(labels, tf.float32)\n\n        # Convert one-hot encoded labels to class indices\n        labels = tf.argmax(labels, axis=-1, output_type=tf.int32)\n\n        # Compute batch means for each class\n        unique_labels, idx = tf.unique(labels)\n        batch_centers = tf.math.unsorted_segment_mean(embeddings, labels, num_segments=self.num_classes)\n\n        # Update centers with EMA\n        batch_centers_gathered = tf.gather(batch_centers, unique_labels)\n        center_updates = tf.scatter_nd(tf.expand_dims(unique_labels, 1),\n                                       batch_centers_gathered,\n                                       shape=tf.shape(self.centers))\n\n        new_centers = self.centers * (1 - self.alpha) + center_updates * self.alpha\n        self.centers.assign(new_centers)\n\n        # Compute distances between embeddings and class centers\n        expanded_embeddings = tf.expand_dims(embeddings, 1)\n        expanded_centers = tf.expand_dims(self.centers, 0)\n        distances = tf.reduce_sum(tf.square(expanded_embeddings - expanded_centers), axis=2)\n\n        # Compute correct distances (from the true class center)\n        correct_distances = tf.gather_nd(distances, tf.stack([tf.range(tf.shape(distances)[0]), labels], axis=1))\n\n        # Compute incorrect distances\n        labels_expanded = tf.expand_dims(labels, 1)\n        mask = tf.not_equal(tf.range(self.num_classes, dtype=tf.int32), labels_expanded)\n        incorrect_distances = tf.where(mask, distances, tf.float32.max)\n        min_incorrect_distances = tf.reduce_min(incorrect_distances, axis=1)\n\n        # Apply tangent-based margin: distance from the embedding to the surface of the other class's sphere\n        min_incorrect_surface_distances = tf.sqrt(min_incorrect_distances) - self.radius\n\n        # Ensure embeddings are at least 'margin' distance away from the surface of other class spheres\n        margin_loss = tf.reduce_mean(tf.maximum(0.0, self.margin - min_incorrect_surface_distances))\n\n        # Compute center loss: keep embeddings close to their class center (inside the sphere)\n        center_loss = tf.reduce_mean(tf.square(correct_distances - (self.radius ** 2)))\n\n        return center_loss + margin_loss\n\n\n\n# Triplet Loss Layer with Cosine Similarity\nclass TripletLossLayer(tf.keras.layers.Layer):\n    def __init__(self, margin=0.35, **kwargs):\n        super(TripletLossLayer, self).__init__(**kwargs)\n        self.margin = margin\n\n    def call(self, inputs):\n        anchor, positive, negative = inputs\n\n        # Normalize the embeddings to unit vectors for cosine similarity\n        anchor_normalized = tf.nn.l2_normalize(anchor, axis=-1)\n        positive_normalized = tf.nn.l2_normalize(positive, axis=-1)\n        negative_normalized = tf.nn.l2_normalize(negative, axis=-1)\n\n        # Compute cosine similarity: negative cosine similarity is used because we want to minimize distance\n        positive_similarity = tf.reduce_sum(anchor_normalized * positive_normalized, axis=-1)  # Cosine similarity between anchor and positive\n        negative_similarity = tf.reduce_sum(anchor_normalized * negative_normalized, axis=-1)  # Cosine similarity between anchor and negative\n\n        # Compute triplet loss (maximize positive similarity and minimize negative similarity)\n        triplet_loss = tf.maximum(0.0, negative_similarity - positive_similarity + self.margin)\n\n        return tf.reduce_mean(triplet_loss)\n\n\ndef build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay):\n    # Define input layers\n    anchor_input = layers.Input(shape=input_shape, name='anchor_input')\n    positive_input = layers.Input(shape=input_shape, name='positive_input')\n    negative_input = layers.Input(shape=input_shape, name='negative_input')\n    labels_input = layers.Input(shape=(num_classes,), name='labels_input', dtype='float32')\n\n    # Define VGG19 backbone (without the top layers)\n    base_model = tf.keras.applications.VGG19(include_top=False, input_shape=input_shape, weights='imagenet')\n    #base_model.trainable = False  # Optionally, freeze the base model to avoid retraining ImageNet weights\n\n    for layer in base_model.layers[:15]:  # Freeze the first 15 layers (you can adjust this number)\n        layer.trainable = False\n    \n    # Flatten the output of the VGG19 backbone\n    x = base_model.output\n    x = layers.Flatten()(x)\n    \n    \n    x = layers.Dense(1231, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(987, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dropout(dropout_rate)(x)\n    x = layers.Dense(1003, activation='swish', kernel_regularizer=regularizers.l2(weight_decay))(x)\n    x = layers.Dense(embedding_dim, activation='swish')(x)\n    \n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n#     x = layers.Dropout(dropout_rate)(x)\n#     x = layers.Dense(embedding_dim, activation='swish', kernel_regularizer=tf.keras.regularizers.l2(weight_decay))(x)\n\n    # Define the embedding model\n    embedding_model = models.Model(inputs=base_model.input, outputs=x, name='embedding_model')\n\n    # Generate embeddings for anchor, positive, and negative\n    embedding_anchor = embedding_model(anchor_input)\n    embedding_positive = embedding_model(positive_input)\n    embedding_negative = embedding_model(negative_input)\n\n    # Define logits for classification using anchor embedding only\n    logits = layers.Dense(num_classes, activation='softmax', name='classification_layer')(embedding_anchor)\n\n    # Define the custom triplet loss layer\n    triplet_loss_layer = TripletLossLayer(margin=1.0)\n    triplet_loss_output = triplet_loss_layer([embedding_anchor, embedding_positive, embedding_negative])\n\n    # Define the custom center loss layer\n    center_loss_layer = CenterLossLayer(num_classes=num_classes, embedding_dim=embedding_dim)\n    center_loss_output = center_loss_layer([embedding_anchor, labels_input])\n\n    # Define the triplet model (used for embedding training)\n    triplet_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input], \n        outputs=[embedding_anchor, embedding_positive, embedding_negative],\n        name='triplet_model'\n    )\n\n    # Define the full model with classification, center loss, and triplet loss\n    full_model = models.Model(\n        inputs=[anchor_input, positive_input, negative_input, labels_input],\n        outputs=[logits, center_loss_output, triplet_loss_output],\n        name='full_model'\n    )\n\n    return triplet_model, full_model\n\n\ndef train_and_evaluate(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate):\n    optimizer = tf.keras.optimizers.Adam(learning_rate)\n\n    @tf.function\n    def train_step(anchor, positive, negative, labels):\n        with tf.GradientTape() as tape:\n            # Forward pass\n            outputs = model([anchor, positive, negative, labels], training=True)\n            logits, center_loss, triplet_loss = outputs  # Expecting 3 outputs here\n            \n            # Logit loss (classification loss)\n            classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n            # Total loss\n            total_loss = classification_loss + 0.05 * center_loss + triplet_loss\n\n        gradients = tape.gradient(total_loss, model.trainable_variables)\n        optimizer.apply_gradients(zip(gradients, model.trainable_variables))\n\n        # Calculate training accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        train_acc = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n\n        return total_loss, classification_loss, center_loss, triplet_loss, train_acc\n\n    @tf.function\n    def eval_step(anchor, positive, negative, labels):\n        logits, center_loss, triplet_loss = model([anchor, positive, negative, labels], training=False)\n        classification_loss = tf.keras.losses.CategoricalCrossentropy()(labels, logits)\n        \n        # Calculate validation accuracy\n        predictions = tf.argmax(logits, axis=-1)\n        labels_true = tf.argmax(labels, axis=-1)\n        accuracy = tf.reduce_mean(tf.cast(tf.equal(predictions, labels_true), tf.float32))\n        \n        return classification_loss, center_loss, triplet_loss, accuracy\n\n    for epoch in range(epochs):\n        print(f\"Epoch {epoch+1}/{epochs}\")\n        \n        # Training loop\n        epoch_loss, epoch_class_loss, epoch_center_loss, epoch_triplet_loss, epoch_acc = 0, 0, 0, 0, 0\n        for batch_start in range(0, len(X_train[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_train[0]))\n            anchor_batch = X_train[0][batch_start:batch_end]\n            positive_batch = X_train[1][batch_start:batch_end]\n            negative_batch = X_train[2][batch_start:batch_end]\n            labels_batch = y_train[batch_start:batch_end]\n\n            total_loss, class_loss, center_loss, triplet_loss, acc = train_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            epoch_loss += total_loss\n            epoch_class_loss += class_loss\n            epoch_center_loss += center_loss\n            epoch_triplet_loss += triplet_loss\n            epoch_acc += acc\n\n        # Validation loop\n        val_loss, val_class_loss, val_center_loss, val_triplet_loss, val_acc = 0, 0, 0, 0, 0\n        for batch_start in range(0, len(X_val[0]), batch_size):\n            batch_end = min(batch_start + batch_size, len(X_val[0]))\n            anchor_batch = X_val[0][batch_start:batch_end]\n            positive_batch = X_val[1][batch_start:batch_end]\n            negative_batch = X_val[2][batch_start:batch_end]\n            labels_batch = y_val[batch_start:batch_end]\n\n            class_loss, center_loss, triplet_loss, acc = eval_step(anchor_batch, positive_batch, negative_batch, labels_batch)\n            val_class_loss += class_loss\n            val_center_loss += center_loss\n            val_triplet_loss += triplet_loss\n            val_acc += acc\n\n        # Average out the losses and accuracies\n        epoch_loss /= (len(X_train[0]) // batch_size)\n        epoch_class_loss /= (len(X_train[0]) // batch_size)\n        epoch_center_loss /= (len(X_train[0]) // batch_size)\n        epoch_triplet_loss /= (len(X_train[0]) // batch_size)\n        epoch_acc /= (len(X_train[0]) // batch_size)\n\n        val_class_loss /= (len(X_val[0]) // batch_size)\n        val_center_loss /= (len(X_val[0]) // batch_size)\n        val_triplet_loss /= (len(X_val[0]) // batch_size)\n        val_acc /= (len(X_val[0]) // batch_size)\n\n        # Print losses and accuracies\n        print(f\"Training loss: {epoch_loss.numpy():.4f}, \"\n              f\"Classification Loss: {epoch_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {epoch_center_loss.numpy():.4f}, \"\n              f\"Triplet Loss: {epoch_triplet_loss.numpy():.4f}, \"\n              f\"Accuracy: {epoch_acc.numpy():.4f}\")\n        \n        print(f\"Validation Classification Loss: {val_class_loss.numpy():.4f}, \"\n              f\"Center Loss: {val_center_loss.numpy():.4f}, \"\n              f\"Triplet Loss: {val_triplet_loss.numpy():.4f}, \"\n              f\"Accuracy: {val_acc.numpy():.4f}\\n\")\n\n# Example usage\ninput_shape = (224, 224, 3)\nnum_classes = 31\nembedding_dim = 768\ndropout_rate = 0.1\nweight_decay = 0.01 #1e-4\ncenter_loss_weight = 0.01 #0.01\nlearning_rate = 1e-4\nbatch_size = 32\nepochs = 25\n\n# Assume X_train, y_train, X_val, y_val are already defined\n# Preprocessing and splitting code should be executed before this\n\ntriplet_model, full_model = build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n# Example function call to train and evaluate\ntrain_and_evaluate(\n    full_model,\n    [anchor_train, positive_train, negative_train],  # Input triplets for training\n    anchor_label_train,  # Only use anchor labels for training\n    [anchor_val, positive_val, negative_val],  # Input triplets for validation\n    anchor_label_val,  # Only use anchor labels for validation\n    batch_size,\n    epochs,\n    center_loss_weight,\n    learning_rate\n)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-19T15:43:54.133774Z","iopub.execute_input":"2024-09-19T15:43:54.134281Z","iopub.status.idle":"2024-09-19T16:02:27.072756Z","shell.execute_reply.started":"2024-09-19T15:43:54.134240Z","shell.execute_reply":"2024-09-19T16:02:27.071010Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Epoch 1/25\nTraining loss: 12722.6230, Classification Loss: 3.5638, Center Loss: 254361.5781, Triplet Loss: 0.9820, Accuracy: 0.0368\nValidation Classification Loss: 3.4260, Center Loss: 3.2018, Triplet Loss: 0.9408, Accuracy: 0.0469\n\nEpoch 2/25\nTraining loss: 4.6624, Classification Loss: 3.4851, Center Loss: 3.9007, Triplet Loss: 0.9822, Accuracy: 0.0513\nValidation Classification Loss: 3.4166, Center Loss: 1.2106, Triplet Loss: 0.9244, Accuracy: 0.0573\n\nEpoch 3/25\nTraining loss: 4.5467, Classification Loss: 3.4742, Center Loss: 1.9221, Triplet Loss: 0.9764, Accuracy: 0.0619\nValidation Classification Loss: 3.4072, Center Loss: 0.7970, Triplet Loss: 0.9085, Accuracy: 0.0729\n\nEpoch 4/25\nTraining loss: 4.4859, Classification Loss: 3.4622, Center Loss: 1.2600, Triplet Loss: 0.9606, Accuracy: 0.0826\nValidation Classification Loss: 3.3968, Center Loss: 0.6820, Triplet Loss: 0.8930, Accuracy: 0.0833\n\nEpoch 5/25\nTraining loss: 4.4482, Classification Loss: 3.4512, Center Loss: 1.0234, Triplet Loss: 0.9458, Accuracy: 0.0776\nValidation Classification Loss: 3.3847, Center Loss: 0.6622, Triplet Loss: 0.8753, Accuracy: 0.0859\n\nEpoch 6/25\nTraining loss: 4.4105, Classification Loss: 3.4357, Center Loss: 0.9243, Triplet Loss: 0.9287, Accuracy: 0.0988\nValidation Classification Loss: 3.3709, Center Loss: 0.6733, Triplet Loss: 0.8560, Accuracy: 0.0938\n\nEpoch 7/25\nTraining loss: 4.3778, Classification Loss: 3.4182, Center Loss: 0.9101, Triplet Loss: 0.9141, Accuracy: 0.1144\nValidation Classification Loss: 3.3548, Center Loss: 0.7004, Triplet Loss: 0.8330, Accuracy: 0.1042\n\nEpoch 8/25\nTraining loss: 4.3371, Classification Loss: 3.4013, Center Loss: 0.9185, Triplet Loss: 0.8899, Accuracy: 0.1356\nValidation Classification Loss: 3.3360, Center Loss: 0.7212, Triplet Loss: 0.8077, Accuracy: 0.1094\n\nEpoch 9/25\nTraining loss: 4.2969, Classification Loss: 3.3780, Center Loss: 0.9690, Triplet Loss: 0.8704, Accuracy: 0.1507\nValidation Classification Loss: 3.3143, Center Loss: 0.7298, Triplet Loss: 0.7817, Accuracy: 0.1380\n\nEpoch 10/25\nTraining loss: 4.0901, Classification Loss: 3.2581, Center Loss: 1.1896, Triplet Loss: 0.7725, Accuracy: 0.2266\nValidation Classification Loss: 3.2001, Center Loss: 0.8521, Triplet Loss: 0.6883, Accuracy: 0.1901\n\nEpoch 14/25\nTraining loss: 4.0407, Classification Loss: 3.2234, Center Loss: 1.2714, Triplet Loss: 0.7537, Accuracy: 0.2288\nValidation Classification Loss: 3.1666, Center Loss: 0.8921, Triplet Loss: 0.6767, Accuracy: 0.1927\n\nEpoch 15/25\nTraining loss: 3.9883, Classification Loss: 3.1882, Center Loss: 1.3336, Triplet Loss: 0.7334, Accuracy: 0.2338\nValidation Classification Loss: 3.1307, Center Loss: 0.9634, Triplet Loss: 0.6675, Accuracy: 0.2057\n\nEpoch 16/25\nTraining loss: 3.9410, Classification Loss: 3.1509, Center Loss: 1.4215, Triplet Loss: 0.7190, Accuracy: 0.2494\nValidation Classification Loss: 3.0967, Center Loss: 1.0007, Triplet Loss: 0.6579, Accuracy: 0.2161\n\nEpoch 17/25\nTraining loss: 3.8866, Classification Loss: 3.1105, Center Loss: 1.4889, Triplet Loss: 0.7017, Accuracy: 0.2522\nValidation Classification Loss: 3.0593, Center Loss: 1.0627, Triplet Loss: 0.6458, Accuracy: 0.2266\n\nEpoch 18/25\nTraining loss: 3.8317, Classification Loss: 3.0702, Center Loss: 1.6483, Triplet Loss: 0.6791, Accuracy: 0.2511\nValidation Classification Loss: 3.0243, Center Loss: 1.1211, Triplet Loss: 0.6325, Accuracy: 0.2266\n\nEpoch 19/25\nTraining loss: 3.7632, Classification Loss: 3.0216, Center Loss: 1.7713, Triplet Loss: 0.6531, Accuracy: 0.2634\nValidation Classification Loss: 2.9753, Center Loss: 1.2928, Triplet Loss: 0.6161, Accuracy: 0.2292\n\nEpoch 20/25\nTraining loss: 3.6919, Classification Loss: 2.9731, Center Loss: 1.9201, Triplet Loss: 0.6228, Accuracy: 0.2522\nValidation Classification Loss: 2.9220, Center Loss: 1.4928, Triplet Loss: 0.6006, Accuracy: 0.2266\n\nEpoch 21/25\nTraining loss: 3.6206, Classification Loss: 2.9237, Center Loss: 1.9868, Triplet Loss: 0.5975, Accuracy: 0.2734\nValidation Classification Loss: 2.8756, Center Loss: 1.5245, Triplet Loss: 0.5836, Accuracy: 0.2448\n\nEpoch 22/25\nTraining loss: 3.5573, Classification Loss: 2.8763, Center Loss: 2.0497, Triplet Loss: 0.5785, Accuracy: 0.2751\nValidation Classification Loss: 2.8332, Center Loss: 1.6002, Triplet Loss: 0.5730, Accuracy: 0.2552\n\nEpoch 23/25\nTraining loss: 3.4912, Classification Loss: 2.8281, Center Loss: 2.0623, Triplet Loss: 0.5599, Accuracy: 0.2963\nValidation Classification Loss: 2.7943, Center Loss: 1.6256, Triplet Loss: 0.5630, Accuracy: 0.2578\n\nEpoch 24/25\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[14], line 272\u001b[0m\n\u001b[1;32m    270\u001b[0m triplet_model, full_model \u001b[38;5;241m=\u001b[39m build_vgg19_triplet_center_loss(input_shape, num_classes, embedding_dim, dropout_rate, weight_decay)\n\u001b[1;32m    271\u001b[0m \u001b[38;5;66;03m# Example function call to train and evaluate\u001b[39;00m\n\u001b[0;32m--> 272\u001b[0m \u001b[43mtrain_and_evaluate\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    273\u001b[0m \u001b[43m    \u001b[49m\u001b[43mfull_model\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    274\u001b[0m \u001b[43m    \u001b[49m\u001b[43m[\u001b[49m\u001b[43manchor_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpositive_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnegative_train\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Input triplets for training\u001b[39;49;00m\n\u001b[1;32m    275\u001b[0m \u001b[43m    \u001b[49m\u001b[43manchor_label_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Only use anchor labels for training\u001b[39;49;00m\n\u001b[1;32m    276\u001b[0m \u001b[43m    \u001b[49m\u001b[43m[\u001b[49m\u001b[43manchor_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpositive_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnegative_val\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Input triplets for validation\u001b[39;49;00m\n\u001b[1;32m    277\u001b[0m \u001b[43m    \u001b[49m\u001b[43manchor_label_val\u001b[49m\u001b[43m,\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Only use anchor labels for validation\u001b[39;49;00m\n\u001b[1;32m    278\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    279\u001b[0m \u001b[43m    \u001b[49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    280\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcenter_loss_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    281\u001b[0m \u001b[43m    \u001b[49m\u001b[43mlearning_rate\u001b[49m\n\u001b[1;32m    282\u001b[0m \u001b[43m)\u001b[49m\n","Cell \u001b[0;32mIn[14], line 210\u001b[0m, in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, X_train, y_train, X_val, y_val, batch_size, epochs, center_loss_weight, learning_rate)\u001b[0m\n\u001b[1;32m    207\u001b[0m negative_batch \u001b[38;5;241m=\u001b[39m X_train[\u001b[38;5;241m2\u001b[39m][batch_start:batch_end]\n\u001b[1;32m    208\u001b[0m labels_batch \u001b[38;5;241m=\u001b[39m y_train[batch_start:batch_end]\n\u001b[0;32m--> 210\u001b[0m total_loss, class_loss, center_loss, triplet_loss, acc \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_step\u001b[49m\u001b[43m(\u001b[49m\u001b[43manchor_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpositive_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnegative_batch\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlabels_batch\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    211\u001b[0m epoch_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m total_loss\n\u001b[1;32m    212\u001b[0m epoch_class_loss \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m class_loss\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/util/traceback_utils.py:150\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m filtered_tb \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m    149\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 150\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    151\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mException\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    152\u001b[0m   filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:833\u001b[0m, in \u001b[0;36mFunction.__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    830\u001b[0m compiler \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mxla\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mnonXla\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    832\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m OptionalXlaContext(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_jit_compile):\n\u001b[0;32m--> 833\u001b[0m   result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    835\u001b[0m new_tracing_count \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mexperimental_get_tracing_count()\n\u001b[1;32m    836\u001b[0m without_tracing \u001b[38;5;241m=\u001b[39m (tracing_count \u001b[38;5;241m==\u001b[39m new_tracing_count)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/polymorphic_function.py:869\u001b[0m, in \u001b[0;36mFunction._call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    866\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n\u001b[1;32m    867\u001b[0m   \u001b[38;5;66;03m# In this case we have created variables on the first call, so we run the\u001b[39;00m\n\u001b[1;32m    868\u001b[0m   \u001b[38;5;66;03m# defunned version which is guaranteed to never create variables.\u001b[39;00m\n\u001b[0;32m--> 869\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mtracing_compilation\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcall_function\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    870\u001b[0m \u001b[43m      \u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_no_variable_creation_config\u001b[49m\n\u001b[1;32m    871\u001b[0m \u001b[43m  \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    872\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_variable_creation_config \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    873\u001b[0m   \u001b[38;5;66;03m# Release the lock early so that multiple threads can perform the call\u001b[39;00m\n\u001b[1;32m    874\u001b[0m   \u001b[38;5;66;03m# in parallel.\u001b[39;00m\n\u001b[1;32m    875\u001b[0m   \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock\u001b[38;5;241m.\u001b[39mrelease()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/eager/polymorphic_function/tracing_compilation.py:138\u001b[0m, in \u001b[0;36mcall_function\u001b[0;34m(args, kwargs, tracing_options)\u001b[0m\n\u001b[1;32m    136\u001b[0m \u001b[38;5;66;03m# Bind it ourselves to skip unnecessary canonicalization of default call.\u001b[39;00m\n\u001b[1;32m    137\u001b[0m bound_args \u001b[38;5;241m=\u001b[39m function\u001b[38;5;241m.\u001b[39mfunction_type\u001b[38;5;241m.\u001b[39mbind(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m--> 138\u001b[0m flat_inputs \u001b[38;5;241m=\u001b[39m \u001b[43mfunction\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction_type\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43munpack_inputs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbound_args\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    139\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m function\u001b[38;5;241m.\u001b[39m_call_flat(  \u001b[38;5;66;03m# pylint: disable=protected-access\u001b[39;00m\n\u001b[1;32m    140\u001b[0m     flat_inputs, captured_inputs\u001b[38;5;241m=\u001b[39mfunction\u001b[38;5;241m.\u001b[39mcaptured_inputs\n\u001b[1;32m    141\u001b[0m )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/core/function/polymorphism/function_type.py:391\u001b[0m, in \u001b[0;36mFunctionType.unpack_inputs\u001b[0;34m(self, bound_parameters)\u001b[0m\n\u001b[1;32m    388\u001b[0m flat \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    389\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m p \u001b[38;5;129;01min\u001b[39;00m sorted_parameters:\n\u001b[1;32m    390\u001b[0m   flat\u001b[38;5;241m.\u001b[39mextend(\n\u001b[0;32m--> 391\u001b[0m       \u001b[43mp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtype_constraint\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto_tensors\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbound_parameters\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43marguments\u001b[49m\u001b[43m[\u001b[49m\u001b[43mp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    392\u001b[0m   )\n\u001b[1;32m    394\u001b[0m dealiased_inputs \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    395\u001b[0m ids_used \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mset\u001b[39m()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/tensor.py:1081\u001b[0m, in \u001b[0;36mTensorSpec.to_tensors\u001b[0;34m(self, value)\u001b[0m\n\u001b[1;32m   1080\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mto_tensors\u001b[39m(\u001b[38;5;28mself\u001b[39m, value):\n\u001b[0;32m-> 1081\u001b[0m   value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcast\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrace_type\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mInternalCastContext\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1082\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m value\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;241m.\u001b[39mis_subtype_of(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshape):\n\u001b[1;32m   1083\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\n\u001b[1;32m   1084\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReceived tensor of shape \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mvalue\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m instead of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1085\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/tensor.py:1108\u001b[0m, in \u001b[0;36mTensorSpec.cast\u001b[0;34m(self, value, casting_context)\u001b[0m\n\u001b[1;32m   1105\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\n\u001b[1;32m   1107\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(value, Tensor):\n\u001b[0;32m-> 1108\u001b[0m   value \u001b[38;5;241m=\u001b[39m \u001b[43mtensor_conversion_registry\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconvert\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1109\u001b[0m value_spec \u001b[38;5;241m=\u001b[39m TensorSpec(value\u001b[38;5;241m.\u001b[39mshape, value\u001b[38;5;241m.\u001b[39mdtype, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mname)\n\u001b[1;32m   1111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m value_spec\u001b[38;5;241m.\u001b[39mis_subtype_of(\u001b[38;5;28mself\u001b[39m):\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/tensor_conversion_registry.py:234\u001b[0m, in \u001b[0;36mconvert\u001b[0;34m(value, dtype, name, as_ref, preferred_dtype, accepted_result_types)\u001b[0m\n\u001b[1;32m    225\u001b[0m       \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mRuntimeError\u001b[39;00m(\n\u001b[1;32m    226\u001b[0m           _add_error_prefix(\n\u001b[1;32m    227\u001b[0m               \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConversion function \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mconversion_func\u001b[38;5;132;01m!r}\u001b[39;00m\u001b[38;5;124m for type \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    230\u001b[0m               \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mactual = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mret\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mbase_dtype\u001b[38;5;241m.\u001b[39mname\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m,\n\u001b[1;32m    231\u001b[0m               name\u001b[38;5;241m=\u001b[39mname))\n\u001b[1;32m    233\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ret \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 234\u001b[0m   ret \u001b[38;5;241m=\u001b[39m \u001b[43mconversion_func\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mas_ref\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mas_ref\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ret \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28mNotImplemented\u001b[39m:\n\u001b[1;32m    237\u001b[0m   \u001b[38;5;28;01mcontinue\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/constant_tensor_conversion.py:29\u001b[0m, in \u001b[0;36m_constant_tensor_conversion_function\u001b[0;34m(v, dtype, name, as_ref)\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mtensorflow\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpython\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mframework\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m constant_op  \u001b[38;5;66;03m# pylint: disable=g-import-not-at-top\u001b[39;00m\n\u001b[1;32m     28\u001b[0m _ \u001b[38;5;241m=\u001b[39m as_ref\n\u001b[0;32m---> 29\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mconstant_op\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstant\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/ops/weak_tensor_ops.py:142\u001b[0m, in \u001b[0;36mweak_tensor_binary_op_wrapper.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mwrapper\u001b[39m(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    141\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m ops\u001b[38;5;241m.\u001b[39mis_auto_dtype_conversion_enabled():\n\u001b[0;32m--> 142\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mop\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    143\u001b[0m   bound_arguments \u001b[38;5;241m=\u001b[39m signature\u001b[38;5;241m.\u001b[39mbind(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m    144\u001b[0m   bound_arguments\u001b[38;5;241m.\u001b[39mapply_defaults()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/constant_op.py:276\u001b[0m, in \u001b[0;36mconstant\u001b[0;34m(value, dtype, shape, name)\u001b[0m\n\u001b[1;32m    177\u001b[0m \u001b[38;5;129m@tf_export\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mconstant\u001b[39m\u001b[38;5;124m\"\u001b[39m, v1\u001b[38;5;241m=\u001b[39m[])\n\u001b[1;32m    178\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconstant\u001b[39m(\n\u001b[1;32m    179\u001b[0m     value, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, shape\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConst\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    180\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Union[ops\u001b[38;5;241m.\u001b[39mOperation, ops\u001b[38;5;241m.\u001b[39m_EagerTensorBase]:\n\u001b[1;32m    181\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Creates a constant tensor from a tensor-like object.\u001b[39;00m\n\u001b[1;32m    182\u001b[0m \n\u001b[1;32m    183\u001b[0m \u001b[38;5;124;03m  Note: All eager `tf.Tensor` values are immutable (in contrast to\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[38;5;124;03m    ValueError: if called on a symbolic tensor.\u001b[39;00m\n\u001b[1;32m    275\u001b[0m \u001b[38;5;124;03m  \"\"\"\u001b[39;00m\n\u001b[0;32m--> 276\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_constant_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverify_shape\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    277\u001b[0m \u001b[43m                        \u001b[49m\u001b[43mallow_broadcast\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/constant_op.py:289\u001b[0m, in \u001b[0;36m_constant_impl\u001b[0;34m(value, dtype, shape, name, verify_shape, allow_broadcast)\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m trace\u001b[38;5;241m.\u001b[39mTrace(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtf.constant\u001b[39m\u001b[38;5;124m\"\u001b[39m):\n\u001b[1;32m    288\u001b[0m       \u001b[38;5;28;01mreturn\u001b[39;00m _constant_eager_impl(ctx, value, dtype, shape, verify_shape)\n\u001b[0;32m--> 289\u001b[0m   \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_constant_eager_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[43mctx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mverify_shape\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    291\u001b[0m const_tensor \u001b[38;5;241m=\u001b[39m ops\u001b[38;5;241m.\u001b[39m_create_graph_constant(  \u001b[38;5;66;03m# pylint: disable=protected-access\u001b[39;00m\n\u001b[1;32m    292\u001b[0m     value, dtype, shape, name, verify_shape, allow_broadcast\n\u001b[1;32m    293\u001b[0m )\n\u001b[1;32m    294\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m const_tensor\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/constant_op.py:301\u001b[0m, in \u001b[0;36m_constant_eager_impl\u001b[0;34m(ctx, value, dtype, shape, verify_shape)\u001b[0m\n\u001b[1;32m    297\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_constant_eager_impl\u001b[39m(\n\u001b[1;32m    298\u001b[0m     ctx, value, dtype, shape, verify_shape\n\u001b[1;32m    299\u001b[0m ) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m ops\u001b[38;5;241m.\u001b[39m_EagerTensorBase:\n\u001b[1;32m    300\u001b[0m \u001b[38;5;250m  \u001b[39m\u001b[38;5;124;03m\"\"\"Creates a constant on the current device.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 301\u001b[0m   t \u001b[38;5;241m=\u001b[39m \u001b[43mconvert_to_eager_tensor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mctx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    302\u001b[0m   \u001b[38;5;28;01mif\u001b[39;00m shape \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    303\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m t\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/tensorflow/python/framework/constant_op.py:108\u001b[0m, in \u001b[0;36mconvert_to_eager_tensor\u001b[0;34m(value, ctx, dtype)\u001b[0m\n\u001b[1;32m    106\u001b[0m     dtype \u001b[38;5;241m=\u001b[39m dtypes\u001b[38;5;241m.\u001b[39mas_dtype(dtype)\u001b[38;5;241m.\u001b[39mas_datatype_enum\n\u001b[1;32m    107\u001b[0m ctx\u001b[38;5;241m.\u001b[39mensure_initialized()\n\u001b[0;32m--> 108\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mEagerTensor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mctx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdevice_name\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]}]}